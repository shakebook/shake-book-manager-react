{"ast":null,"code":"import { manager } from '@/service/api/v1/manager_pb';\nimport * as types from '@/pages/content/pages/menu/store/types';\nimport axios from 'axios';\nimport camelcaseKeys from 'camelcase-keys';\nimport api from '@/requestAPI';\nimport { notification } from 'antd';\n\nconst getMenuListAction = res => {\n  return {\n    type: types.GET_MENU_LIST,\n    data: res\n  };\n};\n\nexport function createMenuRequest(req) {\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: api.managerMenu,\n      data: req,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret = manager.Response.fromObject(camelcaseKeys(res.data, {\n        deep: true\n      }));\n\n      if (res.status === 200 && ret.success) {\n        notification['success']({\n          message: '信息提示',\n          description: \"新增成功\"\n        });\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    }).catch(function (err) {\n      localStorage.removeItem(\"token\");\n      window.globalHistory.push('/login');\n    });\n  };\n}\nexport function getMenuListRequest() {\n  return dispatch => {\n    axios({\n      method: 'get',\n      url: api.managerMenu,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret = manager.GetMenuListResponse.fromObject(camelcaseKeys(res.data, {\n        deep: true\n      }));\n\n      if (res.status === 200 && ret.success) {\n        const tree = toTree(ret.data);\n        dispatch(getMenuListAction(tree));\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    }).catch(function (err) {\n      alert(\"err\");\n    });\n  };\n} //删除\n\nexport function deleteRowRequest(req) {\n  return dispatch => {\n    axios({\n      method: 'delete',\n      url: api.managerMenu,\n      data: req,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret = manager.GetMenuListResponse.fromObject(camelcaseKeys(res.data, {\n        deep: true\n      }));\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getMenuListRequest());\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    }).catch(function (err) {\n      alert(\"err\");\n    });\n  };\n}\n\nfunction toTree(data) {\n  //递归树算法 将pid-id的数据库返回的json 转为树json\n  // 删除 所有 children,以防止多次调用\n  let tree = [];\n  data.forEach(function (item) {\n    const o = {\n      title: item.menuName,\n      value: item.id,\n      key: item.id,\n      menuIcon: item.menuIcon,\n      menuName: item.menuName,\n      menuRouter: item.menuRouter,\n      parentId: item.parentId\n    };\n    delete o.children;\n    tree.push(o);\n  });\n  console.log(\"tree1\", tree); // 将数据存储为 以id为KEY的map索引数据列 \n\n  var map = new Map();\n  tree.forEach(function (item) {\n    const id = item.key;\n    map.set(id, item);\n  });\n  console.log(\"tree2\", tree);\n  console.log(map);\n  let val = [];\n  tree.forEach(function (item) {\n    // 以当前遍历项，的pid,去map对象中找到索引的id\n    var parent = map.get(item.parentId); // 好绕啊，如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到，他对应的父级中\n\n    if (parent) {\n      (parent.children || (parent.children = [])).push(item); //这里更改的是map对象的数据(索引数据)\n      // console.log(map);\n    } else {\n      //如果没有在map中找到对应的索引ID,那么直接把 当前的item添加到 val结果集中，作为顶级\n      val.push(item);\n    }\n  });\n  return val;\n}","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/src/pages/content/pages/menu/store/actions.ts"],"names":["manager","types","axios","camelcaseKeys","api","notification","getMenuListAction","res","type","GET_MENU_LIST","data","createMenuRequest","req","dispatch","method","url","managerMenu","headers","localStorage","getItem","then","ret","Response","fromObject","deep","status","success","message","description","catch","err","removeItem","window","globalHistory","push","getMenuListRequest","GetMenuListResponse","tree","toTree","alert","deleteRowRequest","forEach","item","o","title","menuName","value","id","key","menuIcon","menuRouter","parentId","children","console","log","map","Map","set","val","parent","get"],"mappings":"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","sourcesContent":["import { manager } from '@/service/api/v1/manager_pb'\nimport * as types from '@/pages/content/pages/menu/store/types'\nimport axios from 'axios';\nimport camelcaseKeys from 'camelcase-keys'\nimport api from '@/requestAPI';\nimport { notification } from 'antd';\nimport { Dispatch } from \"redux\"\ndeclare global {\n  interface Window {\n    globalHistory: any\n  }\n}\nconst getMenuListAction = (res: manager.IMenuInfo[]): types.GetMenuListAction => {\n  return {\n    type: types.GET_MENU_LIST,\n    data: res\n  }\n}\n\nexport function createMenuRequest(req: manager.ICreateMenuRequest) {\n  return (dispatch: Dispatch<any>) => {\n    axios({\n      method: 'post',\n      url: api.managerMenu,\n      data: req,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n\n      let ret: manager.IResponse =\n        manager.Response.fromObject(\n          camelcaseKeys(res.data as Object, {\n            deep: true\n          }),\n        )\n\n      if (res.status === 200 && ret.success) {\n        notification['success']({\n          message: '信息提示',\n          description: \"新增成功\"\n        });\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    })\n      .catch(function (err) {\n        localStorage.removeItem(\"token\")\n        window.globalHistory.push('/login')\n      });\n  }\n}\nexport function getMenuListRequest() {\n  return (dispatch: types.GetMenuDispatch) => {\n    axios({\n      method: 'get',\n      url: api.managerMenu,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret: manager.IGetMenuListResponse =\n        manager.GetMenuListResponse.fromObject(\n          camelcaseKeys(res.data as Object, {\n            deep: true\n          }),\n        )\n\n      if (res.status === 200 && ret.success) {\n        const tree = toTree(ret.data as manager.IMenuInfo[])\n        dispatch(getMenuListAction(tree as MenuTree[]))\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    })\n      .catch(function (err) {\n        alert(\"err\")\n      });\n  }\n}\n\n//删除\nexport function deleteRowRequest(req: manager.IMenuId) {\n  return (dispatch: Dispatch<any>) => {\n    axios({\n      method: 'delete',\n      url: api.managerMenu,\n      data: req,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret: manager.IGetMenuListResponse =\n        manager.GetMenuListResponse.fromObject(\n          camelcaseKeys(res.data as Object, {\n            deep: true\n          }),\n        )\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getMenuListRequest())\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    })\n      .catch(function (err) {\n        alert(\"err\")\n      });\n  }\n}\n\nexport interface MenuTree {\n  title: string\n  value: number\n  key: number\n  parentId: number\n  menuIcon: string\n  menuName: string\n  menuRouter: string\n  children?: MenuTree[]\n}\n\nfunction toTree(data: manager.IMenuInfo[]): MenuTree[] { //递归树算法 将pid-id的数据库返回的json 转为树json\n  // 删除 所有 children,以防止多次调用\n  let tree: MenuTree[] = []\n  data.forEach(function (item) {\n    const o: MenuTree = {\n      title: item.menuName as string,\n      value: item.id as number,\n      key: item.id as number,\n      menuIcon: item.menuIcon as string,\n      menuName: item.menuName as string,\n      menuRouter: item.menuRouter as string,\n      parentId: item.parentId as number,\n    }\n    delete o.children\n    tree.push(o)\n  });\n  console.log(\"tree1\", tree)\n  // 将数据存储为 以id为KEY的map索引数据列 \n  var map = new Map<any, MenuTree>();\n  tree.forEach(function (item: MenuTree) {\n    const id: number = item.key\n    map.set(id, item)\n  });\n  console.log(\"tree2\", tree)\n  console.log(map);\n\n  let val: MenuTree[] = [];\n  tree.forEach(function (item) {\n    // 以当前遍历项，的pid,去map对象中找到索引的id\n    var parent = map.get(item.parentId);\n    // 好绕啊，如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到，他对应的父级中\n    if (parent) {\n      (parent.children || (parent.children = [])).push(item); //这里更改的是map对象的数据(索引数据)\n      // console.log(map);\n    } else {\n      //如果没有在map中找到对应的索引ID,那么直接把 当前的item添加到 val结果集中，作为顶级\n      val.push(item);\n    }\n  });\n\n\n  return val\n}\n"]},"metadata":{},"sourceType":"module"}