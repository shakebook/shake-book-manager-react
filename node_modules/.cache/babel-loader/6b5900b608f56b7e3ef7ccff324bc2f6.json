{"ast":null,"code":"import { shakebook } from '@/service/api/v1/account_pb';\nimport * as types from './types';\nimport axios from 'axios';\nimport camelcaseKeys from 'camelcase-keys';\nimport api from '@/requestAPI';\nimport { notification } from 'antd';\nimport { manager } from '@/service/api/v1/manager_pb';\n\nconst getAccountAction = res => {\n  return {\n    type: types.GET_ACCOUNT,\n    data: { ...res\n    }\n  };\n};\n\nconst getAccountMenuAction = data => {\n  return {\n    type: types.GET_ACCOUNT_MENU,\n    data: [...data]\n  };\n};\n\nexport function getAccountRequest() {\n  return dispatch => {\n    axios({\n      method: 'get',\n      url: api.getAccount,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret = shakebook.GetAccountResponse.fromObject(camelcaseKeys(res.data, {\n        deep: true\n      }));\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getAccountAction(ret.data));\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    }).catch(function () {\n      localStorage.removeItem(\"token\");\n      window.globalHistory.push('/login');\n    });\n  };\n} //查询账号菜单\n\nexport function getAccountMenuRequest() {\n  return dispatch => {\n    axios({\n      method: 'get',\n      url: api.getAccountMenu,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret = manager.GetAccountMenuResponse.fromObject(camelcaseKeys(res.data, {\n        deep: true\n      }));\n\n      if (res.status === 200 && ret.success) {\n        const tree = toTree(ret.data);\n        dispatch(getAccountMenuAction(tree));\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    }).catch(function () {\n      localStorage.removeItem(\"token\");\n      window.globalHistory.push('/login');\n    });\n  };\n} //退出登录\n\nexport function signoutRequest() {\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: api.signout,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret = shakebook.Response.fromObject(camelcaseKeys(res.data, {\n        deep: true\n      }));\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getAccountAction({}));\n        localStorage.removeItem(\"token\");\n        window.globalHistory.push('/login');\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    }).catch(function () {\n      localStorage.removeItem(\"token\");\n      window.globalHistory.push('/login');\n    });\n  };\n}\n\nfunction toTree(data) {\n  //递归树算法 将pid-id的数据库返回的json 转为树json\n  // 删除 所有 children,以防止多次调用\n  let tree = [];\n  data.forEach(function (item) {\n    const o = {\n      title: item.menuName,\n      value: item.id,\n      key: item.id,\n      menuIcon: item.menuIcon,\n      menuName: item.menuName,\n      menuRouter: item.menuRouter,\n      parentId: item.parentId\n    };\n    delete o.children;\n    tree.push(o);\n  }); // 将数据存储为 以id为KEY的map索引数据列 \n\n  var map = new Map();\n  tree.forEach(function (item) {\n    const id = item.key;\n    map.set(id, item);\n  });\n  let val = [];\n  tree.forEach(function (item) {\n    // 以当前遍历项，的pid,去map对象中找到索引的id\n    var parent = map.get(item.parentId); // 好绕啊，如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到，他对应的父级中\n\n    if (parent) {\n      (parent.children || (parent.children = [])).push(item); //这里更改的是map对象的数据(索引数据)\n      // console.log(map);\n    } else {\n      //如果没有在map中找到对应的索引ID,那么直接把 当前的item添加到 val结果集中，作为顶级\n      val.push(item);\n    }\n  });\n  return val;\n}","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/src/pages/home/header/store/actions.ts"],"names":["shakebook","types","axios","camelcaseKeys","api","notification","manager","getAccountAction","res","type","GET_ACCOUNT","data","getAccountMenuAction","GET_ACCOUNT_MENU","getAccountRequest","dispatch","method","url","getAccount","headers","localStorage","getItem","then","ret","GetAccountResponse","fromObject","deep","status","success","message","description","catch","removeItem","window","globalHistory","push","getAccountMenuRequest","getAccountMenu","GetAccountMenuResponse","tree","toTree","signoutRequest","signout","Response","forEach","item","o","title","menuName","value","id","key","menuIcon","menuRouter","parentId","children","map","Map","set","val","parent","get"],"mappings":"AAAA,SAASA,SAAT,QAA0B,6BAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAASC,YAAT,QAA6B,MAA7B;AACA,SAASC,OAAT,QAAwB,6BAAxB;;AAIA,MAAMC,gBAAgB,GAAIC,GAAD,IAAyD;AAChF,SAAO;AACLC,IAAAA,IAAI,EAAER,KAAK,CAACS,WADP;AAELC,IAAAA,IAAI,EAAE,EAAE,GAAGH;AAAL;AAFD,GAAP;AAID,CALD;;AAOA,MAAMI,oBAAoB,GAAID,IAAD,IAA2D;AACtF,SAAO;AACLF,IAAAA,IAAI,EAAER,KAAK,CAACY,gBADP;AAELF,IAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ;AAFD,GAAP;AAID,CALD;;AAOA,OAAO,SAASG,iBAAT,GAA6B;AAClC,SAAQC,QAAD,IAAwC;AAC7Cb,IAAAA,KAAK,CAAC;AACJc,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAEb,GAAG,CAACc,UAFL;AAGJC,MAAAA,OAAO,EAAE;AACP,+BAAuB,YAAYC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAD5B;AAHL,KAAD,CAAL,CAMGC,IANH,CAMQ,UAAUd,GAAV,EAAe;AAErB,UAAIe,GAAkC,GACpCvB,SAAS,CAACwB,kBAAV,CAA6BC,UAA7B,CACEtB,aAAa,CAACK,GAAG,CAACG,IAAL,EAAqB;AAChCe,QAAAA,IAAI,EAAE;AAD0B,OAArB,CADf,CADF;;AAMA,UAAIlB,GAAG,CAACmB,MAAJ,KAAe,GAAf,IAAsBJ,GAAG,CAACK,OAA9B,EAAuC;AACrCb,QAAAA,QAAQ,CAACR,gBAAgB,CAACgB,GAAG,CAACZ,IAAL,CAAjB,CAAR;AACD,OAFD,MAEO;AACLN,QAAAA,YAAY,CAAC,SAAD,CAAZ,CAAwB;AACtBwB,UAAAA,OAAO,EAAE,MADa;AAEtBC,UAAAA,WAAW,EAAEP,GAAG,CAACM;AAFK,SAAxB;AAID;AACF,KAtBD,EAuBGE,KAvBH,CAuBS,YAAY;AACjBX,MAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACAC,MAAAA,MAAM,CAACC,aAAP,CAAqBC,IAArB,CAA0B,QAA1B;AACD,KA1BH;AA2BD,GA5BD;AA6BD,C,CAED;;AACA,OAAO,SAASC,qBAAT,GAAiC;AACtC,SAAQrB,QAAD,IAA4C;AACjDb,IAAAA,KAAK,CAAC;AACJc,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAEb,GAAG,CAACiC,cAFL;AAGJlB,MAAAA,OAAO,EAAE;AACP,+BAAuB,YAAYC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAD5B;AAHL,KAAD,CAAL,CAMGC,IANH,CAMQ,UAAUd,GAAV,EAAe;AAErB,UAAIe,GAAoC,GACtCjB,OAAO,CAACgC,sBAAR,CAA+Bb,UAA/B,CACEtB,aAAa,CAACK,GAAG,CAACG,IAAL,EAAqB;AAChCe,QAAAA,IAAI,EAAE;AAD0B,OAArB,CADf,CADF;;AAMA,UAAIlB,GAAG,CAACmB,MAAJ,KAAe,GAAf,IAAsBJ,GAAG,CAACK,OAA9B,EAAuC;AACrC,cAAMW,IAAI,GAAGC,MAAM,CAACjB,GAAG,CAACZ,IAAL,CAAnB;AACAI,QAAAA,QAAQ,CAACH,oBAAoB,CAAC2B,IAAD,CAArB,CAAR;AAGD,OALD,MAKO;AACLlC,QAAAA,YAAY,CAAC,SAAD,CAAZ,CAAwB;AACtBwB,UAAAA,OAAO,EAAE,MADa;AAEtBC,UAAAA,WAAW,EAAEP,GAAG,CAACM;AAFK,SAAxB;AAID;AACF,KAzBD,EA0BGE,KA1BH,CA0BS,YAAY;AACjBX,MAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACAC,MAAAA,MAAM,CAACC,aAAP,CAAqBC,IAArB,CAA0B,QAA1B;AACD,KA7BH;AA8BD,GA/BD;AAgCD,C,CAED;;AACA,OAAO,SAASM,cAAT,GAA0B;AAC/B,SAAQ1B,QAAD,IAAwC;AAC7Cb,IAAAA,KAAK,CAAC;AACJc,MAAAA,MAAM,EAAE,MADJ;AAEJC,MAAAA,GAAG,EAAEb,GAAG,CAACsC,OAFL;AAGJvB,MAAAA,OAAO,EAAE;AACP,+BAAuB,YAAYC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAD5B;AAHL,KAAD,CAAL,CAMGC,IANH,CAMQ,UAAUd,GAAV,EAAe;AAErB,UAAIe,GAAwB,GAC1BvB,SAAS,CAAC2C,QAAV,CAAmBlB,UAAnB,CACEtB,aAAa,CAACK,GAAG,CAACG,IAAL,EAAqB;AAChCe,QAAAA,IAAI,EAAE;AAD0B,OAArB,CADf,CADF;;AAOA,UAAIlB,GAAG,CAACmB,MAAJ,KAAe,GAAf,IAAsBJ,GAAG,CAACK,OAA9B,EAAuC;AACrCb,QAAAA,QAAQ,CAACR,gBAAgB,CAAC,EAAD,CAAjB,CAAR;AACAa,QAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACAC,QAAAA,MAAM,CAACC,aAAP,CAAqBC,IAArB,CAA0B,QAA1B;AACD,OAJD,MAIO;AACL9B,QAAAA,YAAY,CAAC,SAAD,CAAZ,CAAwB;AACtBwB,UAAAA,OAAO,EAAE,MADa;AAEtBC,UAAAA,WAAW,EAAEP,GAAG,CAACM;AAFK,SAAxB;AAID;AACF,KAzBD,EA0BGE,KA1BH,CA0BS,YAAY;AACjBX,MAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACAC,MAAAA,MAAM,CAACC,aAAP,CAAqBC,IAArB,CAA0B,QAA1B;AACD,KA7BH;AA8BD,GA/BD;AAgCD;;AAGD,SAASK,MAAT,CAAgB7B,IAAhB,EAAiE;AAAE;AACjE;AACA,MAAI4B,IAA0B,GAAG,EAAjC;AACA5B,EAAAA,IAAI,CAACiC,OAAL,CAAa,UAAUC,IAAV,EAAgB;AAC3B,UAAMC,CAAqB,GAAG;AAC5BC,MAAAA,KAAK,EAAEF,IAAI,CAACG,QADgB;AAE5BC,MAAAA,KAAK,EAAEJ,IAAI,CAACK,EAFgB;AAG5BC,MAAAA,GAAG,EAAEN,IAAI,CAACK,EAHkB;AAI5BE,MAAAA,QAAQ,EAAEP,IAAI,CAACO,QAJa;AAK5BJ,MAAAA,QAAQ,EAAEH,IAAI,CAACG,QALa;AAM5BK,MAAAA,UAAU,EAAER,IAAI,CAACQ,UANW;AAO5BC,MAAAA,QAAQ,EAAET,IAAI,CAACS;AAPa,KAA9B;AASA,WAAOR,CAAC,CAACS,QAAT;AACAhB,IAAAA,IAAI,CAACJ,IAAL,CAAUW,CAAV;AACD,GAZD,EAH+D,CAgB/D;;AACA,MAAIU,GAAG,GAAG,IAAIC,GAAJ,EAAV;AACAlB,EAAAA,IAAI,CAACK,OAAL,CAAa,UAAUC,IAAV,EAAoC;AAC/C,UAAMK,EAAU,GAAGL,IAAI,CAACM,GAAxB;AACAK,IAAAA,GAAG,CAACE,GAAJ,CAAQR,EAAR,EAAYL,IAAZ;AACD,GAHD;AAKA,MAAIc,GAAyB,GAAG,EAAhC;AACApB,EAAAA,IAAI,CAACK,OAAL,CAAa,UAAUC,IAAV,EAAgB;AAC3B;AACA,QAAIe,MAAM,GAAGJ,GAAG,CAACK,GAAJ,CAAQhB,IAAI,CAACS,QAAb,CAAb,CAF2B,CAG3B;;AACA,QAAIM,MAAJ,EAAY;AACV,OAACA,MAAM,CAACL,QAAP,KAAoBK,MAAM,CAACL,QAAP,GAAkB,EAAtC,CAAD,EAA4CpB,IAA5C,CAAiDU,IAAjD,EADU,CAC8C;AACxD;AACD,KAHD,MAGO;AACL;AACAc,MAAAA,GAAG,CAACxB,IAAJ,CAASU,IAAT;AACD;AACF,GAXD;AAaA,SAAOc,GAAP;AACD","sourcesContent":["import { shakebook } from '@/service/api/v1/account_pb'\nimport * as types from './types'\nimport axios from 'axios';\nimport camelcaseKeys from 'camelcase-keys'\nimport api from '@/requestAPI';\nimport { notification } from 'antd';\nimport { manager } from '@/service/api/v1/manager_pb';\nimport * as tree from '@/common/toTree';\nimport * as menuTypes from '@/pages/content/pages/menu/store/types'\n\nconst getAccountAction = (res: shakebook.IAccountInfo): types.GetAccountAction => {\n  return {\n    type: types.GET_ACCOUNT,\n    data: { ...res }\n  }\n}\n\nconst getAccountMenuAction = (data: manager.IMenuInfo[]): types.GetAccountMenuAction => {\n  return {\n    type: types.GET_ACCOUNT_MENU,\n    data: [...data]\n  }\n}\n\nexport function getAccountRequest() {\n  return (dispatch: types.GetAccountDispatch) => {\n    axios({\n      method: 'get',\n      url: api.getAccount,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n\n      let ret: shakebook.IGetAccountResponse =\n        shakebook.GetAccountResponse.fromObject(\n          camelcaseKeys(res.data as Object, {\n            deep: true\n          }),\n        )\n      if (res.status === 200 && ret.success) {\n        dispatch(getAccountAction(ret.data!))\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    })\n      .catch(function () {\n        localStorage.removeItem(\"token\")\n        window.globalHistory.push('/login')\n      });\n  }\n}\n\n//查询账号菜单\nexport function getAccountMenuRequest() {\n  return (dispatch: types.GetAccountMenuDispatch) => {\n    axios({\n      method: 'get',\n      url: api.getAccountMenu,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n\n      let ret: manager.IGetAccountMenuResponse =\n        manager.GetAccountMenuResponse.fromObject(\n          camelcaseKeys(res.data as Object, {\n            deep: true\n          }),\n        )\n      if (res.status === 200 && ret.success) {\n        const tree = toTree(ret.data as manager.IMenuInfo[])\n        dispatch(getAccountMenuAction(tree as menuTypes.MenuTree[]))\n\n\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    })\n      .catch(function () {\n        localStorage.removeItem(\"token\")\n        window.globalHistory.push('/login')\n      });\n  }\n}\n\n//退出登录\nexport function signoutRequest() {\n  return (dispatch: types.GetAccountDispatch) => {\n    axios({\n      method: 'post',\n      url: api.signout,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n\n      let ret: shakebook.IResponse =\n        shakebook.Response.fromObject(\n          camelcaseKeys(res.data as Object, {\n            deep: true\n          }),\n        )\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getAccountAction({} as shakebook.AccountInfo))\n        localStorage.removeItem(\"token\")\n        window.globalHistory.push('/login')\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    })\n      .catch(function () {\n        localStorage.removeItem(\"token\")\n        window.globalHistory.push('/login')\n      });\n  }\n}\n\n\nfunction toTree(data: manager.IMenuInfo[]): menuTypes.MenuTree[] { //递归树算法 将pid-id的数据库返回的json 转为树json\n  // 删除 所有 children,以防止多次调用\n  let tree: menuTypes.MenuTree[] = []\n  data.forEach(function (item) {\n    const o: menuTypes.MenuTree = {\n      title: item.menuName as string,\n      value: item.id as number,\n      key: item.id as number,\n      menuIcon: item.menuIcon as string,\n      menuName: item.menuName as string,\n      menuRouter: item.menuRouter as string,\n      parentId: item.parentId as number,\n    }\n    delete o.children\n    tree.push(o)\n  });\n  // 将数据存储为 以id为KEY的map索引数据列 \n  var map = new Map<any, menuTypes.MenuTree>();\n  tree.forEach(function (item: menuTypes.MenuTree) {\n    const id: number = item.key\n    map.set(id, item)\n  });\n\n  let val: menuTypes.MenuTree[] = [];\n  tree.forEach(function (item) {\n    // 以当前遍历项，的pid,去map对象中找到索引的id\n    var parent = map.get(item.parentId);\n    // 好绕啊，如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到，他对应的父级中\n    if (parent) {\n      (parent.children || (parent.children = [])).push(item); //这里更改的是map对象的数据(索引数据)\n      // console.log(map);\n    } else {\n      //如果没有在map中找到对应的索引ID,那么直接把 当前的item添加到 val结果集中，作为顶级\n      val.push(item);\n    }\n  });\n\n  return val\n}\n"]},"metadata":{},"sourceType":"module"}