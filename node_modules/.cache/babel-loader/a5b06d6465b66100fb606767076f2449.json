{"ast":null,"code":"import * as d3Hierarchy from 'd3-hierarchy';\nimport { assign, isArray } from '@antv/util';\nimport { getField, getAllNodes } from './util';\nvar DEFAULT_OPTIONS = {\n  field: 'value',\n  tile: 'treemapSquarify',\n  size: [1, 1],\n  round: false,\n  ignoreParentValue: true,\n  padding: 0,\n  paddingInner: 0,\n  paddingOuter: 0,\n  paddingTop: 0,\n  paddingRight: 0,\n  paddingBottom: 0,\n  paddingLeft: 0,\n  as: ['x', 'y']\n};\nexport function treemap(data, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  var as = options.as;\n\n  if (!isArray(as) || as.length !== 2) {\n    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ \"x\", \"y\" ])!');\n  }\n\n  var field;\n\n  try {\n    field = getField(options);\n  } catch (e) {\n    console.warn(e);\n  }\n\n  var partition = function (data) {\n    return d3Hierarchy.treemap().tile(d3Hierarchy[options.tile]).size(options.size).round(options.round).padding(options.padding).paddingInner(options.paddingInner).paddingOuter(options.paddingOuter).paddingTop(options.paddingTop).paddingRight(options.paddingRight).paddingBottom(options.paddingBottom).paddingLeft(options.paddingLeft)(\n    /**\n     * d3Hierarchy 布局中需指定 sum 函数计算 node 值，规则是：从当前 node 开始以 post-order traversal 的次序为当前节点以及每个后代节点调用指定的 value 函数，并返回当前 node。\n     * for example:\n     * { node: 'parent', value: 10, children: [{node: 'child1', value: 5}, {node: 'child2', value: 5}, ]}\n     * parent 所得的计算值是 sum(node(parent)) + sum(node(child1)) + sum(node(child2))\n     * ignoreParentValue 为 true(默认) 时，父元素的值由子元素累加而来，该值为 0 + 5 + 5 = 10\n     * ignoreParentValue 为 false 时，父元素的值由当前节点 及子元素累加而来，该值为 10 + 5 + 5 = 20\n     * sum 函数中，d 为用户传入的 data, children 为保留字段\n     */\n    d3Hierarchy.hierarchy(data).sum(function (d) {\n      return options.ignoreParentValue && d.children ? 0 : d[field];\n    }));\n  };\n\n  var root = partition(data);\n  /*\n   * points:\n   *   3  2\n   *   0  1\n   */\n\n  var x = as[0];\n  var y = as[1];\n  root.each(function (node) {\n    node[x] = [node.x0, node.x1, node.x1, node.x0];\n    node[y] = [node.y1, node.y1, node.y0, node.y0];\n    ['x0', 'x1', 'y0', 'y1'].forEach(function (prop) {\n      if (as.indexOf(prop) === -1) {\n        delete node[prop];\n      }\n    });\n  });\n  return getAllNodes(root);\n}","map":{"version":3,"sources":["../../../src/utils/hierarchy/treemap.ts"],"names":[],"mappings":"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","sourcesContent":["import * as d3Hierarchy from 'd3-hierarchy';\nimport { assign, isArray } from '@antv/util';\nimport { HierarchyOption } from './types';\nimport { getField, getAllNodes } from './util';\n\nconst DEFAULT_OPTIONS: HierarchyOption = {\n  field: 'value',\n  tile: 'treemapSquarify', // treemapBinary, treemapDice, treemapSlice, treemapSliceDice, treemapSquarify, treemapResquarify\n  size: [1, 1], // width, height\n  round: false,\n  ignoreParentValue: true,\n  padding: 0,\n  paddingInner: 0,\n  paddingOuter: 0,\n  paddingTop: 0,\n  paddingRight: 0,\n  paddingBottom: 0,\n  paddingLeft: 0,\n  as: ['x', 'y'],\n};\n\nexport function treemap(data: any, options: HierarchyOption): any[] {\n  options = assign({} as HierarchyOption, DEFAULT_OPTIONS, options);\n  const as = options.as;\n  if (!isArray(as) || as.length !== 2) {\n    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ \"x\", \"y\" ])!');\n  }\n\n  let field;\n  try {\n    field = getField(options);\n  } catch (e) {\n    console.warn(e);\n  }\n\n  const partition = (data) =>\n    d3Hierarchy\n      .treemap()\n      .tile(d3Hierarchy[options.tile])\n      .size(options.size)\n      .round(options.round)\n      .padding(options.padding)\n      .paddingInner(options.paddingInner)\n      .paddingOuter(options.paddingOuter)\n      .paddingTop(options.paddingTop)\n      .paddingRight(options.paddingRight)\n      .paddingBottom(options.paddingBottom)\n      .paddingLeft(options.paddingLeft)(\n      /**\n       * d3Hierarchy 布局中需指定 sum 函数计算 node 值，规则是：从当前 node 开始以 post-order traversal 的次序为当前节点以及每个后代节点调用指定的 value 函数，并返回当前 node。\n       * for example:\n       * { node: 'parent', value: 10, children: [{node: 'child1', value: 5}, {node: 'child2', value: 5}, ]}\n       * parent 所得的计算值是 sum(node(parent)) + sum(node(child1)) + sum(node(child2))\n       * ignoreParentValue 为 true(默认) 时，父元素的值由子元素累加而来，该值为 0 + 5 + 5 = 10\n       * ignoreParentValue 为 false 时，父元素的值由当前节点 及子元素累加而来，该值为 10 + 5 + 5 = 20\n       * sum 函数中，d 为用户传入的 data, children 为保留字段\n       */\n      d3Hierarchy.hierarchy(data).sum((d) => (options.ignoreParentValue && d.children ? 0 : d[field]))\n    );\n  const root = partition(data);\n\n  /*\n   * points:\n   *   3  2\n   *   0  1\n   */\n  const x = as[0];\n  const y = as[1];\n  root.each((node) => {\n    node[x] = [node.x0, node.x1, node.x1, node.x0];\n    node[y] = [node.y1, node.y1, node.y0, node.y0];\n    ['x0', 'x1', 'y0', 'y1'].forEach((prop) => {\n      if (as.indexOf(prop) === -1) {\n        delete node[prop];\n      }\n    });\n  });\n\n  return getAllNodes(root);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}