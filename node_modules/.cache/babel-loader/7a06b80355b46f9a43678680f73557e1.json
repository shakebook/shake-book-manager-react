{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Plot } from '../../core/plot';\nimport { getProgressData } from '../progress/utils';\nimport { adaptor, statistic } from './adaptor';\n\nvar RingProgress =\n/** @class */\nfunction (_super) {\n  __extends(RingProgress, _super);\n\n  function RingProgress() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'ring-process';\n    return _this;\n  }\n\n  RingProgress.prototype.getDefaultOptions = function () {\n    return {\n      percent: 0.2,\n      innerRadius: 0.8,\n      radius: 0.98,\n      color: ['#FAAD14', '#E8EDF3'],\n      statistic: {\n        title: false,\n        content: {\n          style: {\n            fontSize: '14px',\n            fontWeight: 300,\n            fill: '#4D4D4D',\n            textAlign: 'center',\n            textBaseline: 'middle'\n          },\n          formatter: function (_a) {\n            var percent = _a.percent;\n            return (percent * 100).toFixed(2) + \"%\";\n          }\n        }\n      },\n      animation: true\n    };\n  };\n  /**\n   * 更新数据\n   * @param percent\n   */\n\n\n  RingProgress.prototype.changeData = function (percent) {\n    this.updateOption({\n      percent: percent\n    });\n    this.chart.data(getProgressData(percent)); // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n\n    statistic({\n      chart: this.chart,\n      options: this.options\n    }, true);\n  };\n  /**\n   * 获取 环形进度图 的适配器\n   */\n\n\n  RingProgress.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  return RingProgress;\n}(Plot);\n\nexport { RingProgress };","map":{"version":3,"sources":["../../../src/plots/ring-progress/index.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,iBAArB;AAEA,SAAS,eAAT,QAAgC,mBAAhC;AAEA,SAAS,OAAT,EAAkB,SAAlB,QAAmC,WAAnC;;AAIA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAAlC,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AACE;;;AACO,IAAA,KAAA,CAAA,IAAA,GAAe,cAAf;;AA2CR;;AAzCW,EAAA,YAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;AACE,WAAO;AACL,MAAA,OAAO,EAAE,GADJ;AAEL,MAAA,WAAW,EAAE,GAFR;AAGL,MAAA,MAAM,EAAE,IAHH;AAIL,MAAA,KAAK,EAAE,CAAC,SAAD,EAAY,SAAZ,CAJF;AAKL,MAAA,SAAS,EAAE;AACT,QAAA,KAAK,EAAE,KADE;AAET,QAAA,OAAO,EAAE;AACP,UAAA,KAAK,EAAE;AACL,YAAA,QAAQ,EAAE,MADL;AAEL,YAAA,UAAU,EAAE,GAFP;AAGL,YAAA,IAAI,EAAE,SAHD;AAIL,YAAA,SAAS,EAAE,QAJN;AAKL,YAAA,YAAY,EAAE;AALT,WADA;AAQP,UAAA,SAAS,EAAE,UAAC,EAAD,EAAY;gBAAT,OAAO,GAAA,EAAA,CAAA,O;AAAO,mBAAG,CAAC,OAAO,GAAG,GAAX,EAAgB,OAAhB,CAAwB,CAAxB,IAA0B,GAA7B;AAAgC;AARrD;AAFA,OALN;AAkBL,MAAA,SAAS,EAAE;AAlBN,KAAP;AAoBD,GArBS;AAuBV;;;AAGG;;;AACI,EAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,OAAlB,EAAiC;AAC/B,SAAK,YAAL,CAAkB;AAAE,MAAA,OAAO,EAAA;AAAT,KAAlB;AAEA,SAAK,KAAL,CAAW,IAAX,CAAgB,eAAe,CAAC,OAAD,CAA/B,EAH+B,CAI/B;;AACA,IAAA,SAAS,CAAC;AAAE,MAAA,KAAK,EAAE,KAAK,KAAd;AAAqB,MAAA,OAAO,EAAE,KAAK;AAAnC,KAAD,EAA+C,IAA/C,CAAT;AACD,GANM;AAQP;;AAEG;;;AACO,EAAA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACE,WAAO,OAAP;AACD,GAFS;;AAGZ,SAAA,YAAA;AAAC,CA7CD,CAAkC,IAAlC,CAAA","sourcesContent":["import { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { getProgressData } from '../progress/utils';\nimport { RingProgressOptions } from './types';\nimport { adaptor, statistic } from './adaptor';\n\nexport { RingProgressOptions };\n\nexport class RingProgress extends Plot<RingProgressOptions> {\n  /** 图表类型 */\n  public type: string = 'ring-process';\n\n  protected getDefaultOptions() {\n    return {\n      percent: 0.2,\n      innerRadius: 0.8,\n      radius: 0.98,\n      color: ['#FAAD14', '#E8EDF3'],\n      statistic: {\n        title: false,\n        content: {\n          style: {\n            fontSize: '14px',\n            fontWeight: 300,\n            fill: '#4D4D4D',\n            textAlign: 'center',\n            textBaseline: 'middle',\n          },\n          formatter: ({ percent }) => `${(percent * 100).toFixed(2)}%`,\n        },\n      },\n      animation: true,\n    };\n  }\n\n  /**\n   * 更新数据\n   * @param percent\n   */\n  public changeData(percent: number) {\n    this.updateOption({ percent });\n\n    this.chart.data(getProgressData(percent));\n    // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n    statistic({ chart: this.chart, options: this.options }, true);\n  }\n\n  /**\n   * 获取 环形进度图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<RingProgressOptions> {\n    return adaptor;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}