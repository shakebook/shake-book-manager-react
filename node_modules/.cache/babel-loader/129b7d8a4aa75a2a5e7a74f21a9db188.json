{"ast":null,"code":"import { manager } from '@/service/api/v1/manager_pb';\nimport * as types from './types';\nimport axios from 'axios';\nimport camelcaseKeys from 'camelcase-keys';\nimport api from '@/requestAPI';\nimport { notification } from 'antd';\n\nconst getRoleListAction = res => {\n  return {\n    type: types.GET_ROLE_LIST,\n    data: res\n  };\n};\n\nexport function createRoleRequest(req) {\n  return dispatch => {\n    axios({\n      method: 'post',\n      url: api.role,\n      data: req.data,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      if (res.status === 401) {\n        localStorage.removeItem(\"token\");\n        window.globalHistory.push('/login');\n      }\n\n      let ret = manager.Response.fromObject(camelcaseKeys(res.data, {\n        deep: true\n      }));\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getRoleListRequest({\n          history: req.history\n        }));\n        notification['success']({\n          message: '信息提示',\n          description: \"新增成功\"\n        });\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    }).catch(function (error) {\n      notification['error']({\n        message: '信息提示',\n        description: \"请稍后重试\"\n      });\n    });\n  };\n} //更新\n\nexport function UpdateRoleRequest(req) {\n  return dispatch => {\n    axios({\n      method: 'put',\n      url: api.role,\n      data: req.data,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      if (res.status === 401) {\n        localStorage.removeItem(\"token\");\n        window.globalHistory.push('/login');\n      }\n\n      let ret = manager.Response.fromObject(camelcaseKeys(res.data, {\n        deep: true\n      }));\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getRoleListRequest({\n          history: req.history\n        }));\n        notification['success']({\n          message: '信息提示',\n          description: \"更新成功\"\n        });\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    }).catch(function (error) {\n      notification['error']({\n        message: '信息提示',\n        description: \"请稍后重试\"\n      });\n    });\n  };\n} //查询角色列表\n\n_c = UpdateRoleRequest;\nexport function getRoleListRequest(req) {\n  return dispatch => {\n    axios({\n      method: 'get',\n      url: api.role,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      if (res.status === 401) {\n        localStorage.removeItem(\"token\");\n        window.globalHistory.push('/login');\n      }\n\n      let ret = manager.GetRoleListResponse.fromObject(camelcaseKeys(res.data, {\n        deep: true\n      }));\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getRoleListAction(ret.data));\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    }).catch(function () {\n      notification['error']({\n        message: '信息提示',\n        description: \"请稍后重试\"\n      });\n    });\n  };\n} //删除角色\n\nexport function deleteRoleRequest(req) {\n  return dispatch => {\n    axios({\n      method: 'delete',\n      url: api.role,\n      data: req.data,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret = manager.Response.fromObject(camelcaseKeys(res.data, {\n        deep: true\n      }));\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getRoleListRequest({\n          history: req.history\n        }));\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n        localStorage.removeItem(\"token\");\n        req.history.push('/login');\n      }\n    }).catch(function () {\n      notification['error']({\n        message: '信息提示',\n        description: \"请稍后重试\"\n      });\n      localStorage.removeItem(\"token\");\n      req.history.push('/login');\n    });\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateRoleRequest\");","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/src/pages/content/pages/role/store/actions.ts"],"names":["manager","types","axios","camelcaseKeys","api","notification","getRoleListAction","res","type","GET_ROLE_LIST","data","createRoleRequest","req","dispatch","method","url","role","headers","localStorage","getItem","then","status","removeItem","window","globalHistory","push","ret","Response","fromObject","deep","success","getRoleListRequest","history","message","description","catch","error","UpdateRoleRequest","GetRoleListResponse","deleteRoleRequest"],"mappings":"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","sourcesContent":["import { manager } from '@/service/api/v1/manager_pb'\nimport * as types from './types'\nimport axios from 'axios';\nimport camelcaseKeys from 'camelcase-keys'\nimport api from '@/requestAPI';\nimport { notification } from 'antd';\nimport { Dispatch } from \"redux\"\n\nconst getRoleListAction = (res: manager.IRole[]): types.GetRoleListAction => {\n  return {\n    type: types.GET_ROLE_LIST,\n    data: res\n  }\n}\n\nexport function createRoleRequest(req: types.RoleRequestWithProps) {\n  return (dispatch: Dispatch<any>) => {\n    axios({\n      method: 'post',\n      url: api.role,\n      data: req.data,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      if (res.status === 401) {\n        localStorage.removeItem(\"token\")\n        window.globalHistory.push('/login')\n      }\n      let ret: manager.IResponse =\n        manager.Response.fromObject(\n          camelcaseKeys(res.data as Object, {\n            deep: true\n          }),\n        )\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getRoleListRequest({\n          history: req.history\n        } as types.GetRoleListRequestWithProps\n        ))\n        notification['success']({\n          message: '信息提示',\n          description: \"新增成功\"\n        });\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n\n      }\n    })\n      .catch(function (error) {\n        notification['error']({\n          message: '信息提示',\n          description: \"请稍后重试\"\n        });\n      });\n  }\n}\n\n//更新\nexport function UpdateRoleRequest(req: types.RoleRequestWithProps) {\n  return (dispatch: Dispatch<any>) => {\n    axios({\n      method: 'put',\n      url: api.role,\n      data: req.data,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      if (res.status === 401) {\n        localStorage.removeItem(\"token\")\n        window.globalHistory.push('/login')\n      }\n      let ret: manager.IResponse =\n        manager.Response.fromObject(\n          camelcaseKeys(res.data as Object, {\n            deep: true\n          }),\n        )\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getRoleListRequest({\n          history: req.history\n        } as types.GetRoleListRequestWithProps\n        ))\n        notification['success']({\n          message: '信息提示',\n          description: \"更新成功\"\n        });\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    })\n      .catch(function (error) {\n        notification['error']({\n          message: '信息提示',\n          description: \"请稍后重试\"\n        });\n      });\n  }\n}\n\n//查询角色列表\nexport function getRoleListRequest(req: types.GetRoleListRequestWithProps) {\n  return (dispatch: types.GetRoleDispatch) => {\n    axios({\n      method: 'get',\n      url: api.role,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      if (res.status === 401) {\n        localStorage.removeItem(\"token\")\n        window.globalHistory.push('/login')\n      }\n      let ret: manager.IGetRoleListResponse =\n        manager.GetRoleListResponse.fromObject(\n          camelcaseKeys(res.data as Object, {\n            deep: true\n          }),\n        )\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getRoleListAction(ret.data as manager.IRole[]))\n\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n      }\n    })\n      .catch(function () {\n        notification['error']({\n          message: '信息提示',\n          description: \"请稍后重试\"\n        });\n      });\n  }\n}\n\n//删除角色\nexport function deleteRoleRequest(req: types.RoleRequestWithProps) {\n  return (dispatch: Dispatch<any>) => {\n    axios({\n      method: 'delete',\n      url: api.role,\n      data: req.data,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret: manager.IResponse =\n        manager.Response.fromObject(\n          camelcaseKeys(res.data as Object, {\n            deep: true\n          }),\n        )\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getRoleListRequest({\n          history: req.history\n        } as types.GetRoleListRequestWithProps\n        ))\n\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n        localStorage.removeItem(\"token\")\n        req.history.push('/login')\n      }\n    })\n      .catch(function () {\n        notification['error']({\n          message: '信息提示',\n          description: \"请稍后重试\"\n        });\n        localStorage.removeItem(\"token\")\n        req.history.push('/login')\n      });\n  }\n}"]},"metadata":{},"sourceType":"module"}