{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Plot } from '../../core/plot';\nimport { adaptor } from './adaptor';\n/**\n *  弦图 Chord\n */\n\nvar Chord =\n/** @class */\nfunction (_super) {\n  __extends(Chord, _super);\n\n  function Chord() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'chord';\n    return _this;\n  }\n\n  Chord.prototype.getDefaultOptions = function () {\n    return {\n      nodeStyle: {\n        opacity: 1,\n        fillOpacity: 1,\n        lineWidth: 1\n      },\n      edgeStyle: {\n        opacity: 0.5,\n        lineWidth: 2\n      },\n      label: {\n        fields: ['x', 'name'],\n        callback: function (x, name) {\n          var centerX = (x[0] + x[1]) / 2;\n          var offsetX = centerX > 0.5 ? -4 : 4;\n          return {\n            labelEmit: true,\n            style: {\n              fill: '#8c8c8c'\n            },\n            offsetX: offsetX,\n            content: name\n          };\n        }\n      },\n      tooltip: {\n        fields: ['source', 'target', 'value'],\n        formatter: function (datum) {\n          var source = datum.source,\n              target = datum.target,\n              value = datum.value;\n          return {\n            name: source + \" -> \" + target,\n            value: value\n          };\n        }\n      },\n      interactions: [{\n        type: 'element-active'\n      }],\n      weight: true,\n      nodePaddingRatio: 0.1,\n      nodeWidthRatio: 0.05\n    };\n  };\n  /**\n   * 获取适配器\n   */\n\n\n  Chord.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  return Chord;\n}(Plot);\n\nexport { Chord };","map":{"version":3,"sources":["../../../src/plots/chord/index.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,iBAArB;AAIA,SAAS,OAAT,QAAwB,WAAxB;AAIA;;AAEG;;AACH,IAAA,KAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2B,EAAA,SAAA,CAAA,KAAA,EAAA,MAAA,CAAA;;AAA3B,WAAA,KAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AACE;;;AACO,IAAA,KAAA,CAAA,IAAA,GAAe,OAAf;;AAuDR;;AArDW,EAAA,KAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;AACE,WAAO;AACL,MAAA,SAAS,EAAE;AACT,QAAA,OAAO,EAAE,CADA;AAET,QAAA,WAAW,EAAE,CAFJ;AAGT,QAAA,SAAS,EAAE;AAHF,OADN;AAML,MAAA,SAAS,EAAE;AACT,QAAA,OAAO,EAAE,GADA;AAET,QAAA,SAAS,EAAE;AAFF,OANN;AAUL,MAAA,KAAK,EAAE;AACL,QAAA,MAAM,EAAE,CAAC,GAAD,EAAM,MAAN,CADH;AAEL,QAAA,QAAQ,EAAE,UAAC,CAAD,EAAc,IAAd,EAA0B;AAClC,cAAM,OAAO,GAAG,CAAC,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAAT,IAAgB,CAAhC;AACA,cAAM,OAAO,GAAG,OAAO,GAAG,GAAV,GAAgB,CAAC,CAAjB,GAAqB,CAArC;AACA,iBAAO;AACL,YAAA,SAAS,EAAE,IADN;AAEL,YAAA,KAAK,EAAE;AACL,cAAA,IAAI,EAAE;AADD,aAFF;AAKL,YAAA,OAAO,EAAA,OALF;AAML,YAAA,OAAO,EAAE;AANJ,WAAP;AAQD;AAbI,OAVF;AAyBL,MAAA,OAAO,EAAE;AACP,QAAA,MAAM,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,CADD;AAEP,QAAA,SAAS,EAAE,UAAC,KAAD,EAAa;AACd,cAAA,MAAM,GAAoB,KAAK,CAAzB,MAAN;AAAA,cAAQ,MAAM,GAAY,KAAK,CAAjB,MAAd;AAAA,cAAgB,KAAK,GAAK,KAAK,CAAV,KAArB;AACR,iBAAO;AACL,YAAA,IAAI,EAAK,MAAM,GAAA,MAAN,GAAa,MADjB;AAEL,YAAA,KAAK,EAAA;AAFA,WAAP;AAID;AARM,OAzBJ;AAmCL,MAAA,YAAY,EAAE,CACZ;AACE,QAAA,IAAI,EAAE;AADR,OADY,CAnCT;AAwCL,MAAA,MAAM,EAAE,IAxCH;AAyCL,MAAA,gBAAgB,EAAE,GAzCb;AA0CL,MAAA,cAAc,EAAE;AA1CX,KAAP;AA4CD,GA7CS;AA+CV;;AAEG;;;AACO,EAAA,KAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACE,WAAO,OAAP;AACD,GAFS;;AAGZ,SAAA,KAAA;AAAC,CAzDD,CAA2B,IAA3B,CAAA","sourcesContent":["import { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { Datum } from '../../types';\nimport { ChordOptions } from './types';\nimport { adaptor } from './adaptor';\n\nexport { ChordOptions };\n\n/**\n *  弦图 Chord\n */\nexport class Chord extends Plot<ChordOptions> {\n  /** 图表类型 */\n  public type: string = 'chord';\n\n  protected getDefaultOptions() {\n    return {\n      nodeStyle: {\n        opacity: 1,\n        fillOpacity: 1,\n        lineWidth: 1,\n      },\n      edgeStyle: {\n        opacity: 0.5,\n        lineWidth: 2,\n      },\n      label: {\n        fields: ['x', 'name'],\n        callback: (x: number[], name: string) => {\n          const centerX = (x[0] + x[1]) / 2;\n          const offsetX = centerX > 0.5 ? -4 : 4;\n          return {\n            labelEmit: true,\n            style: {\n              fill: '#8c8c8c',\n            },\n            offsetX,\n            content: name,\n          };\n        },\n      },\n      tooltip: {\n        fields: ['source', 'target', 'value'],\n        formatter: (datum: Datum) => {\n          const { source, target, value } = datum;\n          return {\n            name: `${source} -> ${target}`,\n            value,\n          };\n        },\n      },\n      interactions: [\n        {\n          type: 'element-active',\n        },\n      ],\n      weight: true,\n      nodePaddingRatio: 0.1,\n      nodeWidthRatio: 0.05,\n    };\n  }\n\n  /**\n   * 获取适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<ChordOptions> {\n    return adaptor;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}