{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { __extends } from \"tslib\";\nimport { AbstractLayout } from '@antv/g6-core';\nimport { Layout } from '../../layout';\nimport { LayoutWorker } from '../../layout/worker/layout.worker';\nimport { LAYOUT_MESSAGE } from '../../layout/worker/layoutConst';\nimport { gpuDetector } from '../../util/gpu';\nimport { mix } from '@antv/util'; // eslint-disable-next-line @typescript-eslint/no-implied-eval\n\nvar mockRaf = function mockRaf(cb) {\n  return setTimeout(cb, 16);\n};\n\nvar mockCaf = function mockCaf(reqId) {\n  return clearTimeout(reqId);\n};\n\nvar helper = {\n  // pollyfill\n  requestAnimationFrame: function requestAnimationFrame(callback) {\n    var fn = typeof window !== 'undefined' ? window.requestAnimationFrame || window.webkitRequestAnimationFrame || mockRaf : mockRaf;\n    return fn(callback);\n  },\n  cancelAnimationFrame: function cancelAnimationFrame(requestId) {\n    var fn = typeof window !== 'undefined' ? window.cancelAnimationFrame || window.webkitCancelAnimationFrame || mockCaf : mockCaf;\n    return fn(requestId);\n  }\n};\nvar GPULayoutNames = ['fruchterman', 'gForce'];\n\nvar LayoutController =\n/** @class */\nfunction (_super) {\n  __extends(LayoutController, _super); // the configurations of the layout\n  // private layoutCfg: any; // LayoutOptions\n  // the type name of the layout\n  // private layoutType: string;\n  // private data: GraphData;\n  // private layoutMethod: typeof Layout;\n\n\n  function LayoutController(graph) {\n    var _this = _super.call(this, graph) || this;\n\n    _this.graph = graph;\n    _this.layoutCfg = graph.get('layout') || {};\n    _this.layoutType = _this.layoutCfg.type;\n    _this.worker = null;\n    _this.workerData = {};\n\n    _this.initLayout();\n\n    return _this;\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  LayoutController.prototype.initLayout = function () {// no data before rendering\n  }; // get layout worker and create one if not exists\n\n\n  LayoutController.prototype.getWorker = function () {\n    if (this.worker) {\n      return this.worker;\n    }\n\n    if (typeof Worker === 'undefined') {\n      // 如果当前浏览器不支持 web worker，则不使用 web worker\n      console.warn('Web worker is not supported in current browser.');\n      this.worker = null;\n    } else {\n      this.worker = LayoutWorker;\n    }\n\n    return this.worker;\n  }; // stop layout worker\n\n\n  LayoutController.prototype.stopWorker = function () {\n    var workerData = this.workerData;\n\n    if (!this.worker) {\n      return;\n    }\n\n    this.worker.terminate();\n    this.worker = null; // 重新开始新的布局之前，先取消之前布局的requestAnimationFrame。\n\n    if (workerData.requestId) {\n      helper.cancelAnimationFrame(workerData.requestId);\n      workerData.requestId = null;\n    }\n\n    if (workerData.requestId2) {\n      helper.cancelAnimationFrame(workerData.requestId2);\n      workerData.requestId2 = null;\n    }\n  };\n  /**\n   * @param {function} success callback\n   * @return {boolean} 是否使用web worker布局\n   */\n\n\n  LayoutController.prototype.layout = function (success) {\n    var _this = this;\n\n    var graph = this.graph;\n    this.data = this.setDataFromGraph();\n    var nodes = this.data.nodes;\n\n    if (!nodes) {\n      return false;\n    }\n\n    var width = graph.get('width');\n    var height = graph.get('height');\n    var layoutCfg = {};\n    Object.assign(layoutCfg, {\n      width: width,\n      height: height,\n      center: [width / 2, height / 2]\n    }, this.layoutCfg);\n    this.layoutCfg = layoutCfg;\n    var hasLayoutType = !!this.layoutType;\n    var layoutMethod = this.layoutMethod;\n\n    if (layoutMethod) {\n      layoutMethod.destroy();\n    }\n\n    graph.emit('beforelayout');\n    var allHavePos = this.initPositions(layoutCfg.center, nodes);\n    var layoutType = this.layoutType;\n    var isGPU = false; // 防止用户直接用 -gpu 结尾指定布局\n\n    if (layoutType && layoutType.split('-')[1] === 'gpu') {\n      layoutType = layoutType.split('-')[0];\n      layoutCfg.gpuEnabled = true;\n    } // 若用户指定开启 gpu，且当前浏览器支持 webgl，且该算法存在 GPU 版本（目前仅支持 fruchterman 和 gForce），使用 gpu 版本的布局\n\n\n    if (layoutType && layoutCfg.gpuEnabled) {\n      var enableGPU = true; // 打开下面语句将会导致 webworker 报找不到 window\n\n      if (!gpuDetector().webgl) {\n        console.warn(\"Your browser does not support webGL or GPGPU. The layout will run in CPU.\");\n        enableGPU = false;\n      }\n\n      if (!this.hasGPUVersion(layoutType)) {\n        console.warn(\"The '\" + layoutType + \"' layout does not support GPU calculation for now, it will run in CPU.\");\n        enableGPU = false;\n      }\n\n      if (enableGPU) {\n        layoutType = layoutType + \"-gpu\"; // layoutCfg.canvasEl = this.graph.get('canvas').get('el');\n\n        isGPU = true;\n      }\n    }\n\n    this.isGPU = isGPU;\n    this.stopWorker();\n\n    if (layoutCfg.workerEnabled && this.layoutWithWorker(this.data, success)) {\n      // 如果启用布局web worker并且浏览器支持web worker，用web worker布局。否则回退到不用web worker布局。\n      return true;\n    } // 所有布局挂载 onLayoutEnd, 在布局结束后依次执行：\n    // 执行用户自定义 onLayoutEnd，触发 afterlayout、更新节点位置、fitView/fitCenter、触发 afterrender\n\n\n    var onLayoutEnd = layoutCfg.onLayoutEnd,\n        layoutEndFormatted = layoutCfg.layoutEndFormatted;\n\n    if (!layoutEndFormatted) {\n      layoutCfg.layoutEndFormatted = true;\n\n      layoutCfg.onLayoutEnd = function () {\n        // 执行用户自定义 onLayoutEnd\n        if (onLayoutEnd) {\n          onLayoutEnd();\n        } // 触发 afterlayout\n\n\n        graph.emit('afterlayout'); // 更新节点位置\n\n        _this.refreshLayout(); // 由 graph 传入的，控制 fitView、fitCenter，并触发 afterrender\n\n\n        if (success) success();\n      };\n    }\n\n    if (layoutType === 'force' || layoutType === 'g6force' || layoutType === 'gForce') {\n      var onTick_1 = layoutCfg.onTick;\n\n      var tick = function tick() {\n        if (onTick_1) {\n          onTick_1();\n        }\n\n        graph.refreshPositions();\n      };\n\n      layoutCfg.tick = tick;\n    } else if (this.layoutType === 'comboForce') {\n      layoutCfg.comboTrees = graph.get('comboTrees');\n    }\n\n    var enableTick = false;\n\n    if (layoutType !== undefined) {\n      try {\n        layoutMethod = new Layout[layoutType](layoutCfg);\n      } catch (e) {\n        console.warn(\"The layout method: '\" + layoutType + \"' does not exist! Please specify it first.\");\n        return false;\n      } // 是否需要迭代的方式完成布局。这里是来自布局对象的实例属性，是由布局的定义者在布局类定义的。\n\n\n      enableTick = layoutMethod.enableTick;\n\n      if (enableTick) {\n        var onTick_2 = layoutCfg.onTick;\n\n        var tick = function tick() {\n          if (onTick_2) {\n            onTick_2();\n          }\n\n          graph.refreshPositions();\n        };\n\n        layoutMethod.tick = tick;\n      }\n\n      layoutMethod.init(this.data); // 若存在节点没有位置信息，且没有设置 layout，在 initPositions 中 random 给出了所有节点的位置，不需要再次执行 random 布局\n      // 所有节点都有位置信息，且指定了 layout，则执行布局（代表不是第一次进行布局）\n\n      if (hasLayoutType) {\n        graph.emit('beginlayout');\n        layoutMethod.execute();\n        if (layoutMethod.isCustomLayout && layoutCfg.onLayoutEnd) layoutCfg.onLayoutEnd();\n      }\n\n      this.layoutMethod = layoutMethod;\n    } else if (layoutCfg.onLayoutEnd) {\n      // 若没有配置 layout，也需要更新画布\n      layoutCfg.onLayoutEnd();\n    }\n\n    return false;\n  };\n  /**\n   * layout with web worker\n   * @param {object} data graph data\n   * @param {function} success callback function\n   * @return {boolean} 是否支持web worker\n   */\n\n\n  LayoutController.prototype.layoutWithWorker = function (data, success) {\n    var _this = this;\n\n    var nodes = data.nodes,\n        edges = data.edges;\n\n    var _a = this,\n        layoutCfg = _a.layoutCfg,\n        graph = _a.graph,\n        isGPU = _a.isGPU;\n\n    var worker = this.getWorker(); // 每次worker message event handler调用之间的共享数据，会被修改。\n\n    var workerData = this.workerData;\n\n    if (!worker) {\n      return false;\n    }\n\n    workerData.requestId = null;\n    workerData.requestId2 = null;\n    workerData.currentTick = null;\n    workerData.currentTickData = null;\n    graph.emit('beforelayout');\n    var offScreenCanvas = document.createElement('canvas');\n    var gpuWorkerAbility = isGPU && typeof window !== 'undefined' && // eslint-disable-next-line @typescript-eslint/dot-notation\n    window.navigator && !navigator[\"gpu\"] && // WebGPU 还不支持 OffscreenCanvas\n    'OffscreenCanvas' in window && 'transferControlToOffscreen' in offScreenCanvas; // NOTE: postMessage的message参数里面不能包含函数，否则postMessage会报错，\n    // 例如：'function could not be cloned'。\n    // 详情参考：https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    // 所以这里需要把过滤layoutCfg里的函数字段过滤掉。\n\n    var filteredLayoutCfg = filterObject(layoutCfg, function (value) {\n      return typeof value !== 'function';\n    });\n\n    if (!gpuWorkerAbility) {\n      worker.postMessage({\n        type: LAYOUT_MESSAGE.RUN,\n        nodes: nodes,\n        edges: edges,\n        layoutCfg: filteredLayoutCfg\n      });\n    } else {\n      var offscreen = offScreenCanvas.transferControlToOffscreen(); // filteredLayoutCfg.canvas = offscreen;\n\n      filteredLayoutCfg.type = filteredLayoutCfg.type + \"-gpu\";\n      worker.postMessage({\n        type: LAYOUT_MESSAGE.GPURUN,\n        nodes: nodes,\n        edges: edges,\n        layoutCfg: filteredLayoutCfg,\n        canvas: offscreen\n      }, [offscreen]);\n    }\n\n    worker.onmessage = function (event) {\n      _this.handleWorkerMessage(event, data, success);\n    };\n\n    return true;\n  }; // success callback will be called when updating graph positions for the first time.\n\n\n  LayoutController.prototype.handleWorkerMessage = function (event, data, success) {\n    var _a = this,\n        graph = _a.graph,\n        workerData = _a.workerData,\n        layoutCfg = _a.layoutCfg;\n\n    var eventData = event.data;\n    var type = eventData.type;\n\n    var onTick = function onTick() {\n      if (layoutCfg.onTick) {\n        layoutCfg.onTick();\n      }\n    };\n\n    var onLayoutEnd = function onLayoutEnd() {\n      if (layoutCfg.onLayoutEnd) {\n        layoutCfg.onLayoutEnd();\n      }\n\n      graph.emit('afterlayout');\n    };\n\n    switch (type) {\n      case LAYOUT_MESSAGE.TICK:\n        workerData.currentTick = eventData.currentTick;\n        workerData.currentTickData = eventData;\n\n        if (!workerData.requestId) {\n          workerData.requestId = helper.requestAnimationFrame(function requestId() {\n            updateLayoutPosition(data, eventData);\n            graph.refreshPositions();\n            onTick();\n\n            if (eventData.currentTick === 1 && success) {\n              success();\n            }\n\n            if (eventData.currentTick === eventData.totalTicks) {\n              // 如果是最后一次tick\n              onLayoutEnd();\n            } else if (workerData.currentTick === eventData.totalTicks) {\n              // 注意这里workerData.currentTick可能已经不再是前面赋值时候的值了，\n              // 因为在requestAnimationFrame等待时间里，可能产生新的tick。\n              // 如果当前tick不是最后一次tick，并且所有的tick消息都已发出来了，那么需要用最后一次tick的数据再刷新一次。\n              workerData.requestId2 = helper.requestAnimationFrame(function requestId2() {\n                updateLayoutPosition(data, workerData.currentTickData);\n                graph.refreshPositions();\n                workerData.requestId2 = null;\n                onTick();\n                onLayoutEnd();\n              });\n            }\n\n            workerData.requestId = null;\n          });\n        }\n\n        break;\n\n      case LAYOUT_MESSAGE.END:\n        // 如果没有tick消息（非力导布局）\n        if (workerData.currentTick == null) {\n          updateLayoutPosition(data, eventData);\n          this.refreshLayout(); // 非力导布局，没有tick消息，只有end消息，所以需要执行一次回调。\n\n          if (success) {\n            success();\n          }\n\n          graph.emit('afterlayout');\n        }\n\n        break;\n\n      case LAYOUT_MESSAGE.GPUEND:\n        // 如果没有tick消息（非力导布局）\n        if (workerData.currentTick == null) {\n          updateGPUWorkerLayoutPosition(data, eventData);\n          this.refreshLayout(); // 非力导布局，没有tick消息，只有end消息，所以需要执行一次回调。\n\n          if (success) {\n            success();\n          }\n\n          graph.emit('afterlayout');\n        }\n\n        break;\n\n      case LAYOUT_MESSAGE.ERROR:\n        console.warn('Web-Worker layout error!', eventData.message);\n        break;\n\n      default:\n        break;\n    }\n  }; // 更新布局参数\n\n\n  LayoutController.prototype.updateLayoutCfg = function (cfg) {\n    var _a = this,\n        graph = _a.graph,\n        layoutMethod = _a.layoutMethod,\n        layoutType = _a.layoutType,\n        layoutCfg = _a.layoutCfg;\n\n    this.layoutType = cfg.type;\n\n    if (!layoutMethod || layoutMethod.destroyed) {\n      this.layoutCfg = mix({}, layoutCfg, cfg);\n      this.layout();\n      return;\n    }\n\n    this.data = this.setDataFromGraph();\n    this.stopWorker();\n\n    if (cfg.workerEnabled && this.layoutWithWorker(this.data, null)) {\n      // 如果启用布局web worker并且浏览器支持web worker，用web worker布局。否则回退到不用web worker布局。\n      return;\n    }\n\n    layoutMethod.init(this.data);\n    layoutMethod.updateCfg(cfg);\n    graph.emit('beforelayout');\n    layoutMethod.execute();\n    if (layoutMethod.isCustomLayout && layoutCfg.onLayoutEnd) layoutCfg.onLayoutEnd();\n  };\n\n  LayoutController.prototype.hasGPUVersion = function (layoutName) {\n    var length = GPULayoutNames.length;\n\n    for (var i = 0; i < length; i++) {\n      if (GPULayoutNames[i] === layoutName) return true;\n    }\n\n    return false;\n  };\n\n  LayoutController.prototype.destroy = function () {\n    var layoutMethod = this.layoutMethod;\n\n    if (layoutMethod) {\n      layoutMethod.destroy();\n      layoutMethod.destroyed = true;\n    }\n\n    var worker = this.worker;\n\n    if (worker) {\n      worker.terminate();\n      this.worker = null;\n    }\n\n    this.destroyed = true;\n    this.graph.set('layout', undefined);\n    this.layoutCfg = undefined;\n    this.layoutType = undefined;\n    this.layoutMethod = undefined;\n    this.graph = null;\n  };\n\n  return LayoutController;\n}(AbstractLayout);\n\nexport default LayoutController;\n\nfunction updateLayoutPosition(data, layoutData) {\n  var nodes = data.nodes;\n  var layoutNodes = layoutData.nodes;\n  var nodeLength = nodes.length;\n\n  for (var i = 0; i < nodeLength; i++) {\n    var node = nodes[i];\n    node.x = layoutNodes[i].x;\n    node.y = layoutNodes[i].y;\n  }\n}\n\nfunction filterObject(collection, callback) {\n  var result = {};\n\n  if (collection && _typeof(collection) === 'object') {\n    Object.keys(collection).forEach(function (key) {\n      if (collection.hasOwnProperty(key) && callback(collection[key])) {\n        result[key] = collection[key];\n      }\n    });\n    return result;\n  }\n\n  return collection;\n}\n\nfunction updateGPUWorkerLayoutPosition(data, layoutData) {\n  var nodes = data.nodes;\n  var vertexEdgeData = layoutData.vertexEdgeData;\n  var nodeLength = nodes.length;\n\n  for (var i = 0; i < nodeLength; i++) {\n    var node = nodes[i];\n    var x = vertexEdgeData[4 * i];\n    var y = vertexEdgeData[4 * i + 1];\n    node.x = x;\n    node.y = y;\n  }\n}","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/node_modules/@antv/g6-pc/es/graph/controller/layout.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","__extends","AbstractLayout","Layout","LayoutWorker","LAYOUT_MESSAGE","gpuDetector","mix","mockRaf","cb","setTimeout","mockCaf","reqId","clearTimeout","helper","requestAnimationFrame","callback","fn","window","webkitRequestAnimationFrame","cancelAnimationFrame","requestId","webkitCancelAnimationFrame","GPULayoutNames","LayoutController","_super","graph","_this","call","layoutCfg","get","layoutType","type","worker","workerData","initLayout","getWorker","Worker","console","warn","stopWorker","terminate","requestId2","layout","success","data","setDataFromGraph","nodes","width","height","Object","assign","center","hasLayoutType","layoutMethod","destroy","emit","allHavePos","initPositions","isGPU","split","gpuEnabled","enableGPU","webgl","hasGPUVersion","workerEnabled","layoutWithWorker","onLayoutEnd","layoutEndFormatted","refreshLayout","onTick_1","onTick","tick","refreshPositions","comboTrees","enableTick","undefined","e","onTick_2","init","execute","isCustomLayout","edges","_a","currentTick","currentTickData","offScreenCanvas","document","createElement","gpuWorkerAbility","navigator","filteredLayoutCfg","filterObject","value","postMessage","RUN","offscreen","transferControlToOffscreen","GPURUN","canvas","onmessage","event","handleWorkerMessage","eventData","TICK","updateLayoutPosition","totalTicks","END","GPUEND","updateGPUWorkerLayoutPosition","ERROR","message","updateLayoutCfg","cfg","destroyed","updateCfg","layoutName","length","i","set","layoutData","layoutNodes","nodeLength","node","x","y","collection","result","keys","forEach","key","hasOwnProperty","vertexEdgeData"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { __extends } from \"tslib\";\nimport { AbstractLayout } from '@antv/g6-core';\nimport { Layout } from '../../layout';\nimport { LayoutWorker } from '../../layout/worker/layout.worker';\nimport { LAYOUT_MESSAGE } from '../../layout/worker/layoutConst';\nimport { gpuDetector } from '../../util/gpu';\nimport { mix } from '@antv/util'; // eslint-disable-next-line @typescript-eslint/no-implied-eval\n\nvar mockRaf = function mockRaf(cb) {\n  return setTimeout(cb, 16);\n};\n\nvar mockCaf = function mockCaf(reqId) {\n  return clearTimeout(reqId);\n};\n\nvar helper = {\n  // pollyfill\n  requestAnimationFrame: function requestAnimationFrame(callback) {\n    var fn = typeof window !== 'undefined' ? window.requestAnimationFrame || window.webkitRequestAnimationFrame || mockRaf : mockRaf;\n    return fn(callback);\n  },\n  cancelAnimationFrame: function cancelAnimationFrame(requestId) {\n    var fn = typeof window !== 'undefined' ? window.cancelAnimationFrame || window.webkitCancelAnimationFrame || mockCaf : mockCaf;\n    return fn(requestId);\n  }\n};\nvar GPULayoutNames = ['fruchterman', 'gForce'];\n\nvar LayoutController =\n/** @class */\nfunction (_super) {\n  __extends(LayoutController, _super); // the configurations of the layout\n  // private layoutCfg: any; // LayoutOptions\n  // the type name of the layout\n  // private layoutType: string;\n  // private data: GraphData;\n  // private layoutMethod: typeof Layout;\n\n\n  function LayoutController(graph) {\n    var _this = _super.call(this, graph) || this;\n\n    _this.graph = graph;\n    _this.layoutCfg = graph.get('layout') || {};\n    _this.layoutType = _this.layoutCfg.type;\n    _this.worker = null;\n    _this.workerData = {};\n\n    _this.initLayout();\n\n    return _this;\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  LayoutController.prototype.initLayout = function () {// no data before rendering\n  }; // get layout worker and create one if not exists\n\n\n  LayoutController.prototype.getWorker = function () {\n    if (this.worker) {\n      return this.worker;\n    }\n\n    if (typeof Worker === 'undefined') {\n      // 如果当前浏览器不支持 web worker，则不使用 web worker\n      console.warn('Web worker is not supported in current browser.');\n      this.worker = null;\n    } else {\n      this.worker = LayoutWorker;\n    }\n\n    return this.worker;\n  }; // stop layout worker\n\n\n  LayoutController.prototype.stopWorker = function () {\n    var workerData = this.workerData;\n\n    if (!this.worker) {\n      return;\n    }\n\n    this.worker.terminate();\n    this.worker = null; // 重新开始新的布局之前，先取消之前布局的requestAnimationFrame。\n\n    if (workerData.requestId) {\n      helper.cancelAnimationFrame(workerData.requestId);\n      workerData.requestId = null;\n    }\n\n    if (workerData.requestId2) {\n      helper.cancelAnimationFrame(workerData.requestId2);\n      workerData.requestId2 = null;\n    }\n  };\n  /**\n   * @param {function} success callback\n   * @return {boolean} 是否使用web worker布局\n   */\n\n\n  LayoutController.prototype.layout = function (success) {\n    var _this = this;\n\n    var graph = this.graph;\n    this.data = this.setDataFromGraph();\n    var nodes = this.data.nodes;\n\n    if (!nodes) {\n      return false;\n    }\n\n    var width = graph.get('width');\n    var height = graph.get('height');\n    var layoutCfg = {};\n    Object.assign(layoutCfg, {\n      width: width,\n      height: height,\n      center: [width / 2, height / 2]\n    }, this.layoutCfg);\n    this.layoutCfg = layoutCfg;\n    var hasLayoutType = !!this.layoutType;\n    var layoutMethod = this.layoutMethod;\n\n    if (layoutMethod) {\n      layoutMethod.destroy();\n    }\n\n    graph.emit('beforelayout');\n    var allHavePos = this.initPositions(layoutCfg.center, nodes);\n    var layoutType = this.layoutType;\n    var isGPU = false; // 防止用户直接用 -gpu 结尾指定布局\n\n    if (layoutType && layoutType.split('-')[1] === 'gpu') {\n      layoutType = layoutType.split('-')[0];\n      layoutCfg.gpuEnabled = true;\n    } // 若用户指定开启 gpu，且当前浏览器支持 webgl，且该算法存在 GPU 版本（目前仅支持 fruchterman 和 gForce），使用 gpu 版本的布局\n\n\n    if (layoutType && layoutCfg.gpuEnabled) {\n      var enableGPU = true; // 打开下面语句将会导致 webworker 报找不到 window\n\n      if (!gpuDetector().webgl) {\n        console.warn(\"Your browser does not support webGL or GPGPU. The layout will run in CPU.\");\n        enableGPU = false;\n      }\n\n      if (!this.hasGPUVersion(layoutType)) {\n        console.warn(\"The '\" + layoutType + \"' layout does not support GPU calculation for now, it will run in CPU.\");\n        enableGPU = false;\n      }\n\n      if (enableGPU) {\n        layoutType = layoutType + \"-gpu\"; // layoutCfg.canvasEl = this.graph.get('canvas').get('el');\n\n        isGPU = true;\n      }\n    }\n\n    this.isGPU = isGPU;\n    this.stopWorker();\n\n    if (layoutCfg.workerEnabled && this.layoutWithWorker(this.data, success)) {\n      // 如果启用布局web worker并且浏览器支持web worker，用web worker布局。否则回退到不用web worker布局。\n      return true;\n    } // 所有布局挂载 onLayoutEnd, 在布局结束后依次执行：\n    // 执行用户自定义 onLayoutEnd，触发 afterlayout、更新节点位置、fitView/fitCenter、触发 afterrender\n\n\n    var onLayoutEnd = layoutCfg.onLayoutEnd,\n        layoutEndFormatted = layoutCfg.layoutEndFormatted;\n\n    if (!layoutEndFormatted) {\n      layoutCfg.layoutEndFormatted = true;\n\n      layoutCfg.onLayoutEnd = function () {\n        // 执行用户自定义 onLayoutEnd\n        if (onLayoutEnd) {\n          onLayoutEnd();\n        } // 触发 afterlayout\n\n\n        graph.emit('afterlayout'); // 更新节点位置\n\n        _this.refreshLayout(); // 由 graph 传入的，控制 fitView、fitCenter，并触发 afterrender\n\n\n        if (success) success();\n      };\n    }\n\n    if (layoutType === 'force' || layoutType === 'g6force' || layoutType === 'gForce') {\n      var onTick_1 = layoutCfg.onTick;\n\n      var tick = function tick() {\n        if (onTick_1) {\n          onTick_1();\n        }\n\n        graph.refreshPositions();\n      };\n\n      layoutCfg.tick = tick;\n    } else if (this.layoutType === 'comboForce') {\n      layoutCfg.comboTrees = graph.get('comboTrees');\n    }\n\n    var enableTick = false;\n\n    if (layoutType !== undefined) {\n      try {\n        layoutMethod = new Layout[layoutType](layoutCfg);\n      } catch (e) {\n        console.warn(\"The layout method: '\" + layoutType + \"' does not exist! Please specify it first.\");\n        return false;\n      } // 是否需要迭代的方式完成布局。这里是来自布局对象的实例属性，是由布局的定义者在布局类定义的。\n\n\n      enableTick = layoutMethod.enableTick;\n\n      if (enableTick) {\n        var onTick_2 = layoutCfg.onTick;\n\n        var tick = function tick() {\n          if (onTick_2) {\n            onTick_2();\n          }\n\n          graph.refreshPositions();\n        };\n\n        layoutMethod.tick = tick;\n      }\n\n      layoutMethod.init(this.data); // 若存在节点没有位置信息，且没有设置 layout，在 initPositions 中 random 给出了所有节点的位置，不需要再次执行 random 布局\n      // 所有节点都有位置信息，且指定了 layout，则执行布局（代表不是第一次进行布局）\n\n      if (hasLayoutType) {\n        graph.emit('beginlayout');\n        layoutMethod.execute();\n        if (layoutMethod.isCustomLayout && layoutCfg.onLayoutEnd) layoutCfg.onLayoutEnd();\n      }\n\n      this.layoutMethod = layoutMethod;\n    } else if (layoutCfg.onLayoutEnd) {\n      // 若没有配置 layout，也需要更新画布\n      layoutCfg.onLayoutEnd();\n    }\n\n    return false;\n  };\n  /**\n   * layout with web worker\n   * @param {object} data graph data\n   * @param {function} success callback function\n   * @return {boolean} 是否支持web worker\n   */\n\n\n  LayoutController.prototype.layoutWithWorker = function (data, success) {\n    var _this = this;\n\n    var nodes = data.nodes,\n        edges = data.edges;\n\n    var _a = this,\n        layoutCfg = _a.layoutCfg,\n        graph = _a.graph,\n        isGPU = _a.isGPU;\n\n    var worker = this.getWorker(); // 每次worker message event handler调用之间的共享数据，会被修改。\n\n    var workerData = this.workerData;\n\n    if (!worker) {\n      return false;\n    }\n\n    workerData.requestId = null;\n    workerData.requestId2 = null;\n    workerData.currentTick = null;\n    workerData.currentTickData = null;\n    graph.emit('beforelayout');\n    var offScreenCanvas = document.createElement('canvas');\n    var gpuWorkerAbility = isGPU && typeof window !== 'undefined' && // eslint-disable-next-line @typescript-eslint/dot-notation\n    window.navigator && !navigator[\"gpu\"] && // WebGPU 还不支持 OffscreenCanvas\n    'OffscreenCanvas' in window && 'transferControlToOffscreen' in offScreenCanvas; // NOTE: postMessage的message参数里面不能包含函数，否则postMessage会报错，\n    // 例如：'function could not be cloned'。\n    // 详情参考：https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    // 所以这里需要把过滤layoutCfg里的函数字段过滤掉。\n\n    var filteredLayoutCfg = filterObject(layoutCfg, function (value) {\n      return typeof value !== 'function';\n    });\n\n    if (!gpuWorkerAbility) {\n      worker.postMessage({\n        type: LAYOUT_MESSAGE.RUN,\n        nodes: nodes,\n        edges: edges,\n        layoutCfg: filteredLayoutCfg\n      });\n    } else {\n      var offscreen = offScreenCanvas.transferControlToOffscreen(); // filteredLayoutCfg.canvas = offscreen;\n\n      filteredLayoutCfg.type = filteredLayoutCfg.type + \"-gpu\";\n      worker.postMessage({\n        type: LAYOUT_MESSAGE.GPURUN,\n        nodes: nodes,\n        edges: edges,\n        layoutCfg: filteredLayoutCfg,\n        canvas: offscreen\n      }, [offscreen]);\n    }\n\n    worker.onmessage = function (event) {\n      _this.handleWorkerMessage(event, data, success);\n    };\n\n    return true;\n  }; // success callback will be called when updating graph positions for the first time.\n\n\n  LayoutController.prototype.handleWorkerMessage = function (event, data, success) {\n    var _a = this,\n        graph = _a.graph,\n        workerData = _a.workerData,\n        layoutCfg = _a.layoutCfg;\n\n    var eventData = event.data;\n    var type = eventData.type;\n\n    var onTick = function onTick() {\n      if (layoutCfg.onTick) {\n        layoutCfg.onTick();\n      }\n    };\n\n    var onLayoutEnd = function onLayoutEnd() {\n      if (layoutCfg.onLayoutEnd) {\n        layoutCfg.onLayoutEnd();\n      }\n\n      graph.emit('afterlayout');\n    };\n\n    switch (type) {\n      case LAYOUT_MESSAGE.TICK:\n        workerData.currentTick = eventData.currentTick;\n        workerData.currentTickData = eventData;\n\n        if (!workerData.requestId) {\n          workerData.requestId = helper.requestAnimationFrame(function requestId() {\n            updateLayoutPosition(data, eventData);\n            graph.refreshPositions();\n            onTick();\n\n            if (eventData.currentTick === 1 && success) {\n              success();\n            }\n\n            if (eventData.currentTick === eventData.totalTicks) {\n              // 如果是最后一次tick\n              onLayoutEnd();\n            } else if (workerData.currentTick === eventData.totalTicks) {\n              // 注意这里workerData.currentTick可能已经不再是前面赋值时候的值了，\n              // 因为在requestAnimationFrame等待时间里，可能产生新的tick。\n              // 如果当前tick不是最后一次tick，并且所有的tick消息都已发出来了，那么需要用最后一次tick的数据再刷新一次。\n              workerData.requestId2 = helper.requestAnimationFrame(function requestId2() {\n                updateLayoutPosition(data, workerData.currentTickData);\n                graph.refreshPositions();\n                workerData.requestId2 = null;\n                onTick();\n                onLayoutEnd();\n              });\n            }\n\n            workerData.requestId = null;\n          });\n        }\n\n        break;\n\n      case LAYOUT_MESSAGE.END:\n        // 如果没有tick消息（非力导布局）\n        if (workerData.currentTick == null) {\n          updateLayoutPosition(data, eventData);\n          this.refreshLayout(); // 非力导布局，没有tick消息，只有end消息，所以需要执行一次回调。\n\n          if (success) {\n            success();\n          }\n\n          graph.emit('afterlayout');\n        }\n\n        break;\n\n      case LAYOUT_MESSAGE.GPUEND:\n        // 如果没有tick消息（非力导布局）\n        if (workerData.currentTick == null) {\n          updateGPUWorkerLayoutPosition(data, eventData);\n          this.refreshLayout(); // 非力导布局，没有tick消息，只有end消息，所以需要执行一次回调。\n\n          if (success) {\n            success();\n          }\n\n          graph.emit('afterlayout');\n        }\n\n        break;\n\n      case LAYOUT_MESSAGE.ERROR:\n        console.warn('Web-Worker layout error!', eventData.message);\n        break;\n\n      default:\n        break;\n    }\n  }; // 更新布局参数\n\n\n  LayoutController.prototype.updateLayoutCfg = function (cfg) {\n    var _a = this,\n        graph = _a.graph,\n        layoutMethod = _a.layoutMethod,\n        layoutType = _a.layoutType,\n        layoutCfg = _a.layoutCfg;\n\n    this.layoutType = cfg.type;\n\n    if (!layoutMethod || layoutMethod.destroyed) {\n      this.layoutCfg = mix({}, layoutCfg, cfg);\n      this.layout();\n      return;\n    }\n\n    this.data = this.setDataFromGraph();\n    this.stopWorker();\n\n    if (cfg.workerEnabled && this.layoutWithWorker(this.data, null)) {\n      // 如果启用布局web worker并且浏览器支持web worker，用web worker布局。否则回退到不用web worker布局。\n      return;\n    }\n\n    layoutMethod.init(this.data);\n    layoutMethod.updateCfg(cfg);\n    graph.emit('beforelayout');\n    layoutMethod.execute();\n    if (layoutMethod.isCustomLayout && layoutCfg.onLayoutEnd) layoutCfg.onLayoutEnd();\n  };\n\n  LayoutController.prototype.hasGPUVersion = function (layoutName) {\n    var length = GPULayoutNames.length;\n\n    for (var i = 0; i < length; i++) {\n      if (GPULayoutNames[i] === layoutName) return true;\n    }\n\n    return false;\n  };\n\n  LayoutController.prototype.destroy = function () {\n    var layoutMethod = this.layoutMethod;\n\n    if (layoutMethod) {\n      layoutMethod.destroy();\n      layoutMethod.destroyed = true;\n    }\n\n    var worker = this.worker;\n\n    if (worker) {\n      worker.terminate();\n      this.worker = null;\n    }\n\n    this.destroyed = true;\n    this.graph.set('layout', undefined);\n    this.layoutCfg = undefined;\n    this.layoutType = undefined;\n    this.layoutMethod = undefined;\n    this.graph = null;\n  };\n\n  return LayoutController;\n}(AbstractLayout);\n\nexport default LayoutController;\n\nfunction updateLayoutPosition(data, layoutData) {\n  var nodes = data.nodes;\n  var layoutNodes = layoutData.nodes;\n  var nodeLength = nodes.length;\n\n  for (var i = 0; i < nodeLength; i++) {\n    var node = nodes[i];\n    node.x = layoutNodes[i].x;\n    node.y = layoutNodes[i].y;\n  }\n}\n\nfunction filterObject(collection, callback) {\n  var result = {};\n\n  if (collection && _typeof(collection) === 'object') {\n    Object.keys(collection).forEach(function (key) {\n      if (collection.hasOwnProperty(key) && callback(collection[key])) {\n        result[key] = collection[key];\n      }\n    });\n    return result;\n  }\n\n  return collection;\n}\n\nfunction updateGPUWorkerLayoutPosition(data, layoutData) {\n  var nodes = data.nodes;\n  var vertexEdgeData = layoutData.vertexEdgeData;\n  var nodeLength = nodes.length;\n\n  for (var i = 0; i < nodeLength; i++) {\n    var node = nodes[i];\n    var x = vertexEdgeData[4 * i];\n    var y = vertexEdgeData[4 * i + 1];\n    node.x = x;\n    node.y = y;\n  }\n}"]},"metadata":{},"sourceType":"module"}