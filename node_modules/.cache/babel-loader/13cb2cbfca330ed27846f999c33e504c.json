{"ast":null,"code":"import { shakebook } from '@/service/api/v1/account_pb';\nimport * as types from './types';\nimport axios from 'axios';\nimport camelcaseKeys from 'camelcase-keys';\nimport api from '@/api';\nimport { notification } from 'antd';\n\nconst getAccountAction = res => {\n  return {\n    type: types.GET_ACCOUNT,\n    account: { ...res\n    }\n  };\n};\n\nexport function getAccountRequest(req) {\n  return dispatch => {\n    axios({\n      method: 'get',\n      url: api.getAccount,\n      data: req.data,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret = shakebook.GetAccountResponse.fromObject(camelcaseKeys(res.data));\n      console.log(ret);\n\n      if (res.status === 200 && ret.success) {\n        dispatch(getAccountAction(ret.data));\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n        localStorage.removeItem(\"token\");\n        req.props.history.push('/login');\n      }\n    }).catch(function (error) {\n      notification['error']({\n        message: '信息提示',\n        description: \"请稍后重试\"\n      });\n      localStorage.removeItem(\"token\");\n      req.props.history.push('/login');\n    });\n  };\n}","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/src/pages/home/header/store/actions.ts"],"names":["shakebook","types","axios","camelcaseKeys","api","notification","getAccountAction","res","type","GET_ACCOUNT","account","getAccountRequest","req","dispatch","method","url","getAccount","data","headers","localStorage","getItem","then","ret","GetAccountResponse","fromObject","console","log","status","success","message","description","removeItem","props","history","push","catch","error"],"mappings":"AAAA,SAASA,SAAT,QAA0B,6BAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,YAAT,QAA6B,MAA7B;;AAEA,MAAMC,gBAAgB,GAAIC,GAAD,IAAyD;AAChF,SAAO;AACLC,IAAAA,IAAI,EAAEP,KAAK,CAACQ,WADP;AAELC,IAAAA,OAAO,EAAE,EAAE,GAAGH;AAAL;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,SAASI,iBAAT,CAA2BC,GAA3B,EAAwD;AAC7D,SAAQC,QAAD,IAAwC;AAC7CX,IAAAA,KAAK,CAAC;AACJY,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAEX,GAAG,CAACY,UAFL;AAGJC,MAAAA,IAAI,EAAEL,GAAG,CAACK,IAHN;AAIJC,MAAAA,OAAO,EAAE;AACP,+BAAuB,YAAYC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAD5B;AAJL,KAAD,CAAL,CAOGC,IAPH,CAOQ,UAAUd,GAAV,EAAe;AACrB,UAAIe,GAAkC,GACpCtB,SAAS,CAACuB,kBAAV,CAA6BC,UAA7B,CACErB,aAAa,CAACI,GAAG,CAACU,IAAL,CADf,CADF;AAIAQ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;;AACA,UAAIf,GAAG,CAACoB,MAAJ,KAAe,GAAf,IAAsBL,GAAG,CAACM,OAA9B,EAAuC;AACrCf,QAAAA,QAAQ,CAACP,gBAAgB,CAACgB,GAAG,CAACL,IAAL,CAAjB,CAAR;AACD,OAFD,MAEO;AACLZ,QAAAA,YAAY,CAAC,SAAD,CAAZ,CAAwB;AACtBwB,UAAAA,OAAO,EAAE,MADa;AAEtBC,UAAAA,WAAW,EAAER,GAAG,CAACO;AAFK,SAAxB;AAIAV,QAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACAnB,QAAAA,GAAG,CAACoB,KAAJ,CAAUC,OAAV,CAAkBC,IAAlB,CAAuB,QAAvB;AACD;AACF,KAvBD,EAwBGC,KAxBH,CAwBS,UAAUC,KAAV,EAAiB;AACtB/B,MAAAA,YAAY,CAAC,OAAD,CAAZ,CAAsB;AACpBwB,QAAAA,OAAO,EAAE,MADW;AAEpBC,QAAAA,WAAW,EAAE;AAFO,OAAtB;AAIAX,MAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACAnB,MAAAA,GAAG,CAACoB,KAAJ,CAAUC,OAAV,CAAkBC,IAAlB,CAAuB,QAAvB;AACD,KA/BH;AAgCD,GAjCD;AAkCD","sourcesContent":["import { shakebook } from '@/service/api/v1/account_pb'\nimport * as types from './types'\nimport axios from 'axios';\nimport camelcaseKeys from 'camelcase-keys'\nimport api from '@/api';\nimport { notification } from 'antd';\n\nconst getAccountAction = (res: shakebook.IAccountInfo): types.GetAccountAction => {\n  return {\n    type: types.GET_ACCOUNT,\n    account: { ...res }\n  }\n}\n\nexport function getAccountRequest(req: types.RequestWithProps) {\n  return (dispatch: types.GetAccountDispatch) => {\n    axios({\n      method: 'get',\n      url: api.getAccount,\n      data: req.data,\n      headers: {\n        \"Grpc-metadata-token\": \"BEARER \" + localStorage.getItem(\"token\")\n      }\n    }).then(function (res) {\n      let ret: shakebook.IGetAccountResponse =\n        shakebook.GetAccountResponse.fromObject(\n          camelcaseKeys(res.data as Object)\n        )\n      console.log(ret)\n      if (res.status === 200 && ret.success) {\n        dispatch(getAccountAction(ret.data!))\n      } else {\n        notification['warning']({\n          message: '信息提示',\n          description: ret.message\n        });\n        localStorage.removeItem(\"token\")\n        req.props.history.push('/login')\n      }\n    })\n      .catch(function (error) {\n        notification['error']({\n          message: '信息提示',\n          description: \"请稍后重试\"\n        });\n        localStorage.removeItem(\"token\")\n        req.props.history.push('/login')\n      });\n  }\n}"]},"metadata":{},"sourceType":"module"}