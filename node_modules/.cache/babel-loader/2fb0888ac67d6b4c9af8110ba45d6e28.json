{"ast":null,"code":"import * as $protobuf from \"protobufjs\"; // Common aliases\n\nconst $util = $protobuf.util; // Exported root namespace\n\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\nexport const shakebook = $root.shakebook = (() => {\n  /**\n   * Namespace shakebook.\n   * @exports shakebook\n   * @namespace\n   */\n  const shakebook = {};\n\n  shakebook.Response = function () {\n    /**\n     * Properties of a Response.\n     * @memberof shakebook\n     * @interface IResponse\n     * @property {boolean|null} [success] Response success\n     * @property {string|null} [message] Response message\n     */\n\n    /**\n     * Constructs a new Response.\n     * @memberof shakebook\n     * @classdesc Represents a Response.\n     * @implements IResponse\n     * @constructor\n     * @param {shakebook.IResponse=} [properties] Properties to set\n     */\n    function Response(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Response success.\n     * @member {boolean} success\n     * @memberof shakebook.Response\n     * @instance\n     */\n\n\n    Response.prototype.success = false;\n    /**\n     * Response message.\n     * @member {string} message\n     * @memberof shakebook.Response\n     * @instance\n     */\n\n    Response.prototype.message = \"\";\n    /**\n     * Creates a Response message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.Response\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.Response} Response\n     */\n\n    Response.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.Response) return object;\n      let message = new $root.shakebook.Response();\n      if (object.success != null) message.success = Boolean(object.success);\n      if (object.message != null) message.message = String(object.message);\n      return message;\n    };\n    /**\n     * Creates a plain object from a Response message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.Response\n     * @static\n     * @param {shakebook.Response} message Response\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Response.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.success = false;\n        object.message = \"\";\n      }\n\n      if (message.success != null && message.hasOwnProperty(\"success\")) object.success = message.success;\n      if (message.message != null && message.hasOwnProperty(\"message\")) object.message = message.message;\n      return object;\n    };\n    /**\n     * Converts this Response to JSON.\n     * @function toJSON\n     * @memberof shakebook.Response\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Response.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Response;\n  }();\n\n  shakebook.EmptyRequest = function () {\n    /**\n     * Properties of an EmptyRequest.\n     * @memberof shakebook\n     * @interface IEmptyRequest\n     */\n\n    /**\n     * Constructs a new EmptyRequest.\n     * @memberof shakebook\n     * @classdesc Represents an EmptyRequest.\n     * @implements IEmptyRequest\n     * @constructor\n     * @param {shakebook.IEmptyRequest=} [properties] Properties to set\n     */\n    function EmptyRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Creates an EmptyRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.EmptyRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.EmptyRequest} EmptyRequest\n     */\n\n\n    EmptyRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.EmptyRequest) return object;\n      return new $root.shakebook.EmptyRequest();\n    };\n    /**\n     * Creates a plain object from an EmptyRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.EmptyRequest\n     * @static\n     * @param {shakebook.EmptyRequest} message EmptyRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    EmptyRequest.toObject = function toObject() {\n      return {};\n    };\n    /**\n     * Converts this EmptyRequest to JSON.\n     * @function toJSON\n     * @memberof shakebook.EmptyRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    EmptyRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EmptyRequest;\n  }();\n\n  shakebook.SignUpRequest = function () {\n    /**\n     * Properties of a SignUpRequest.\n     * @memberof shakebook\n     * @interface ISignUpRequest\n     * @property {string|null} [accountName] SignUpRequest accountName\n     * @property {string|null} [accountEmail] SignUpRequest accountEmail\n     * @property {string|null} [accountPassword] SignUpRequest accountPassword\n     * @property {string|null} [emailValidCode] SignUpRequest emailValidCode\n     */\n\n    /**\n     * Constructs a new SignUpRequest.\n     * @memberof shakebook\n     * @classdesc Represents a SignUpRequest.\n     * @implements ISignUpRequest\n     * @constructor\n     * @param {shakebook.ISignUpRequest=} [properties] Properties to set\n     */\n    function SignUpRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * SignUpRequest accountName.\n     * @member {string} accountName\n     * @memberof shakebook.SignUpRequest\n     * @instance\n     */\n\n\n    SignUpRequest.prototype.accountName = \"\";\n    /**\n     * SignUpRequest accountEmail.\n     * @member {string} accountEmail\n     * @memberof shakebook.SignUpRequest\n     * @instance\n     */\n\n    SignUpRequest.prototype.accountEmail = \"\";\n    /**\n     * SignUpRequest accountPassword.\n     * @member {string} accountPassword\n     * @memberof shakebook.SignUpRequest\n     * @instance\n     */\n\n    SignUpRequest.prototype.accountPassword = \"\";\n    /**\n     * SignUpRequest emailValidCode.\n     * @member {string} emailValidCode\n     * @memberof shakebook.SignUpRequest\n     * @instance\n     */\n\n    SignUpRequest.prototype.emailValidCode = \"\";\n    /**\n     * Creates a SignUpRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.SignUpRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.SignUpRequest} SignUpRequest\n     */\n\n    SignUpRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.SignUpRequest) return object;\n      let message = new $root.shakebook.SignUpRequest();\n      if (object.accountName != null) message.accountName = String(object.accountName);\n      if (object.accountEmail != null) message.accountEmail = String(object.accountEmail);\n      if (object.accountPassword != null) message.accountPassword = String(object.accountPassword);\n      if (object.emailValidCode != null) message.emailValidCode = String(object.emailValidCode);\n      return message;\n    };\n    /**\n     * Creates a plain object from a SignUpRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.SignUpRequest\n     * @static\n     * @param {shakebook.SignUpRequest} message SignUpRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    SignUpRequest.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.accountName = \"\";\n        object.accountEmail = \"\";\n        object.accountPassword = \"\";\n        object.emailValidCode = \"\";\n      }\n\n      if (message.accountName != null && message.hasOwnProperty(\"accountName\")) object.accountName = message.accountName;\n      if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\")) object.accountEmail = message.accountEmail;\n      if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\")) object.accountPassword = message.accountPassword;\n      if (message.emailValidCode != null && message.hasOwnProperty(\"emailValidCode\")) object.emailValidCode = message.emailValidCode;\n      return object;\n    };\n    /**\n     * Converts this SignUpRequest to JSON.\n     * @function toJSON\n     * @memberof shakebook.SignUpRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    SignUpRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SignUpRequest;\n  }();\n\n  shakebook.AccountId = function () {\n    /**\n     * Properties of an AccountId.\n     * @memberof shakebook\n     * @interface IAccountId\n     * @property {number|null} [id] AccountId id\n     */\n\n    /**\n     * Constructs a new AccountId.\n     * @memberof shakebook\n     * @classdesc Represents an AccountId.\n     * @implements IAccountId\n     * @constructor\n     * @param {shakebook.IAccountId=} [properties] Properties to set\n     */\n    function AccountId(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * AccountId id.\n     * @member {number} id\n     * @memberof shakebook.AccountId\n     * @instance\n     */\n\n\n    AccountId.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * Creates an AccountId message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.AccountId\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.AccountId} AccountId\n     */\n\n    AccountId.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.AccountId) return object;\n      let message = new $root.shakebook.AccountId();\n      if (object.id != null) if ($util.Long) (message.id = $util.Long.fromValue(object.id)).unsigned = false;else if (typeof object.id === \"string\") message.id = parseInt(object.id, 10);else if (typeof object.id === \"number\") message.id = object.id;else if (typeof object.id === \"object\") message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();\n      return message;\n    };\n    /**\n     * Creates a plain object from an AccountId message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.AccountId\n     * @static\n     * @param {shakebook.AccountId} message AccountId\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    AccountId.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n      if (options.defaults) if ($util.Long) {\n        let long = new $util.Long(0, 0, false);\n        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.id = options.longs === String ? \"0\" : 0;\n      if (message.id != null && message.hasOwnProperty(\"id\")) if (typeof message.id === \"number\") object.id = options.longs === String ? String(message.id) : message.id;else object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;\n      return object;\n    };\n    /**\n     * Converts this AccountId to JSON.\n     * @function toJSON\n     * @memberof shakebook.AccountId\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    AccountId.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AccountId;\n  }();\n\n  shakebook.SignInRequest = function () {\n    /**\n     * Properties of a SignInRequest.\n     * @memberof shakebook\n     * @interface ISignInRequest\n     * @property {string|null} [accountName] SignInRequest accountName\n     * @property {string|null} [accountPassword] SignInRequest accountPassword\n     */\n\n    /**\n     * Constructs a new SignInRequest.\n     * @memberof shakebook\n     * @classdesc Represents a SignInRequest.\n     * @implements ISignInRequest\n     * @constructor\n     * @param {shakebook.ISignInRequest=} [properties] Properties to set\n     */\n    function SignInRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * SignInRequest accountName.\n     * @member {string} accountName\n     * @memberof shakebook.SignInRequest\n     * @instance\n     */\n\n\n    SignInRequest.prototype.accountName = \"\";\n    /**\n     * SignInRequest accountPassword.\n     * @member {string} accountPassword\n     * @memberof shakebook.SignInRequest\n     * @instance\n     */\n\n    SignInRequest.prototype.accountPassword = \"\";\n    /**\n     * Creates a SignInRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.SignInRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.SignInRequest} SignInRequest\n     */\n\n    SignInRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.SignInRequest) return object;\n      let message = new $root.shakebook.SignInRequest();\n      if (object.accountName != null) message.accountName = String(object.accountName);\n      if (object.accountPassword != null) message.accountPassword = String(object.accountPassword);\n      return message;\n    };\n    /**\n     * Creates a plain object from a SignInRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.SignInRequest\n     * @static\n     * @param {shakebook.SignInRequest} message SignInRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    SignInRequest.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.accountName = \"\";\n        object.accountPassword = \"\";\n      }\n\n      if (message.accountName != null && message.hasOwnProperty(\"accountName\")) object.accountName = message.accountName;\n      if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\")) object.accountPassword = message.accountPassword;\n      return object;\n    };\n    /**\n     * Converts this SignInRequest to JSON.\n     * @function toJSON\n     * @memberof shakebook.SignInRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    SignInRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SignInRequest;\n  }();\n\n  shakebook.SignInResponse = function () {\n    /**\n     * Properties of a SignInResponse.\n     * @memberof shakebook\n     * @interface ISignInResponse\n     * @property {shakebook.IResponse|null} [response] SignInResponse response\n     * @property {string|null} [data] SignInResponse data\n     */\n\n    /**\n     * Constructs a new SignInResponse.\n     * @memberof shakebook\n     * @classdesc Represents a SignInResponse.\n     * @implements ISignInResponse\n     * @constructor\n     * @param {shakebook.ISignInResponse=} [properties] Properties to set\n     */\n    function SignInResponse(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * SignInResponse response.\n     * @member {shakebook.IResponse|null|undefined} response\n     * @memberof shakebook.SignInResponse\n     * @instance\n     */\n\n\n    SignInResponse.prototype.response = null;\n    /**\n     * SignInResponse data.\n     * @member {string} data\n     * @memberof shakebook.SignInResponse\n     * @instance\n     */\n\n    SignInResponse.prototype.data = \"\";\n    /**\n     * Creates a SignInResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.SignInResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.SignInResponse} SignInResponse\n     */\n\n    SignInResponse.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.SignInResponse) return object;\n      let message = new $root.shakebook.SignInResponse();\n\n      if (object.response != null) {\n        if (typeof object.response !== \"object\") throw TypeError(\".shakebook.SignInResponse.response: object expected\");\n        message.response = $root.shakebook.Response.fromObject(object.response);\n      }\n\n      if (object.data != null) message.data = String(object.data);\n      return message;\n    };\n    /**\n     * Creates a plain object from a SignInResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.SignInResponse\n     * @static\n     * @param {shakebook.SignInResponse} message SignInResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    SignInResponse.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.response = null;\n        object.data = \"\";\n      }\n\n      if (message.response != null && message.hasOwnProperty(\"response\")) object.response = $root.shakebook.Response.toObject(message.response, options);\n      if (message.data != null && message.hasOwnProperty(\"data\")) object.data = message.data;\n      return object;\n    };\n    /**\n     * Converts this SignInResponse to JSON.\n     * @function toJSON\n     * @memberof shakebook.SignInResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    SignInResponse.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SignInResponse;\n  }();\n\n  shakebook.TestCom = function () {\n    /**\n     * Properties of a TestCom.\n     * @memberof shakebook\n     * @interface ITestCom\n     */\n\n    /**\n     * Constructs a new TestCom.\n     * @memberof shakebook\n     * @classdesc Represents a TestCom.\n     * @implements ITestCom\n     * @constructor\n     * @param {shakebook.ITestCom=} [properties] Properties to set\n     */\n    function TestCom(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Creates a TestCom message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.TestCom\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.TestCom} TestCom\n     */\n\n\n    TestCom.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.TestCom) return object;\n      return new $root.shakebook.TestCom();\n    };\n    /**\n     * Creates a plain object from a TestCom message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.TestCom\n     * @static\n     * @param {shakebook.TestCom} message TestCom\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    TestCom.toObject = function toObject() {\n      return {};\n    };\n    /**\n     * Converts this TestCom to JSON.\n     * @function toJSON\n     * @memberof shakebook.TestCom\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    TestCom.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    TestCom.SignInResponse = function () {\n      /**\n       * Properties of a SignInResponse.\n       * @memberof shakebook.TestCom\n       * @interface ISignInResponse\n       */\n\n      /**\n       * Constructs a new SignInResponse.\n       * @memberof shakebook.TestCom\n       * @classdesc Represents a SignInResponse.\n       * @implements ISignInResponse\n       * @constructor\n       * @param {shakebook.TestCom.ISignInResponse=} [properties] Properties to set\n       */\n      function SignInResponse(properties) {\n        if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Creates a SignInResponse message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof shakebook.TestCom.SignInResponse\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {shakebook.TestCom.SignInResponse} SignInResponse\n       */\n\n\n      SignInResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.shakebook.TestCom.SignInResponse) return object;\n        return new $root.shakebook.TestCom.SignInResponse();\n      };\n      /**\n       * Creates a plain object from a SignInResponse message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof shakebook.TestCom.SignInResponse\n       * @static\n       * @param {shakebook.TestCom.SignInResponse} message SignInResponse\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      SignInResponse.toObject = function toObject() {\n        return {};\n      };\n      /**\n       * Converts this SignInResponse to JSON.\n       * @function toJSON\n       * @memberof shakebook.TestCom.SignInResponse\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      SignInResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return SignInResponse;\n    }();\n\n    TestCom.AccountId = function () {\n      /**\n       * Properties of an AccountId.\n       * @memberof shakebook.TestCom\n       * @interface IAccountId\n       */\n\n      /**\n       * Constructs a new AccountId.\n       * @memberof shakebook.TestCom\n       * @classdesc Represents an AccountId.\n       * @implements IAccountId\n       * @constructor\n       * @param {shakebook.TestCom.IAccountId=} [properties] Properties to set\n       */\n      function AccountId(properties) {\n        if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Creates an AccountId message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof shakebook.TestCom.AccountId\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {shakebook.TestCom.AccountId} AccountId\n       */\n\n\n      AccountId.fromObject = function fromObject(object) {\n        if (object instanceof $root.shakebook.TestCom.AccountId) return object;\n        return new $root.shakebook.TestCom.AccountId();\n      };\n      /**\n       * Creates a plain object from an AccountId message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof shakebook.TestCom.AccountId\n       * @static\n       * @param {shakebook.TestCom.AccountId} message AccountId\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      AccountId.toObject = function toObject() {\n        return {};\n      };\n      /**\n       * Converts this AccountId to JSON.\n       * @function toJSON\n       * @memberof shakebook.TestCom.AccountId\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      AccountId.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return AccountId;\n    }();\n\n    return TestCom;\n  }();\n  /**\n   * AccountStatus enum.\n   * @name shakebook.AccountStatus\n   * @enum {number}\n   * @property {number} NORMAL=0 NORMAL value\n   * @property {number} DISABLE=1 DISABLE value\n   * @property {number} LOCK=2 LOCK value\n   * @property {number} DELETE=3 DELETE value\n   */\n\n\n  shakebook.AccountStatus = function () {\n    const valuesById = {},\n          values = Object.create(valuesById);\n    values[valuesById[0] = \"NORMAL\"] = 0;\n    values[valuesById[1] = \"DISABLE\"] = 1;\n    values[valuesById[2] = \"LOCK\"] = 2;\n    values[valuesById[3] = \"DELETE\"] = 3;\n    return values;\n  }();\n\n  shakebook.UpdateAccountRequest = function () {\n    /**\n     * Properties of an UpdateAccountRequest.\n     * @memberof shakebook\n     * @interface IUpdateAccountRequest\n     * @property {string|null} [accountName] UpdateAccountRequest accountName\n     * @property {string|null} [accountEmail] UpdateAccountRequest accountEmail\n     * @property {string|null} [accountPhone] UpdateAccountRequest accountPhone\n     * @property {string|null} [imageUrl] UpdateAccountRequest imageUrl\n     * @property {string|null} [backgroundUrl] UpdateAccountRequest backgroundUrl\n     * @property {string|null} [accountDesc] UpdateAccountRequest accountDesc\n     * @property {shakebook.AccountStatus|null} [accountStatus] UpdateAccountRequest accountStatus\n     * @property {string|null} [accountPassword] UpdateAccountRequest accountPassword\n     */\n\n    /**\n     * Constructs a new UpdateAccountRequest.\n     * @memberof shakebook\n     * @classdesc Represents an UpdateAccountRequest.\n     * @implements IUpdateAccountRequest\n     * @constructor\n     * @param {shakebook.IUpdateAccountRequest=} [properties] Properties to set\n     */\n    function UpdateAccountRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * UpdateAccountRequest accountName.\n     * @member {string} accountName\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n\n    UpdateAccountRequest.prototype.accountName = \"\";\n    /**\n     * UpdateAccountRequest accountEmail.\n     * @member {string} accountEmail\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.accountEmail = \"\";\n    /**\n     * UpdateAccountRequest accountPhone.\n     * @member {string} accountPhone\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.accountPhone = \"\";\n    /**\n     * UpdateAccountRequest imageUrl.\n     * @member {string} imageUrl\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.imageUrl = \"\";\n    /**\n     * UpdateAccountRequest backgroundUrl.\n     * @member {string} backgroundUrl\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.backgroundUrl = \"\";\n    /**\n     * UpdateAccountRequest accountDesc.\n     * @member {string} accountDesc\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.accountDesc = \"\";\n    /**\n     * UpdateAccountRequest accountStatus.\n     * @member {shakebook.AccountStatus} accountStatus\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.accountStatus = 0;\n    /**\n     * UpdateAccountRequest accountPassword.\n     * @member {string} accountPassword\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.accountPassword = \"\";\n    /**\n     * Creates an UpdateAccountRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.UpdateAccountRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.UpdateAccountRequest} UpdateAccountRequest\n     */\n\n    UpdateAccountRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.UpdateAccountRequest) return object;\n      let message = new $root.shakebook.UpdateAccountRequest();\n      if (object.accountName != null) message.accountName = String(object.accountName);\n      if (object.accountEmail != null) message.accountEmail = String(object.accountEmail);\n      if (object.accountPhone != null) message.accountPhone = String(object.accountPhone);\n      if (object.imageUrl != null) message.imageUrl = String(object.imageUrl);\n      if (object.backgroundUrl != null) message.backgroundUrl = String(object.backgroundUrl);\n      if (object.accountDesc != null) message.accountDesc = String(object.accountDesc);\n\n      switch (object.accountStatus) {\n        case \"NORMAL\":\n        case 0:\n          message.accountStatus = 0;\n          break;\n\n        case \"DISABLE\":\n        case 1:\n          message.accountStatus = 1;\n          break;\n\n        case \"LOCK\":\n        case 2:\n          message.accountStatus = 2;\n          break;\n\n        case \"DELETE\":\n        case 3:\n          message.accountStatus = 3;\n          break;\n      }\n\n      if (object.accountPassword != null) message.accountPassword = String(object.accountPassword);\n      return message;\n    };\n    /**\n     * Creates a plain object from an UpdateAccountRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.UpdateAccountRequest\n     * @static\n     * @param {shakebook.UpdateAccountRequest} message UpdateAccountRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    UpdateAccountRequest.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.accountName = \"\";\n        object.accountEmail = \"\";\n        object.accountPhone = \"\";\n        object.imageUrl = \"\";\n        object.backgroundUrl = \"\";\n        object.accountDesc = \"\";\n        object.accountStatus = options.enums === String ? \"NORMAL\" : 0;\n        object.accountPassword = \"\";\n      }\n\n      if (message.accountName != null && message.hasOwnProperty(\"accountName\")) object.accountName = message.accountName;\n      if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\")) object.accountEmail = message.accountEmail;\n      if (message.accountPhone != null && message.hasOwnProperty(\"accountPhone\")) object.accountPhone = message.accountPhone;\n      if (message.imageUrl != null && message.hasOwnProperty(\"imageUrl\")) object.imageUrl = message.imageUrl;\n      if (message.backgroundUrl != null && message.hasOwnProperty(\"backgroundUrl\")) object.backgroundUrl = message.backgroundUrl;\n      if (message.accountDesc != null && message.hasOwnProperty(\"accountDesc\")) object.accountDesc = message.accountDesc;\n      if (message.accountStatus != null && message.hasOwnProperty(\"accountStatus\")) object.accountStatus = options.enums === String ? $root.shakebook.AccountStatus[message.accountStatus] : message.accountStatus;\n      if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\")) object.accountPassword = message.accountPassword;\n      return object;\n    };\n    /**\n     * Converts this UpdateAccountRequest to JSON.\n     * @function toJSON\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    UpdateAccountRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UpdateAccountRequest;\n  }();\n\n  shakebook.Account = function () {\n    /**\n     * Properties of an Account.\n     * @memberof shakebook\n     * @interface IAccount\n     * @property {shakebook.IAccountInfo|null} [info] Account info\n     * @property {string|null} [accountPassword] Account accountPassword\n     */\n\n    /**\n     * Constructs a new Account.\n     * @memberof shakebook\n     * @classdesc Represents an Account.\n     * @implements IAccount\n     * @constructor\n     * @param {shakebook.IAccount=} [properties] Properties to set\n     */\n    function Account(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Account info.\n     * @member {shakebook.IAccountInfo|null|undefined} info\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n\n    Account.prototype.info = null;\n    /**\n     * Account accountPassword.\n     * @member {string} accountPassword\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.accountPassword = \"\";\n    /**\n     * Creates an Account message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.Account\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.Account} Account\n     */\n\n    Account.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.Account) return object;\n      let message = new $root.shakebook.Account();\n\n      if (object.info != null) {\n        if (typeof object.info !== \"object\") throw TypeError(\".shakebook.Account.info: object expected\");\n        message.info = $root.shakebook.AccountInfo.fromObject(object.info);\n      }\n\n      if (object.accountPassword != null) message.accountPassword = String(object.accountPassword);\n      return message;\n    };\n    /**\n     * Creates a plain object from an Account message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.Account\n     * @static\n     * @param {shakebook.Account} message Account\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Account.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.info = null;\n        object.accountPassword = \"\";\n      }\n\n      if (message.info != null && message.hasOwnProperty(\"info\")) object.info = $root.shakebook.AccountInfo.toObject(message.info, options);\n      if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\")) object.accountPassword = message.accountPassword;\n      return object;\n    };\n    /**\n     * Converts this Account to JSON.\n     * @function toJSON\n     * @memberof shakebook.Account\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Account.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Account;\n  }();\n\n  shakebook.ValidEmailRequest = function () {\n    /**\n     * Properties of a ValidEmailRequest.\n     * @memberof shakebook\n     * @interface IValidEmailRequest\n     * @property {string|null} [accountEmail] ValidEmailRequest accountEmail\n     */\n\n    /**\n     * Constructs a new ValidEmailRequest.\n     * @memberof shakebook\n     * @classdesc Represents a ValidEmailRequest.\n     * @implements IValidEmailRequest\n     * @constructor\n     * @param {shakebook.IValidEmailRequest=} [properties] Properties to set\n     */\n    function ValidEmailRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * ValidEmailRequest accountEmail.\n     * @member {string} accountEmail\n     * @memberof shakebook.ValidEmailRequest\n     * @instance\n     */\n\n\n    ValidEmailRequest.prototype.accountEmail = \"\";\n    /**\n     * Creates a ValidEmailRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.ValidEmailRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.ValidEmailRequest} ValidEmailRequest\n     */\n\n    ValidEmailRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.ValidEmailRequest) return object;\n      let message = new $root.shakebook.ValidEmailRequest();\n      if (object.accountEmail != null) message.accountEmail = String(object.accountEmail);\n      return message;\n    };\n    /**\n     * Creates a plain object from a ValidEmailRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.ValidEmailRequest\n     * @static\n     * @param {shakebook.ValidEmailRequest} message ValidEmailRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    ValidEmailRequest.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n      if (options.defaults) object.accountEmail = \"\";\n      if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\")) object.accountEmail = message.accountEmail;\n      return object;\n    };\n    /**\n     * Converts this ValidEmailRequest to JSON.\n     * @function toJSON\n     * @memberof shakebook.ValidEmailRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    ValidEmailRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ValidEmailRequest;\n  }();\n\n  shakebook.GetAccountResponse = function () {\n    /**\n     * Properties of a GetAccountResponse.\n     * @memberof shakebook\n     * @interface IGetAccountResponse\n     * @property {shakebook.IResponse|null} [response] GetAccountResponse response\n     * @property {shakebook.IAccountInfo|null} [data] GetAccountResponse data\n     */\n\n    /**\n     * Constructs a new GetAccountResponse.\n     * @memberof shakebook\n     * @classdesc Represents a GetAccountResponse.\n     * @implements IGetAccountResponse\n     * @constructor\n     * @param {shakebook.IGetAccountResponse=} [properties] Properties to set\n     */\n    function GetAccountResponse(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * GetAccountResponse response.\n     * @member {shakebook.IResponse|null|undefined} response\n     * @memberof shakebook.GetAccountResponse\n     * @instance\n     */\n\n\n    GetAccountResponse.prototype.response = null;\n    /**\n     * GetAccountResponse data.\n     * @member {shakebook.IAccountInfo|null|undefined} data\n     * @memberof shakebook.GetAccountResponse\n     * @instance\n     */\n\n    GetAccountResponse.prototype.data = null;\n    /**\n     * Creates a GetAccountResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.GetAccountResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.GetAccountResponse} GetAccountResponse\n     */\n\n    GetAccountResponse.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.GetAccountResponse) return object;\n      let message = new $root.shakebook.GetAccountResponse();\n\n      if (object.response != null) {\n        if (typeof object.response !== \"object\") throw TypeError(\".shakebook.GetAccountResponse.response: object expected\");\n        message.response = $root.shakebook.Response.fromObject(object.response);\n      }\n\n      if (object.data != null) {\n        if (typeof object.data !== \"object\") throw TypeError(\".shakebook.GetAccountResponse.data: object expected\");\n        message.data = $root.shakebook.AccountInfo.fromObject(object.data);\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a GetAccountResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.GetAccountResponse\n     * @static\n     * @param {shakebook.GetAccountResponse} message GetAccountResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    GetAccountResponse.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.response = null;\n        object.data = null;\n      }\n\n      if (message.response != null && message.hasOwnProperty(\"response\")) object.response = $root.shakebook.Response.toObject(message.response, options);\n      if (message.data != null && message.hasOwnProperty(\"data\")) object.data = $root.shakebook.AccountInfo.toObject(message.data, options);\n      return object;\n    };\n    /**\n     * Converts this GetAccountResponse to JSON.\n     * @function toJSON\n     * @memberof shakebook.GetAccountResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    GetAccountResponse.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return GetAccountResponse;\n  }();\n\n  shakebook.AccountInfo = function () {\n    /**\n     * Properties of an AccountInfo.\n     * @memberof shakebook\n     * @interface IAccountInfo\n     * @property {number|null} [id] AccountInfo id\n     * @property {string|null} [accountName] AccountInfo accountName\n     * @property {string|null} [accountPhone] AccountInfo accountPhone\n     * @property {string|null} [accountEmail] AccountInfo accountEmail\n     * @property {string|null} [signupAt] AccountInfo signupAt\n     * @property {string|null} [lastTime] AccountInfo lastTime\n     * @property {shakebook.AccountStatus|null} [accountStatus] AccountInfo accountStatus\n     * @property {string|null} [imageUrl] AccountInfo imageUrl\n     * @property {string|null} [backgroundUrl] AccountInfo backgroundUrl\n     * @property {string|null} [accountDesc] AccountInfo accountDesc\n     * @property {number|null} [thumbsUp] AccountInfo thumbsUp\n     * @property {number|null} [focusNumber] AccountInfo focusNumber\n     * @property {number|null} [fansNumber] AccountInfo fansNumber\n     */\n\n    /**\n     * Constructs a new AccountInfo.\n     * @memberof shakebook\n     * @classdesc Represents an AccountInfo.\n     * @implements IAccountInfo\n     * @constructor\n     * @param {shakebook.IAccountInfo=} [properties] Properties to set\n     */\n    function AccountInfo(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * AccountInfo id.\n     * @member {number} id\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n\n    AccountInfo.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * AccountInfo accountName.\n     * @member {string} accountName\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.accountName = \"\";\n    /**\n     * AccountInfo accountPhone.\n     * @member {string} accountPhone\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.accountPhone = \"\";\n    /**\n     * AccountInfo accountEmail.\n     * @member {string} accountEmail\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.accountEmail = \"\";\n    /**\n     * AccountInfo signupAt.\n     * @member {string} signupAt\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.signupAt = \"\";\n    /**\n     * AccountInfo lastTime.\n     * @member {string} lastTime\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.lastTime = \"\";\n    /**\n     * AccountInfo accountStatus.\n     * @member {shakebook.AccountStatus} accountStatus\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.accountStatus = 0;\n    /**\n     * AccountInfo imageUrl.\n     * @member {string} imageUrl\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.imageUrl = \"\";\n    /**\n     * AccountInfo backgroundUrl.\n     * @member {string} backgroundUrl\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.backgroundUrl = \"\";\n    /**\n     * AccountInfo accountDesc.\n     * @member {string} accountDesc\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.accountDesc = \"\";\n    /**\n     * AccountInfo thumbsUp.\n     * @member {number} thumbsUp\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.thumbsUp = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * AccountInfo focusNumber.\n     * @member {number} focusNumber\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.focusNumber = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * AccountInfo fansNumber.\n     * @member {number} fansNumber\n     * @memberof shakebook.AccountInfo\n     * @instance\n     */\n\n    AccountInfo.prototype.fansNumber = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * Creates an AccountInfo message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.AccountInfo\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.AccountInfo} AccountInfo\n     */\n\n    AccountInfo.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.AccountInfo) return object;\n      let message = new $root.shakebook.AccountInfo();\n      if (object.id != null) if ($util.Long) (message.id = $util.Long.fromValue(object.id)).unsigned = false;else if (typeof object.id === \"string\") message.id = parseInt(object.id, 10);else if (typeof object.id === \"number\") message.id = object.id;else if (typeof object.id === \"object\") message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();\n      if (object.accountName != null) message.accountName = String(object.accountName);\n      if (object.accountPhone != null) message.accountPhone = String(object.accountPhone);\n      if (object.accountEmail != null) message.accountEmail = String(object.accountEmail);\n      if (object.signupAt != null) message.signupAt = String(object.signupAt);\n      if (object.lastTime != null) message.lastTime = String(object.lastTime);\n\n      switch (object.accountStatus) {\n        case \"NORMAL\":\n        case 0:\n          message.accountStatus = 0;\n          break;\n\n        case \"DISABLE\":\n        case 1:\n          message.accountStatus = 1;\n          break;\n\n        case \"LOCK\":\n        case 2:\n          message.accountStatus = 2;\n          break;\n\n        case \"DELETE\":\n        case 3:\n          message.accountStatus = 3;\n          break;\n      }\n\n      if (object.imageUrl != null) message.imageUrl = String(object.imageUrl);\n      if (object.backgroundUrl != null) message.backgroundUrl = String(object.backgroundUrl);\n      if (object.accountDesc != null) message.accountDesc = String(object.accountDesc);\n      if (object.thumbsUp != null) if ($util.Long) (message.thumbsUp = $util.Long.fromValue(object.thumbsUp)).unsigned = false;else if (typeof object.thumbsUp === \"string\") message.thumbsUp = parseInt(object.thumbsUp, 10);else if (typeof object.thumbsUp === \"number\") message.thumbsUp = object.thumbsUp;else if (typeof object.thumbsUp === \"object\") message.thumbsUp = new $util.LongBits(object.thumbsUp.low >>> 0, object.thumbsUp.high >>> 0).toNumber();\n      if (object.focusNumber != null) if ($util.Long) (message.focusNumber = $util.Long.fromValue(object.focusNumber)).unsigned = false;else if (typeof object.focusNumber === \"string\") message.focusNumber = parseInt(object.focusNumber, 10);else if (typeof object.focusNumber === \"number\") message.focusNumber = object.focusNumber;else if (typeof object.focusNumber === \"object\") message.focusNumber = new $util.LongBits(object.focusNumber.low >>> 0, object.focusNumber.high >>> 0).toNumber();\n      if (object.fansNumber != null) if ($util.Long) (message.fansNumber = $util.Long.fromValue(object.fansNumber)).unsigned = false;else if (typeof object.fansNumber === \"string\") message.fansNumber = parseInt(object.fansNumber, 10);else if (typeof object.fansNumber === \"number\") message.fansNumber = object.fansNumber;else if (typeof object.fansNumber === \"object\") message.fansNumber = new $util.LongBits(object.fansNumber.low >>> 0, object.fansNumber.high >>> 0).toNumber();\n      return message;\n    };\n    /**\n     * Creates a plain object from an AccountInfo message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.AccountInfo\n     * @static\n     * @param {shakebook.AccountInfo} message AccountInfo\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    AccountInfo.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        if ($util.Long) {\n          let long = new $util.Long(0, 0, false);\n          object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.id = options.longs === String ? \"0\" : 0;\n\n        object.accountName = \"\";\n        object.accountPhone = \"\";\n        object.accountEmail = \"\";\n        object.signupAt = \"\";\n        object.lastTime = \"\";\n        object.accountStatus = options.enums === String ? \"NORMAL\" : 0;\n        object.imageUrl = \"\";\n        object.backgroundUrl = \"\";\n        object.accountDesc = \"\";\n\n        if ($util.Long) {\n          let long = new $util.Long(0, 0, false);\n          object.thumbsUp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.thumbsUp = options.longs === String ? \"0\" : 0;\n\n        if ($util.Long) {\n          let long = new $util.Long(0, 0, false);\n          object.focusNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.focusNumber = options.longs === String ? \"0\" : 0;\n\n        if ($util.Long) {\n          let long = new $util.Long(0, 0, false);\n          object.fansNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.fansNumber = options.longs === String ? \"0\" : 0;\n      }\n\n      if (message.id != null && message.hasOwnProperty(\"id\")) if (typeof message.id === \"number\") object.id = options.longs === String ? String(message.id) : message.id;else object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;\n      if (message.accountName != null && message.hasOwnProperty(\"accountName\")) object.accountName = message.accountName;\n      if (message.accountPhone != null && message.hasOwnProperty(\"accountPhone\")) object.accountPhone = message.accountPhone;\n      if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\")) object.accountEmail = message.accountEmail;\n      if (message.signupAt != null && message.hasOwnProperty(\"signupAt\")) object.signupAt = message.signupAt;\n      if (message.lastTime != null && message.hasOwnProperty(\"lastTime\")) object.lastTime = message.lastTime;\n      if (message.accountStatus != null && message.hasOwnProperty(\"accountStatus\")) object.accountStatus = options.enums === String ? $root.shakebook.AccountStatus[message.accountStatus] : message.accountStatus;\n      if (message.imageUrl != null && message.hasOwnProperty(\"imageUrl\")) object.imageUrl = message.imageUrl;\n      if (message.backgroundUrl != null && message.hasOwnProperty(\"backgroundUrl\")) object.backgroundUrl = message.backgroundUrl;\n      if (message.accountDesc != null && message.hasOwnProperty(\"accountDesc\")) object.accountDesc = message.accountDesc;\n      if (message.thumbsUp != null && message.hasOwnProperty(\"thumbsUp\")) if (typeof message.thumbsUp === \"number\") object.thumbsUp = options.longs === String ? String(message.thumbsUp) : message.thumbsUp;else object.thumbsUp = options.longs === String ? $util.Long.prototype.toString.call(message.thumbsUp) : options.longs === Number ? new $util.LongBits(message.thumbsUp.low >>> 0, message.thumbsUp.high >>> 0).toNumber() : message.thumbsUp;\n      if (message.focusNumber != null && message.hasOwnProperty(\"focusNumber\")) if (typeof message.focusNumber === \"number\") object.focusNumber = options.longs === String ? String(message.focusNumber) : message.focusNumber;else object.focusNumber = options.longs === String ? $util.Long.prototype.toString.call(message.focusNumber) : options.longs === Number ? new $util.LongBits(message.focusNumber.low >>> 0, message.focusNumber.high >>> 0).toNumber() : message.focusNumber;\n      if (message.fansNumber != null && message.hasOwnProperty(\"fansNumber\")) if (typeof message.fansNumber === \"number\") object.fansNumber = options.longs === String ? String(message.fansNumber) : message.fansNumber;else object.fansNumber = options.longs === String ? $util.Long.prototype.toString.call(message.fansNumber) : options.longs === Number ? new $util.LongBits(message.fansNumber.low >>> 0, message.fansNumber.high >>> 0).toNumber() : message.fansNumber;\n      return object;\n    };\n    /**\n     * Converts this AccountInfo to JSON.\n     * @function toJSON\n     * @memberof shakebook.AccountInfo\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    AccountInfo.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AccountInfo;\n  }();\n\n  shakebook.AccountService = function () {\n    /**\n     * Constructs a new AccountService service.\n     * @memberof shakebook\n     * @classdesc Represents an AccountService\n     * @extends $protobuf.rpc.Service\n     * @constructor\n     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n     */\n    function AccountService(rpcImpl, requestDelimited, responseDelimited) {\n      $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n    }\n\n    (AccountService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = AccountService;\n    /**\n     * Callback as used by {@link shakebook.AccountService#signUp}.\n     * @memberof shakebook.AccountService\n     * @typedef SignUpCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.Response} [response] Response\n     */\n\n    /**\n     * Calls SignUp.\n     * @function signUp\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.ISignUpRequest} request SignUpRequest message or plain object\n     * @param {shakebook.AccountService.SignUpCallback} callback Node-style callback called with the error, if any, and Response\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.signUp = function signUp(request, callback) {\n      return this.rpcCall(signUp, $root.shakebook.SignUpRequest, $root.shakebook.Response, request, callback);\n    }, \"name\", {\n      value: \"SignUp\"\n    });\n    /**\n     * Calls SignUp.\n     * @function signUp\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.ISignUpRequest} request SignUpRequest message or plain object\n     * @returns {Promise<shakebook.Response>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link shakebook.AccountService#signIn}.\n     * @memberof shakebook.AccountService\n     * @typedef SignInCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.SignInResponse} [response] SignInResponse\n     */\n\n    /**\n     * Calls SignIn.\n     * @function signIn\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.ISignInRequest} request SignInRequest message or plain object\n     * @param {shakebook.AccountService.SignInCallback} callback Node-style callback called with the error, if any, and SignInResponse\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.signIn = function signIn(request, callback) {\n      return this.rpcCall(signIn, $root.shakebook.SignInRequest, $root.shakebook.SignInResponse, request, callback);\n    }, \"name\", {\n      value: \"SignIn\"\n    });\n    /**\n     * Calls SignIn.\n     * @function signIn\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.ISignInRequest} request SignInRequest message or plain object\n     * @returns {Promise<shakebook.SignInResponse>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link shakebook.AccountService#signOut}.\n     * @memberof shakebook.AccountService\n     * @typedef SignOutCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.Response} [response] Response\n     */\n\n    /**\n     * Calls SignOut.\n     * @function signOut\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IAccountId} request AccountId message or plain object\n     * @param {shakebook.AccountService.SignOutCallback} callback Node-style callback called with the error, if any, and Response\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.signOut = function signOut(request, callback) {\n      return this.rpcCall(signOut, $root.shakebook.AccountId, $root.shakebook.Response, request, callback);\n    }, \"name\", {\n      value: \"SignOut\"\n    });\n    /**\n     * Calls SignOut.\n     * @function signOut\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IAccountId} request AccountId message or plain object\n     * @returns {Promise<shakebook.Response>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link shakebook.AccountService#validEmail}.\n     * @memberof shakebook.AccountService\n     * @typedef ValidEmailCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.Response} [response] Response\n     */\n\n    /**\n     * Calls ValidEmail.\n     * @function validEmail\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IValidEmailRequest} request ValidEmailRequest message or plain object\n     * @param {shakebook.AccountService.ValidEmailCallback} callback Node-style callback called with the error, if any, and Response\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.validEmail = function validEmail(request, callback) {\n      return this.rpcCall(validEmail, $root.shakebook.ValidEmailRequest, $root.shakebook.Response, request, callback);\n    }, \"name\", {\n      value: \"ValidEmail\"\n    });\n    /**\n     * Calls ValidEmail.\n     * @function validEmail\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IValidEmailRequest} request ValidEmailRequest message or plain object\n     * @returns {Promise<shakebook.Response>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link shakebook.AccountService#updateAccount}.\n     * @memberof shakebook.AccountService\n     * @typedef UpdateAccountCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.Response} [response] Response\n     */\n\n    /**\n     * Calls UpdateAccount.\n     * @function updateAccount\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IUpdateAccountRequest} request UpdateAccountRequest message or plain object\n     * @param {shakebook.AccountService.UpdateAccountCallback} callback Node-style callback called with the error, if any, and Response\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.updateAccount = function updateAccount(request, callback) {\n      return this.rpcCall(updateAccount, $root.shakebook.UpdateAccountRequest, $root.shakebook.Response, request, callback);\n    }, \"name\", {\n      value: \"UpdateAccount\"\n    });\n    /**\n     * Calls UpdateAccount.\n     * @function updateAccount\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IUpdateAccountRequest} request UpdateAccountRequest message or plain object\n     * @returns {Promise<shakebook.Response>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link shakebook.AccountService#getAccount}.\n     * @memberof shakebook.AccountService\n     * @typedef GetAccountCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.GetAccountResponse} [response] GetAccountResponse\n     */\n\n    /**\n     * Calls GetAccount.\n     * @function getAccount\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IEmptyRequest} request EmptyRequest message or plain object\n     * @param {shakebook.AccountService.GetAccountCallback} callback Node-style callback called with the error, if any, and GetAccountResponse\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.getAccount = function getAccount(request, callback) {\n      return this.rpcCall(getAccount, $root.shakebook.EmptyRequest, $root.shakebook.GetAccountResponse, request, callback);\n    }, \"name\", {\n      value: \"GetAccount\"\n    });\n    /**\n     * Calls GetAccount.\n     * @function getAccount\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IEmptyRequest} request EmptyRequest message or plain object\n     * @returns {Promise<shakebook.GetAccountResponse>} Promise\n     * @variation 2\n     */\n\n    return AccountService;\n  }();\n\n  return shakebook;\n})();","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/src/service/api/v1/account_pb.js"],"names":["$protobuf","$util","util","$root","roots","shakebook","Response","properties","keys","Object","i","length","prototype","success","message","fromObject","object","Boolean","String","toObject","options","defaults","hasOwnProperty","toJSON","constructor","toJSONOptions","EmptyRequest","SignUpRequest","accountName","accountEmail","accountPassword","emailValidCode","AccountId","id","Long","fromBits","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","long","longs","toString","Number","call","SignInRequest","SignInResponse","response","data","TypeError","TestCom","AccountStatus","valuesById","values","create","UpdateAccountRequest","accountPhone","imageUrl","backgroundUrl","accountDesc","accountStatus","enums","Account","info","AccountInfo","ValidEmailRequest","GetAccountResponse","signupAt","lastTime","thumbsUp","focusNumber","fansNumber","AccountService","rpcImpl","requestDelimited","responseDelimited","rpc","Service","defineProperty","signUp","request","callback","rpcCall","value","signIn","signOut","validEmail","updateAccount","getAccount"],"mappings":"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","sourcesContent":["import * as $protobuf from \"protobufjs\";\n\n// Common aliases\nconst $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const shakebook = $root.shakebook = (() => {\n\n    /**\n     * Namespace shakebook.\n     * @exports shakebook\n     * @namespace\n     */\n    const shakebook = {};\n\n    shakebook.Response = (function() {\n\n        /**\n         * Properties of a Response.\n         * @memberof shakebook\n         * @interface IResponse\n         * @property {boolean|null} [success] Response success\n         * @property {string|null} [message] Response message\n         */\n\n        /**\n         * Constructs a new Response.\n         * @memberof shakebook\n         * @classdesc Represents a Response.\n         * @implements IResponse\n         * @constructor\n         * @param {shakebook.IResponse=} [properties] Properties to set\n         */\n        function Response(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Response success.\n         * @member {boolean} success\n         * @memberof shakebook.Response\n         * @instance\n         */\n        Response.prototype.success = false;\n\n        /**\n         * Response message.\n         * @member {string} message\n         * @memberof shakebook.Response\n         * @instance\n         */\n        Response.prototype.message = \"\";\n\n        /**\n         * Creates a Response message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.Response\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.Response} Response\n         */\n        Response.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.Response)\n                return object;\n            let message = new $root.shakebook.Response();\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            if (object.message != null)\n                message.message = String(object.message);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Response message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.Response\n         * @static\n         * @param {shakebook.Response} message Response\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Response.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.success = false;\n                object.message = \"\";\n            }\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            return object;\n        };\n\n        /**\n         * Converts this Response to JSON.\n         * @function toJSON\n         * @memberof shakebook.Response\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Response.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Response;\n    })();\n\n    shakebook.EmptyRequest = (function() {\n\n        /**\n         * Properties of an EmptyRequest.\n         * @memberof shakebook\n         * @interface IEmptyRequest\n         */\n\n        /**\n         * Constructs a new EmptyRequest.\n         * @memberof shakebook\n         * @classdesc Represents an EmptyRequest.\n         * @implements IEmptyRequest\n         * @constructor\n         * @param {shakebook.IEmptyRequest=} [properties] Properties to set\n         */\n        function EmptyRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates an EmptyRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.EmptyRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.EmptyRequest} EmptyRequest\n         */\n        EmptyRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.EmptyRequest)\n                return object;\n            return new $root.shakebook.EmptyRequest();\n        };\n\n        /**\n         * Creates a plain object from an EmptyRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.EmptyRequest\n         * @static\n         * @param {shakebook.EmptyRequest} message EmptyRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EmptyRequest.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this EmptyRequest to JSON.\n         * @function toJSON\n         * @memberof shakebook.EmptyRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EmptyRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return EmptyRequest;\n    })();\n\n    shakebook.SignUpRequest = (function() {\n\n        /**\n         * Properties of a SignUpRequest.\n         * @memberof shakebook\n         * @interface ISignUpRequest\n         * @property {string|null} [accountName] SignUpRequest accountName\n         * @property {string|null} [accountEmail] SignUpRequest accountEmail\n         * @property {string|null} [accountPassword] SignUpRequest accountPassword\n         * @property {string|null} [emailValidCode] SignUpRequest emailValidCode\n         */\n\n        /**\n         * Constructs a new SignUpRequest.\n         * @memberof shakebook\n         * @classdesc Represents a SignUpRequest.\n         * @implements ISignUpRequest\n         * @constructor\n         * @param {shakebook.ISignUpRequest=} [properties] Properties to set\n         */\n        function SignUpRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SignUpRequest accountName.\n         * @member {string} accountName\n         * @memberof shakebook.SignUpRequest\n         * @instance\n         */\n        SignUpRequest.prototype.accountName = \"\";\n\n        /**\n         * SignUpRequest accountEmail.\n         * @member {string} accountEmail\n         * @memberof shakebook.SignUpRequest\n         * @instance\n         */\n        SignUpRequest.prototype.accountEmail = \"\";\n\n        /**\n         * SignUpRequest accountPassword.\n         * @member {string} accountPassword\n         * @memberof shakebook.SignUpRequest\n         * @instance\n         */\n        SignUpRequest.prototype.accountPassword = \"\";\n\n        /**\n         * SignUpRequest emailValidCode.\n         * @member {string} emailValidCode\n         * @memberof shakebook.SignUpRequest\n         * @instance\n         */\n        SignUpRequest.prototype.emailValidCode = \"\";\n\n        /**\n         * Creates a SignUpRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.SignUpRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.SignUpRequest} SignUpRequest\n         */\n        SignUpRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.SignUpRequest)\n                return object;\n            let message = new $root.shakebook.SignUpRequest();\n            if (object.accountName != null)\n                message.accountName = String(object.accountName);\n            if (object.accountEmail != null)\n                message.accountEmail = String(object.accountEmail);\n            if (object.accountPassword != null)\n                message.accountPassword = String(object.accountPassword);\n            if (object.emailValidCode != null)\n                message.emailValidCode = String(object.emailValidCode);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SignUpRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.SignUpRequest\n         * @static\n         * @param {shakebook.SignUpRequest} message SignUpRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SignUpRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.accountName = \"\";\n                object.accountEmail = \"\";\n                object.accountPassword = \"\";\n                object.emailValidCode = \"\";\n            }\n            if (message.accountName != null && message.hasOwnProperty(\"accountName\"))\n                object.accountName = message.accountName;\n            if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\"))\n                object.accountEmail = message.accountEmail;\n            if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\"))\n                object.accountPassword = message.accountPassword;\n            if (message.emailValidCode != null && message.hasOwnProperty(\"emailValidCode\"))\n                object.emailValidCode = message.emailValidCode;\n            return object;\n        };\n\n        /**\n         * Converts this SignUpRequest to JSON.\n         * @function toJSON\n         * @memberof shakebook.SignUpRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SignUpRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SignUpRequest;\n    })();\n\n    shakebook.AccountId = (function() {\n\n        /**\n         * Properties of an AccountId.\n         * @memberof shakebook\n         * @interface IAccountId\n         * @property {number|null} [id] AccountId id\n         */\n\n        /**\n         * Constructs a new AccountId.\n         * @memberof shakebook\n         * @classdesc Represents an AccountId.\n         * @implements IAccountId\n         * @constructor\n         * @param {shakebook.IAccountId=} [properties] Properties to set\n         */\n        function AccountId(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AccountId id.\n         * @member {number} id\n         * @memberof shakebook.AccountId\n         * @instance\n         */\n        AccountId.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates an AccountId message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.AccountId\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.AccountId} AccountId\n         */\n        AccountId.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.AccountId)\n                return object;\n            let message = new $root.shakebook.AccountId();\n            if (object.id != null)\n                if ($util.Long)\n                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;\n                else if (typeof object.id === \"string\")\n                    message.id = parseInt(object.id, 10);\n                else if (typeof object.id === \"number\")\n                    message.id = object.id;\n                else if (typeof object.id === \"object\")\n                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AccountId message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.AccountId\n         * @static\n         * @param {shakebook.AccountId} message AccountId\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AccountId.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.id = options.longs === String ? \"0\" : 0;\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (typeof message.id === \"number\")\n                    object.id = options.longs === String ? String(message.id) : message.id;\n                else\n                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;\n            return object;\n        };\n\n        /**\n         * Converts this AccountId to JSON.\n         * @function toJSON\n         * @memberof shakebook.AccountId\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AccountId.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AccountId;\n    })();\n\n    shakebook.SignInRequest = (function() {\n\n        /**\n         * Properties of a SignInRequest.\n         * @memberof shakebook\n         * @interface ISignInRequest\n         * @property {string|null} [accountName] SignInRequest accountName\n         * @property {string|null} [accountPassword] SignInRequest accountPassword\n         */\n\n        /**\n         * Constructs a new SignInRequest.\n         * @memberof shakebook\n         * @classdesc Represents a SignInRequest.\n         * @implements ISignInRequest\n         * @constructor\n         * @param {shakebook.ISignInRequest=} [properties] Properties to set\n         */\n        function SignInRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SignInRequest accountName.\n         * @member {string} accountName\n         * @memberof shakebook.SignInRequest\n         * @instance\n         */\n        SignInRequest.prototype.accountName = \"\";\n\n        /**\n         * SignInRequest accountPassword.\n         * @member {string} accountPassword\n         * @memberof shakebook.SignInRequest\n         * @instance\n         */\n        SignInRequest.prototype.accountPassword = \"\";\n\n        /**\n         * Creates a SignInRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.SignInRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.SignInRequest} SignInRequest\n         */\n        SignInRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.SignInRequest)\n                return object;\n            let message = new $root.shakebook.SignInRequest();\n            if (object.accountName != null)\n                message.accountName = String(object.accountName);\n            if (object.accountPassword != null)\n                message.accountPassword = String(object.accountPassword);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SignInRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.SignInRequest\n         * @static\n         * @param {shakebook.SignInRequest} message SignInRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SignInRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.accountName = \"\";\n                object.accountPassword = \"\";\n            }\n            if (message.accountName != null && message.hasOwnProperty(\"accountName\"))\n                object.accountName = message.accountName;\n            if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\"))\n                object.accountPassword = message.accountPassword;\n            return object;\n        };\n\n        /**\n         * Converts this SignInRequest to JSON.\n         * @function toJSON\n         * @memberof shakebook.SignInRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SignInRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SignInRequest;\n    })();\n\n    shakebook.SignInResponse = (function() {\n\n        /**\n         * Properties of a SignInResponse.\n         * @memberof shakebook\n         * @interface ISignInResponse\n         * @property {shakebook.IResponse|null} [response] SignInResponse response\n         * @property {string|null} [data] SignInResponse data\n         */\n\n        /**\n         * Constructs a new SignInResponse.\n         * @memberof shakebook\n         * @classdesc Represents a SignInResponse.\n         * @implements ISignInResponse\n         * @constructor\n         * @param {shakebook.ISignInResponse=} [properties] Properties to set\n         */\n        function SignInResponse(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SignInResponse response.\n         * @member {shakebook.IResponse|null|undefined} response\n         * @memberof shakebook.SignInResponse\n         * @instance\n         */\n        SignInResponse.prototype.response = null;\n\n        /**\n         * SignInResponse data.\n         * @member {string} data\n         * @memberof shakebook.SignInResponse\n         * @instance\n         */\n        SignInResponse.prototype.data = \"\";\n\n        /**\n         * Creates a SignInResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.SignInResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.SignInResponse} SignInResponse\n         */\n        SignInResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.SignInResponse)\n                return object;\n            let message = new $root.shakebook.SignInResponse();\n            if (object.response != null) {\n                if (typeof object.response !== \"object\")\n                    throw TypeError(\".shakebook.SignInResponse.response: object expected\");\n                message.response = $root.shakebook.Response.fromObject(object.response);\n            }\n            if (object.data != null)\n                message.data = String(object.data);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SignInResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.SignInResponse\n         * @static\n         * @param {shakebook.SignInResponse} message SignInResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SignInResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.response = null;\n                object.data = \"\";\n            }\n            if (message.response != null && message.hasOwnProperty(\"response\"))\n                object.response = $root.shakebook.Response.toObject(message.response, options);\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                object.data = message.data;\n            return object;\n        };\n\n        /**\n         * Converts this SignInResponse to JSON.\n         * @function toJSON\n         * @memberof shakebook.SignInResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SignInResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SignInResponse;\n    })();\n\n    shakebook.TestCom = (function() {\n\n        /**\n         * Properties of a TestCom.\n         * @memberof shakebook\n         * @interface ITestCom\n         */\n\n        /**\n         * Constructs a new TestCom.\n         * @memberof shakebook\n         * @classdesc Represents a TestCom.\n         * @implements ITestCom\n         * @constructor\n         * @param {shakebook.ITestCom=} [properties] Properties to set\n         */\n        function TestCom(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a TestCom message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.TestCom\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.TestCom} TestCom\n         */\n        TestCom.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.TestCom)\n                return object;\n            return new $root.shakebook.TestCom();\n        };\n\n        /**\n         * Creates a plain object from a TestCom message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.TestCom\n         * @static\n         * @param {shakebook.TestCom} message TestCom\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TestCom.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this TestCom to JSON.\n         * @function toJSON\n         * @memberof shakebook.TestCom\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TestCom.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TestCom.SignInResponse = (function() {\n\n            /**\n             * Properties of a SignInResponse.\n             * @memberof shakebook.TestCom\n             * @interface ISignInResponse\n             */\n\n            /**\n             * Constructs a new SignInResponse.\n             * @memberof shakebook.TestCom\n             * @classdesc Represents a SignInResponse.\n             * @implements ISignInResponse\n             * @constructor\n             * @param {shakebook.TestCom.ISignInResponse=} [properties] Properties to set\n             */\n            function SignInResponse(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Creates a SignInResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof shakebook.TestCom.SignInResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {shakebook.TestCom.SignInResponse} SignInResponse\n             */\n            SignInResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.shakebook.TestCom.SignInResponse)\n                    return object;\n                return new $root.shakebook.TestCom.SignInResponse();\n            };\n\n            /**\n             * Creates a plain object from a SignInResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof shakebook.TestCom.SignInResponse\n             * @static\n             * @param {shakebook.TestCom.SignInResponse} message SignInResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SignInResponse.toObject = function toObject() {\n                return {};\n            };\n\n            /**\n             * Converts this SignInResponse to JSON.\n             * @function toJSON\n             * @memberof shakebook.TestCom.SignInResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SignInResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SignInResponse;\n        })();\n\n        TestCom.AccountId = (function() {\n\n            /**\n             * Properties of an AccountId.\n             * @memberof shakebook.TestCom\n             * @interface IAccountId\n             */\n\n            /**\n             * Constructs a new AccountId.\n             * @memberof shakebook.TestCom\n             * @classdesc Represents an AccountId.\n             * @implements IAccountId\n             * @constructor\n             * @param {shakebook.TestCom.IAccountId=} [properties] Properties to set\n             */\n            function AccountId(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Creates an AccountId message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof shakebook.TestCom.AccountId\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {shakebook.TestCom.AccountId} AccountId\n             */\n            AccountId.fromObject = function fromObject(object) {\n                if (object instanceof $root.shakebook.TestCom.AccountId)\n                    return object;\n                return new $root.shakebook.TestCom.AccountId();\n            };\n\n            /**\n             * Creates a plain object from an AccountId message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof shakebook.TestCom.AccountId\n             * @static\n             * @param {shakebook.TestCom.AccountId} message AccountId\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            AccountId.toObject = function toObject() {\n                return {};\n            };\n\n            /**\n             * Converts this AccountId to JSON.\n             * @function toJSON\n             * @memberof shakebook.TestCom.AccountId\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            AccountId.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return AccountId;\n        })();\n\n        return TestCom;\n    })();\n\n    /**\n     * AccountStatus enum.\n     * @name shakebook.AccountStatus\n     * @enum {number}\n     * @property {number} NORMAL=0 NORMAL value\n     * @property {number} DISABLE=1 DISABLE value\n     * @property {number} LOCK=2 LOCK value\n     * @property {number} DELETE=3 DELETE value\n     */\n    shakebook.AccountStatus = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NORMAL\"] = 0;\n        values[valuesById[1] = \"DISABLE\"] = 1;\n        values[valuesById[2] = \"LOCK\"] = 2;\n        values[valuesById[3] = \"DELETE\"] = 3;\n        return values;\n    })();\n\n    shakebook.UpdateAccountRequest = (function() {\n\n        /**\n         * Properties of an UpdateAccountRequest.\n         * @memberof shakebook\n         * @interface IUpdateAccountRequest\n         * @property {string|null} [accountName] UpdateAccountRequest accountName\n         * @property {string|null} [accountEmail] UpdateAccountRequest accountEmail\n         * @property {string|null} [accountPhone] UpdateAccountRequest accountPhone\n         * @property {string|null} [imageUrl] UpdateAccountRequest imageUrl\n         * @property {string|null} [backgroundUrl] UpdateAccountRequest backgroundUrl\n         * @property {string|null} [accountDesc] UpdateAccountRequest accountDesc\n         * @property {shakebook.AccountStatus|null} [accountStatus] UpdateAccountRequest accountStatus\n         * @property {string|null} [accountPassword] UpdateAccountRequest accountPassword\n         */\n\n        /**\n         * Constructs a new UpdateAccountRequest.\n         * @memberof shakebook\n         * @classdesc Represents an UpdateAccountRequest.\n         * @implements IUpdateAccountRequest\n         * @constructor\n         * @param {shakebook.IUpdateAccountRequest=} [properties] Properties to set\n         */\n        function UpdateAccountRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * UpdateAccountRequest accountName.\n         * @member {string} accountName\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountName = \"\";\n\n        /**\n         * UpdateAccountRequest accountEmail.\n         * @member {string} accountEmail\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountEmail = \"\";\n\n        /**\n         * UpdateAccountRequest accountPhone.\n         * @member {string} accountPhone\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountPhone = \"\";\n\n        /**\n         * UpdateAccountRequest imageUrl.\n         * @member {string} imageUrl\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.imageUrl = \"\";\n\n        /**\n         * UpdateAccountRequest backgroundUrl.\n         * @member {string} backgroundUrl\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.backgroundUrl = \"\";\n\n        /**\n         * UpdateAccountRequest accountDesc.\n         * @member {string} accountDesc\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountDesc = \"\";\n\n        /**\n         * UpdateAccountRequest accountStatus.\n         * @member {shakebook.AccountStatus} accountStatus\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountStatus = 0;\n\n        /**\n         * UpdateAccountRequest accountPassword.\n         * @member {string} accountPassword\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountPassword = \"\";\n\n        /**\n         * Creates an UpdateAccountRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.UpdateAccountRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.UpdateAccountRequest} UpdateAccountRequest\n         */\n        UpdateAccountRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.UpdateAccountRequest)\n                return object;\n            let message = new $root.shakebook.UpdateAccountRequest();\n            if (object.accountName != null)\n                message.accountName = String(object.accountName);\n            if (object.accountEmail != null)\n                message.accountEmail = String(object.accountEmail);\n            if (object.accountPhone != null)\n                message.accountPhone = String(object.accountPhone);\n            if (object.imageUrl != null)\n                message.imageUrl = String(object.imageUrl);\n            if (object.backgroundUrl != null)\n                message.backgroundUrl = String(object.backgroundUrl);\n            if (object.accountDesc != null)\n                message.accountDesc = String(object.accountDesc);\n            switch (object.accountStatus) {\n            case \"NORMAL\":\n            case 0:\n                message.accountStatus = 0;\n                break;\n            case \"DISABLE\":\n            case 1:\n                message.accountStatus = 1;\n                break;\n            case \"LOCK\":\n            case 2:\n                message.accountStatus = 2;\n                break;\n            case \"DELETE\":\n            case 3:\n                message.accountStatus = 3;\n                break;\n            }\n            if (object.accountPassword != null)\n                message.accountPassword = String(object.accountPassword);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an UpdateAccountRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.UpdateAccountRequest\n         * @static\n         * @param {shakebook.UpdateAccountRequest} message UpdateAccountRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        UpdateAccountRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.accountName = \"\";\n                object.accountEmail = \"\";\n                object.accountPhone = \"\";\n                object.imageUrl = \"\";\n                object.backgroundUrl = \"\";\n                object.accountDesc = \"\";\n                object.accountStatus = options.enums === String ? \"NORMAL\" : 0;\n                object.accountPassword = \"\";\n            }\n            if (message.accountName != null && message.hasOwnProperty(\"accountName\"))\n                object.accountName = message.accountName;\n            if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\"))\n                object.accountEmail = message.accountEmail;\n            if (message.accountPhone != null && message.hasOwnProperty(\"accountPhone\"))\n                object.accountPhone = message.accountPhone;\n            if (message.imageUrl != null && message.hasOwnProperty(\"imageUrl\"))\n                object.imageUrl = message.imageUrl;\n            if (message.backgroundUrl != null && message.hasOwnProperty(\"backgroundUrl\"))\n                object.backgroundUrl = message.backgroundUrl;\n            if (message.accountDesc != null && message.hasOwnProperty(\"accountDesc\"))\n                object.accountDesc = message.accountDesc;\n            if (message.accountStatus != null && message.hasOwnProperty(\"accountStatus\"))\n                object.accountStatus = options.enums === String ? $root.shakebook.AccountStatus[message.accountStatus] : message.accountStatus;\n            if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\"))\n                object.accountPassword = message.accountPassword;\n            return object;\n        };\n\n        /**\n         * Converts this UpdateAccountRequest to JSON.\n         * @function toJSON\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        UpdateAccountRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return UpdateAccountRequest;\n    })();\n\n    shakebook.Account = (function() {\n\n        /**\n         * Properties of an Account.\n         * @memberof shakebook\n         * @interface IAccount\n         * @property {shakebook.IAccountInfo|null} [info] Account info\n         * @property {string|null} [accountPassword] Account accountPassword\n         */\n\n        /**\n         * Constructs a new Account.\n         * @memberof shakebook\n         * @classdesc Represents an Account.\n         * @implements IAccount\n         * @constructor\n         * @param {shakebook.IAccount=} [properties] Properties to set\n         */\n        function Account(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Account info.\n         * @member {shakebook.IAccountInfo|null|undefined} info\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.info = null;\n\n        /**\n         * Account accountPassword.\n         * @member {string} accountPassword\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.accountPassword = \"\";\n\n        /**\n         * Creates an Account message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.Account\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.Account} Account\n         */\n        Account.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.Account)\n                return object;\n            let message = new $root.shakebook.Account();\n            if (object.info != null) {\n                if (typeof object.info !== \"object\")\n                    throw TypeError(\".shakebook.Account.info: object expected\");\n                message.info = $root.shakebook.AccountInfo.fromObject(object.info);\n            }\n            if (object.accountPassword != null)\n                message.accountPassword = String(object.accountPassword);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Account message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.Account\n         * @static\n         * @param {shakebook.Account} message Account\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Account.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.info = null;\n                object.accountPassword = \"\";\n            }\n            if (message.info != null && message.hasOwnProperty(\"info\"))\n                object.info = $root.shakebook.AccountInfo.toObject(message.info, options);\n            if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\"))\n                object.accountPassword = message.accountPassword;\n            return object;\n        };\n\n        /**\n         * Converts this Account to JSON.\n         * @function toJSON\n         * @memberof shakebook.Account\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Account.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Account;\n    })();\n\n    shakebook.ValidEmailRequest = (function() {\n\n        /**\n         * Properties of a ValidEmailRequest.\n         * @memberof shakebook\n         * @interface IValidEmailRequest\n         * @property {string|null} [accountEmail] ValidEmailRequest accountEmail\n         */\n\n        /**\n         * Constructs a new ValidEmailRequest.\n         * @memberof shakebook\n         * @classdesc Represents a ValidEmailRequest.\n         * @implements IValidEmailRequest\n         * @constructor\n         * @param {shakebook.IValidEmailRequest=} [properties] Properties to set\n         */\n        function ValidEmailRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValidEmailRequest accountEmail.\n         * @member {string} accountEmail\n         * @memberof shakebook.ValidEmailRequest\n         * @instance\n         */\n        ValidEmailRequest.prototype.accountEmail = \"\";\n\n        /**\n         * Creates a ValidEmailRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.ValidEmailRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.ValidEmailRequest} ValidEmailRequest\n         */\n        ValidEmailRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.ValidEmailRequest)\n                return object;\n            let message = new $root.shakebook.ValidEmailRequest();\n            if (object.accountEmail != null)\n                message.accountEmail = String(object.accountEmail);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValidEmailRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.ValidEmailRequest\n         * @static\n         * @param {shakebook.ValidEmailRequest} message ValidEmailRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValidEmailRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.accountEmail = \"\";\n            if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\"))\n                object.accountEmail = message.accountEmail;\n            return object;\n        };\n\n        /**\n         * Converts this ValidEmailRequest to JSON.\n         * @function toJSON\n         * @memberof shakebook.ValidEmailRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValidEmailRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValidEmailRequest;\n    })();\n\n    shakebook.GetAccountResponse = (function() {\n\n        /**\n         * Properties of a GetAccountResponse.\n         * @memberof shakebook\n         * @interface IGetAccountResponse\n         * @property {shakebook.IResponse|null} [response] GetAccountResponse response\n         * @property {shakebook.IAccountInfo|null} [data] GetAccountResponse data\n         */\n\n        /**\n         * Constructs a new GetAccountResponse.\n         * @memberof shakebook\n         * @classdesc Represents a GetAccountResponse.\n         * @implements IGetAccountResponse\n         * @constructor\n         * @param {shakebook.IGetAccountResponse=} [properties] Properties to set\n         */\n        function GetAccountResponse(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GetAccountResponse response.\n         * @member {shakebook.IResponse|null|undefined} response\n         * @memberof shakebook.GetAccountResponse\n         * @instance\n         */\n        GetAccountResponse.prototype.response = null;\n\n        /**\n         * GetAccountResponse data.\n         * @member {shakebook.IAccountInfo|null|undefined} data\n         * @memberof shakebook.GetAccountResponse\n         * @instance\n         */\n        GetAccountResponse.prototype.data = null;\n\n        /**\n         * Creates a GetAccountResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.GetAccountResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.GetAccountResponse} GetAccountResponse\n         */\n        GetAccountResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.GetAccountResponse)\n                return object;\n            let message = new $root.shakebook.GetAccountResponse();\n            if (object.response != null) {\n                if (typeof object.response !== \"object\")\n                    throw TypeError(\".shakebook.GetAccountResponse.response: object expected\");\n                message.response = $root.shakebook.Response.fromObject(object.response);\n            }\n            if (object.data != null) {\n                if (typeof object.data !== \"object\")\n                    throw TypeError(\".shakebook.GetAccountResponse.data: object expected\");\n                message.data = $root.shakebook.AccountInfo.fromObject(object.data);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GetAccountResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.GetAccountResponse\n         * @static\n         * @param {shakebook.GetAccountResponse} message GetAccountResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GetAccountResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.response = null;\n                object.data = null;\n            }\n            if (message.response != null && message.hasOwnProperty(\"response\"))\n                object.response = $root.shakebook.Response.toObject(message.response, options);\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                object.data = $root.shakebook.AccountInfo.toObject(message.data, options);\n            return object;\n        };\n\n        /**\n         * Converts this GetAccountResponse to JSON.\n         * @function toJSON\n         * @memberof shakebook.GetAccountResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GetAccountResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GetAccountResponse;\n    })();\n\n    shakebook.AccountInfo = (function() {\n\n        /**\n         * Properties of an AccountInfo.\n         * @memberof shakebook\n         * @interface IAccountInfo\n         * @property {number|null} [id] AccountInfo id\n         * @property {string|null} [accountName] AccountInfo accountName\n         * @property {string|null} [accountPhone] AccountInfo accountPhone\n         * @property {string|null} [accountEmail] AccountInfo accountEmail\n         * @property {string|null} [signupAt] AccountInfo signupAt\n         * @property {string|null} [lastTime] AccountInfo lastTime\n         * @property {shakebook.AccountStatus|null} [accountStatus] AccountInfo accountStatus\n         * @property {string|null} [imageUrl] AccountInfo imageUrl\n         * @property {string|null} [backgroundUrl] AccountInfo backgroundUrl\n         * @property {string|null} [accountDesc] AccountInfo accountDesc\n         * @property {number|null} [thumbsUp] AccountInfo thumbsUp\n         * @property {number|null} [focusNumber] AccountInfo focusNumber\n         * @property {number|null} [fansNumber] AccountInfo fansNumber\n         */\n\n        /**\n         * Constructs a new AccountInfo.\n         * @memberof shakebook\n         * @classdesc Represents an AccountInfo.\n         * @implements IAccountInfo\n         * @constructor\n         * @param {shakebook.IAccountInfo=} [properties] Properties to set\n         */\n        function AccountInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AccountInfo id.\n         * @member {number} id\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AccountInfo accountName.\n         * @member {string} accountName\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.accountName = \"\";\n\n        /**\n         * AccountInfo accountPhone.\n         * @member {string} accountPhone\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.accountPhone = \"\";\n\n        /**\n         * AccountInfo accountEmail.\n         * @member {string} accountEmail\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.accountEmail = \"\";\n\n        /**\n         * AccountInfo signupAt.\n         * @member {string} signupAt\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.signupAt = \"\";\n\n        /**\n         * AccountInfo lastTime.\n         * @member {string} lastTime\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.lastTime = \"\";\n\n        /**\n         * AccountInfo accountStatus.\n         * @member {shakebook.AccountStatus} accountStatus\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.accountStatus = 0;\n\n        /**\n         * AccountInfo imageUrl.\n         * @member {string} imageUrl\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.imageUrl = \"\";\n\n        /**\n         * AccountInfo backgroundUrl.\n         * @member {string} backgroundUrl\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.backgroundUrl = \"\";\n\n        /**\n         * AccountInfo accountDesc.\n         * @member {string} accountDesc\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.accountDesc = \"\";\n\n        /**\n         * AccountInfo thumbsUp.\n         * @member {number} thumbsUp\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.thumbsUp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AccountInfo focusNumber.\n         * @member {number} focusNumber\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.focusNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AccountInfo fansNumber.\n         * @member {number} fansNumber\n         * @memberof shakebook.AccountInfo\n         * @instance\n         */\n        AccountInfo.prototype.fansNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates an AccountInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.AccountInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.AccountInfo} AccountInfo\n         */\n        AccountInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.AccountInfo)\n                return object;\n            let message = new $root.shakebook.AccountInfo();\n            if (object.id != null)\n                if ($util.Long)\n                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;\n                else if (typeof object.id === \"string\")\n                    message.id = parseInt(object.id, 10);\n                else if (typeof object.id === \"number\")\n                    message.id = object.id;\n                else if (typeof object.id === \"object\")\n                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();\n            if (object.accountName != null)\n                message.accountName = String(object.accountName);\n            if (object.accountPhone != null)\n                message.accountPhone = String(object.accountPhone);\n            if (object.accountEmail != null)\n                message.accountEmail = String(object.accountEmail);\n            if (object.signupAt != null)\n                message.signupAt = String(object.signupAt);\n            if (object.lastTime != null)\n                message.lastTime = String(object.lastTime);\n            switch (object.accountStatus) {\n            case \"NORMAL\":\n            case 0:\n                message.accountStatus = 0;\n                break;\n            case \"DISABLE\":\n            case 1:\n                message.accountStatus = 1;\n                break;\n            case \"LOCK\":\n            case 2:\n                message.accountStatus = 2;\n                break;\n            case \"DELETE\":\n            case 3:\n                message.accountStatus = 3;\n                break;\n            }\n            if (object.imageUrl != null)\n                message.imageUrl = String(object.imageUrl);\n            if (object.backgroundUrl != null)\n                message.backgroundUrl = String(object.backgroundUrl);\n            if (object.accountDesc != null)\n                message.accountDesc = String(object.accountDesc);\n            if (object.thumbsUp != null)\n                if ($util.Long)\n                    (message.thumbsUp = $util.Long.fromValue(object.thumbsUp)).unsigned = false;\n                else if (typeof object.thumbsUp === \"string\")\n                    message.thumbsUp = parseInt(object.thumbsUp, 10);\n                else if (typeof object.thumbsUp === \"number\")\n                    message.thumbsUp = object.thumbsUp;\n                else if (typeof object.thumbsUp === \"object\")\n                    message.thumbsUp = new $util.LongBits(object.thumbsUp.low >>> 0, object.thumbsUp.high >>> 0).toNumber();\n            if (object.focusNumber != null)\n                if ($util.Long)\n                    (message.focusNumber = $util.Long.fromValue(object.focusNumber)).unsigned = false;\n                else if (typeof object.focusNumber === \"string\")\n                    message.focusNumber = parseInt(object.focusNumber, 10);\n                else if (typeof object.focusNumber === \"number\")\n                    message.focusNumber = object.focusNumber;\n                else if (typeof object.focusNumber === \"object\")\n                    message.focusNumber = new $util.LongBits(object.focusNumber.low >>> 0, object.focusNumber.high >>> 0).toNumber();\n            if (object.fansNumber != null)\n                if ($util.Long)\n                    (message.fansNumber = $util.Long.fromValue(object.fansNumber)).unsigned = false;\n                else if (typeof object.fansNumber === \"string\")\n                    message.fansNumber = parseInt(object.fansNumber, 10);\n                else if (typeof object.fansNumber === \"number\")\n                    message.fansNumber = object.fansNumber;\n                else if (typeof object.fansNumber === \"object\")\n                    message.fansNumber = new $util.LongBits(object.fansNumber.low >>> 0, object.fansNumber.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AccountInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.AccountInfo\n         * @static\n         * @param {shakebook.AccountInfo} message AccountInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AccountInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.id = options.longs === String ? \"0\" : 0;\n                object.accountName = \"\";\n                object.accountPhone = \"\";\n                object.accountEmail = \"\";\n                object.signupAt = \"\";\n                object.lastTime = \"\";\n                object.accountStatus = options.enums === String ? \"NORMAL\" : 0;\n                object.imageUrl = \"\";\n                object.backgroundUrl = \"\";\n                object.accountDesc = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.thumbsUp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.thumbsUp = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.focusNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.focusNumber = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.fansNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.fansNumber = options.longs === String ? \"0\" : 0;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (typeof message.id === \"number\")\n                    object.id = options.longs === String ? String(message.id) : message.id;\n                else\n                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;\n            if (message.accountName != null && message.hasOwnProperty(\"accountName\"))\n                object.accountName = message.accountName;\n            if (message.accountPhone != null && message.hasOwnProperty(\"accountPhone\"))\n                object.accountPhone = message.accountPhone;\n            if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\"))\n                object.accountEmail = message.accountEmail;\n            if (message.signupAt != null && message.hasOwnProperty(\"signupAt\"))\n                object.signupAt = message.signupAt;\n            if (message.lastTime != null && message.hasOwnProperty(\"lastTime\"))\n                object.lastTime = message.lastTime;\n            if (message.accountStatus != null && message.hasOwnProperty(\"accountStatus\"))\n                object.accountStatus = options.enums === String ? $root.shakebook.AccountStatus[message.accountStatus] : message.accountStatus;\n            if (message.imageUrl != null && message.hasOwnProperty(\"imageUrl\"))\n                object.imageUrl = message.imageUrl;\n            if (message.backgroundUrl != null && message.hasOwnProperty(\"backgroundUrl\"))\n                object.backgroundUrl = message.backgroundUrl;\n            if (message.accountDesc != null && message.hasOwnProperty(\"accountDesc\"))\n                object.accountDesc = message.accountDesc;\n            if (message.thumbsUp != null && message.hasOwnProperty(\"thumbsUp\"))\n                if (typeof message.thumbsUp === \"number\")\n                    object.thumbsUp = options.longs === String ? String(message.thumbsUp) : message.thumbsUp;\n                else\n                    object.thumbsUp = options.longs === String ? $util.Long.prototype.toString.call(message.thumbsUp) : options.longs === Number ? new $util.LongBits(message.thumbsUp.low >>> 0, message.thumbsUp.high >>> 0).toNumber() : message.thumbsUp;\n            if (message.focusNumber != null && message.hasOwnProperty(\"focusNumber\"))\n                if (typeof message.focusNumber === \"number\")\n                    object.focusNumber = options.longs === String ? String(message.focusNumber) : message.focusNumber;\n                else\n                    object.focusNumber = options.longs === String ? $util.Long.prototype.toString.call(message.focusNumber) : options.longs === Number ? new $util.LongBits(message.focusNumber.low >>> 0, message.focusNumber.high >>> 0).toNumber() : message.focusNumber;\n            if (message.fansNumber != null && message.hasOwnProperty(\"fansNumber\"))\n                if (typeof message.fansNumber === \"number\")\n                    object.fansNumber = options.longs === String ? String(message.fansNumber) : message.fansNumber;\n                else\n                    object.fansNumber = options.longs === String ? $util.Long.prototype.toString.call(message.fansNumber) : options.longs === Number ? new $util.LongBits(message.fansNumber.low >>> 0, message.fansNumber.high >>> 0).toNumber() : message.fansNumber;\n            return object;\n        };\n\n        /**\n         * Converts this AccountInfo to JSON.\n         * @function toJSON\n         * @memberof shakebook.AccountInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AccountInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AccountInfo;\n    })();\n\n    shakebook.AccountService = (function() {\n\n        /**\n         * Constructs a new AccountService service.\n         * @memberof shakebook\n         * @classdesc Represents an AccountService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function AccountService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (AccountService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = AccountService;\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#signUp}.\n         * @memberof shakebook.AccountService\n         * @typedef SignUpCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.Response} [response] Response\n         */\n\n        /**\n         * Calls SignUp.\n         * @function signUp\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.ISignUpRequest} request SignUpRequest message or plain object\n         * @param {shakebook.AccountService.SignUpCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.signUp = function signUp(request, callback) {\n            return this.rpcCall(signUp, $root.shakebook.SignUpRequest, $root.shakebook.Response, request, callback);\n        }, \"name\", { value: \"SignUp\" });\n\n        /**\n         * Calls SignUp.\n         * @function signUp\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.ISignUpRequest} request SignUpRequest message or plain object\n         * @returns {Promise<shakebook.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#signIn}.\n         * @memberof shakebook.AccountService\n         * @typedef SignInCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.SignInResponse} [response] SignInResponse\n         */\n\n        /**\n         * Calls SignIn.\n         * @function signIn\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.ISignInRequest} request SignInRequest message or plain object\n         * @param {shakebook.AccountService.SignInCallback} callback Node-style callback called with the error, if any, and SignInResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.signIn = function signIn(request, callback) {\n            return this.rpcCall(signIn, $root.shakebook.SignInRequest, $root.shakebook.SignInResponse, request, callback);\n        }, \"name\", { value: \"SignIn\" });\n\n        /**\n         * Calls SignIn.\n         * @function signIn\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.ISignInRequest} request SignInRequest message or plain object\n         * @returns {Promise<shakebook.SignInResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#signOut}.\n         * @memberof shakebook.AccountService\n         * @typedef SignOutCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.Response} [response] Response\n         */\n\n        /**\n         * Calls SignOut.\n         * @function signOut\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IAccountId} request AccountId message or plain object\n         * @param {shakebook.AccountService.SignOutCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.signOut = function signOut(request, callback) {\n            return this.rpcCall(signOut, $root.shakebook.AccountId, $root.shakebook.Response, request, callback);\n        }, \"name\", { value: \"SignOut\" });\n\n        /**\n         * Calls SignOut.\n         * @function signOut\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IAccountId} request AccountId message or plain object\n         * @returns {Promise<shakebook.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#validEmail}.\n         * @memberof shakebook.AccountService\n         * @typedef ValidEmailCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.Response} [response] Response\n         */\n\n        /**\n         * Calls ValidEmail.\n         * @function validEmail\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IValidEmailRequest} request ValidEmailRequest message or plain object\n         * @param {shakebook.AccountService.ValidEmailCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.validEmail = function validEmail(request, callback) {\n            return this.rpcCall(validEmail, $root.shakebook.ValidEmailRequest, $root.shakebook.Response, request, callback);\n        }, \"name\", { value: \"ValidEmail\" });\n\n        /**\n         * Calls ValidEmail.\n         * @function validEmail\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IValidEmailRequest} request ValidEmailRequest message or plain object\n         * @returns {Promise<shakebook.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#updateAccount}.\n         * @memberof shakebook.AccountService\n         * @typedef UpdateAccountCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.Response} [response] Response\n         */\n\n        /**\n         * Calls UpdateAccount.\n         * @function updateAccount\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IUpdateAccountRequest} request UpdateAccountRequest message or plain object\n         * @param {shakebook.AccountService.UpdateAccountCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.updateAccount = function updateAccount(request, callback) {\n            return this.rpcCall(updateAccount, $root.shakebook.UpdateAccountRequest, $root.shakebook.Response, request, callback);\n        }, \"name\", { value: \"UpdateAccount\" });\n\n        /**\n         * Calls UpdateAccount.\n         * @function updateAccount\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IUpdateAccountRequest} request UpdateAccountRequest message or plain object\n         * @returns {Promise<shakebook.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#getAccount}.\n         * @memberof shakebook.AccountService\n         * @typedef GetAccountCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.GetAccountResponse} [response] GetAccountResponse\n         */\n\n        /**\n         * Calls GetAccount.\n         * @function getAccount\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IEmptyRequest} request EmptyRequest message or plain object\n         * @param {shakebook.AccountService.GetAccountCallback} callback Node-style callback called with the error, if any, and GetAccountResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.getAccount = function getAccount(request, callback) {\n            return this.rpcCall(getAccount, $root.shakebook.EmptyRequest, $root.shakebook.GetAccountResponse, request, callback);\n        }, \"name\", { value: \"GetAccount\" });\n\n        /**\n         * Calls GetAccount.\n         * @function getAccount\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IEmptyRequest} request EmptyRequest message or plain object\n         * @returns {Promise<shakebook.GetAccountResponse>} Promise\n         * @variation 2\n         */\n\n        return AccountService;\n    })();\n\n    return shakebook;\n})();"]},"metadata":{},"sourceType":"module"}