{"ast":null,"code":"import * as $protobuf from \"protobufjs\"; // Common aliases\n\nconst $util = $protobuf.util; // Exported root namespace\n\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\nexport const manager = $root.manager = (() => {\n  /**\n   * Namespace manager.\n   * @exports manager\n   * @namespace\n   */\n  const manager = {};\n\n  manager.EmptyRequest = function () {\n    /**\n     * Properties of an EmptyRequest.\n     * @memberof manager\n     * @interface IEmptyRequest\n     */\n\n    /**\n     * Constructs a new EmptyRequest.\n     * @memberof manager\n     * @classdesc Represents an EmptyRequest.\n     * @implements IEmptyRequest\n     * @constructor\n     * @param {manager.IEmptyRequest=} [properties] Properties to set\n     */\n    function EmptyRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Creates an EmptyRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof manager.EmptyRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {manager.EmptyRequest} EmptyRequest\n     */\n\n\n    EmptyRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.manager.EmptyRequest) return object;\n      return new $root.manager.EmptyRequest();\n    };\n    /**\n     * Creates a plain object from an EmptyRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof manager.EmptyRequest\n     * @static\n     * @param {manager.EmptyRequest} message EmptyRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    EmptyRequest.toObject = function toObject() {\n      return {};\n    };\n    /**\n     * Converts this EmptyRequest to JSON.\n     * @function toJSON\n     * @memberof manager.EmptyRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    EmptyRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EmptyRequest;\n  }();\n\n  manager.Response = function () {\n    /**\n     * Properties of a Response.\n     * @memberof manager\n     * @interface IResponse\n     * @property {boolean|null} [success] Response success\n     * @property {string|null} [message] Response message\n     * @property {number|null} [code] Response code\n     */\n\n    /**\n     * Constructs a new Response.\n     * @memberof manager\n     * @classdesc Represents a Response.\n     * @implements IResponse\n     * @constructor\n     * @param {manager.IResponse=} [properties] Properties to set\n     */\n    function Response(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Response success.\n     * @member {boolean} success\n     * @memberof manager.Response\n     * @instance\n     */\n\n\n    Response.prototype.success = false;\n    /**\n     * Response message.\n     * @member {string} message\n     * @memberof manager.Response\n     * @instance\n     */\n\n    Response.prototype.message = \"\";\n    /**\n     * Response code.\n     * @member {number} code\n     * @memberof manager.Response\n     * @instance\n     */\n\n    Response.prototype.code = 0;\n    /**\n     * Creates a Response message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof manager.Response\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {manager.Response} Response\n     */\n\n    Response.fromObject = function fromObject(object) {\n      if (object instanceof $root.manager.Response) return object;\n      let message = new $root.manager.Response();\n      if (object.success != null) message.success = Boolean(object.success);\n      if (object.message != null) message.message = String(object.message);\n      if (object.code != null) message.code = object.code | 0;\n      return message;\n    };\n    /**\n     * Creates a plain object from a Response message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof manager.Response\n     * @static\n     * @param {manager.Response} message Response\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Response.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.success = false;\n        object.message = \"\";\n        object.code = 0;\n      }\n\n      if (message.success != null && message.hasOwnProperty(\"success\")) object.success = message.success;\n      if (message.message != null && message.hasOwnProperty(\"message\")) object.message = message.message;\n      if (message.code != null && message.hasOwnProperty(\"code\")) object.code = message.code;\n      return object;\n    };\n    /**\n     * Converts this Response to JSON.\n     * @function toJSON\n     * @memberof manager.Response\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Response.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Response;\n  }();\n  /**\n   * RoleStatus enum.\n   * @name manager.RoleStatus\n   * @enum {number}\n   * @property {number} NORMAL=0 NORMAL value\n   * @property {number} DELETE=1 DELETE value\n   */\n\n\n  manager.RoleStatus = function () {\n    const valuesById = {},\n          values = Object.create(valuesById);\n    values[valuesById[0] = \"NORMAL\"] = 0;\n    values[valuesById[1] = \"DELETE\"] = 1;\n    return values;\n  }();\n\n  manager.Role = function () {\n    /**\n     * Properties of a Role.\n     * @memberof manager\n     * @interface IRole\n     * @property {number|null} [id] Role id\n     * @property {string|null} [roleName] Role roleName\n     * @property {string|null} [createAt] Role createAt\n     * @property {manager.RoleStatus|null} [roleStatus] Role roleStatus\n     */\n\n    /**\n     * Constructs a new Role.\n     * @memberof manager\n     * @classdesc Represents a Role.\n     * @implements IRole\n     * @constructor\n     * @param {manager.IRole=} [properties] Properties to set\n     */\n    function Role(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Role id.\n     * @member {number} id\n     * @memberof manager.Role\n     * @instance\n     */\n\n\n    Role.prototype.id = 0;\n    /**\n     * Role roleName.\n     * @member {string} roleName\n     * @memberof manager.Role\n     * @instance\n     */\n\n    Role.prototype.roleName = \"\";\n    /**\n     * Role createAt.\n     * @member {string} createAt\n     * @memberof manager.Role\n     * @instance\n     */\n\n    Role.prototype.createAt = \"\";\n    /**\n     * Role roleStatus.\n     * @member {manager.RoleStatus} roleStatus\n     * @memberof manager.Role\n     * @instance\n     */\n\n    Role.prototype.roleStatus = 0;\n    /**\n     * Creates a Role message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof manager.Role\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {manager.Role} Role\n     */\n\n    Role.fromObject = function fromObject(object) {\n      if (object instanceof $root.manager.Role) return object;\n      let message = new $root.manager.Role();\n      if (object.id != null) message.id = object.id | 0;\n      if (object.roleName != null) message.roleName = String(object.roleName);\n      if (object.createAt != null) message.createAt = String(object.createAt);\n\n      switch (object.roleStatus) {\n        case \"NORMAL\":\n        case 0:\n          message.roleStatus = 0;\n          break;\n\n        case \"DELETE\":\n        case 1:\n          message.roleStatus = 1;\n          break;\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a Role message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof manager.Role\n     * @static\n     * @param {manager.Role} message Role\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Role.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.id = 0;\n        object.roleName = \"\";\n        object.createAt = \"\";\n        object.roleStatus = options.enums === String ? \"NORMAL\" : 0;\n      }\n\n      if (message.id != null && message.hasOwnProperty(\"id\")) object.id = message.id;\n      if (message.roleName != null && message.hasOwnProperty(\"roleName\")) object.roleName = message.roleName;\n      if (message.createAt != null && message.hasOwnProperty(\"createAt\")) object.createAt = message.createAt;\n      if (message.roleStatus != null && message.hasOwnProperty(\"roleStatus\")) object.roleStatus = options.enums === String ? $root.manager.RoleStatus[message.roleStatus] : message.roleStatus;\n      return object;\n    };\n    /**\n     * Converts this Role to JSON.\n     * @function toJSON\n     * @memberof manager.Role\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Role.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Role;\n  }();\n\n  manager.GetRoleListResponse = function () {\n    /**\n     * Properties of a GetRoleListResponse.\n     * @memberof manager\n     * @interface IGetRoleListResponse\n     * @property {boolean|null} [success] GetRoleListResponse success\n     * @property {string|null} [message] GetRoleListResponse message\n     * @property {number|null} [code] GetRoleListResponse code\n     * @property {Array.<manager.IRole>|null} [data] GetRoleListResponse data\n     */\n\n    /**\n     * Constructs a new GetRoleListResponse.\n     * @memberof manager\n     * @classdesc Represents a GetRoleListResponse.\n     * @implements IGetRoleListResponse\n     * @constructor\n     * @param {manager.IGetRoleListResponse=} [properties] Properties to set\n     */\n    function GetRoleListResponse(properties) {\n      this.data = [];\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * GetRoleListResponse success.\n     * @member {boolean} success\n     * @memberof manager.GetRoleListResponse\n     * @instance\n     */\n\n\n    GetRoleListResponse.prototype.success = false;\n    /**\n     * GetRoleListResponse message.\n     * @member {string} message\n     * @memberof manager.GetRoleListResponse\n     * @instance\n     */\n\n    GetRoleListResponse.prototype.message = \"\";\n    /**\n     * GetRoleListResponse code.\n     * @member {number} code\n     * @memberof manager.GetRoleListResponse\n     * @instance\n     */\n\n    GetRoleListResponse.prototype.code = 0;\n    /**\n     * GetRoleListResponse data.\n     * @member {Array.<manager.IRole>} data\n     * @memberof manager.GetRoleListResponse\n     * @instance\n     */\n\n    GetRoleListResponse.prototype.data = $util.emptyArray;\n    /**\n     * Creates a GetRoleListResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof manager.GetRoleListResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {manager.GetRoleListResponse} GetRoleListResponse\n     */\n\n    GetRoleListResponse.fromObject = function fromObject(object) {\n      if (object instanceof $root.manager.GetRoleListResponse) return object;\n      let message = new $root.manager.GetRoleListResponse();\n      if (object.success != null) message.success = Boolean(object.success);\n      if (object.message != null) message.message = String(object.message);\n      if (object.code != null) message.code = object.code | 0;\n\n      if (object.data) {\n        if (!Array.isArray(object.data)) throw TypeError(\".manager.GetRoleListResponse.data: array expected\");\n        message.data = [];\n\n        for (let i = 0; i < object.data.length; ++i) {\n          if (typeof object.data[i] !== \"object\") throw TypeError(\".manager.GetRoleListResponse.data: object expected\");\n          message.data[i] = $root.manager.Role.fromObject(object.data[i]);\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a GetRoleListResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof manager.GetRoleListResponse\n     * @static\n     * @param {manager.GetRoleListResponse} message GetRoleListResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    GetRoleListResponse.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n      if (options.arrays || options.defaults) object.data = [];\n\n      if (options.defaults) {\n        object.success = false;\n        object.message = \"\";\n        object.code = 0;\n      }\n\n      if (message.success != null && message.hasOwnProperty(\"success\")) object.success = message.success;\n      if (message.message != null && message.hasOwnProperty(\"message\")) object.message = message.message;\n\n      if (message.data && message.data.length) {\n        object.data = [];\n\n        for (let j = 0; j < message.data.length; ++j) object.data[j] = $root.manager.Role.toObject(message.data[j], options);\n      }\n\n      if (message.code != null && message.hasOwnProperty(\"code\")) object.code = message.code;\n      return object;\n    };\n    /**\n     * Converts this GetRoleListResponse to JSON.\n     * @function toJSON\n     * @memberof manager.GetRoleListResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    GetRoleListResponse.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return GetRoleListResponse;\n  }();\n\n  manager.DeleteRoleRequest = function () {\n    /**\n     * Properties of a DeleteRoleRequest.\n     * @memberof manager\n     * @interface IDeleteRoleRequest\n     * @property {number|null} [id] DeleteRoleRequest id\n     */\n\n    /**\n     * Constructs a new DeleteRoleRequest.\n     * @memberof manager\n     * @classdesc Represents a DeleteRoleRequest.\n     * @implements IDeleteRoleRequest\n     * @constructor\n     * @param {manager.IDeleteRoleRequest=} [properties] Properties to set\n     */\n    function DeleteRoleRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * DeleteRoleRequest id.\n     * @member {number} id\n     * @memberof manager.DeleteRoleRequest\n     * @instance\n     */\n\n\n    DeleteRoleRequest.prototype.id = 0;\n    /**\n     * Creates a DeleteRoleRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof manager.DeleteRoleRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {manager.DeleteRoleRequest} DeleteRoleRequest\n     */\n\n    DeleteRoleRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.manager.DeleteRoleRequest) return object;\n      let message = new $root.manager.DeleteRoleRequest();\n      if (object.id != null) message.id = object.id | 0;\n      return message;\n    };\n    /**\n     * Creates a plain object from a DeleteRoleRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof manager.DeleteRoleRequest\n     * @static\n     * @param {manager.DeleteRoleRequest} message DeleteRoleRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    DeleteRoleRequest.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n      if (options.defaults) object.id = 0;\n      if (message.id != null && message.hasOwnProperty(\"id\")) object.id = message.id;\n      return object;\n    };\n    /**\n     * Converts this DeleteRoleRequest to JSON.\n     * @function toJSON\n     * @memberof manager.DeleteRoleRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    DeleteRoleRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return DeleteRoleRequest;\n  }();\n\n  manager.MenuInfo = function () {\n    /**\n     * Properties of a MenuInfo.\n     * @memberof manager\n     * @interface IMenuInfo\n     * @property {number|null} [id] MenuInfo id\n     * @property {string|null} [menuName] MenuInfo menuName\n     * @property {string|null} [menuRouter] MenuInfo menuRouter\n     * @property {number|null} [parentId] MenuInfo parentId\n     * @property {string|null} [menuIcon] MenuInfo menuIcon\n     * @property {string|null} [createAt] MenuInfo createAt\n     * @property {number|null} [menuStatus] MenuInfo menuStatus\n     */\n\n    /**\n     * Constructs a new MenuInfo.\n     * @memberof manager\n     * @classdesc Represents a MenuInfo.\n     * @implements IMenuInfo\n     * @constructor\n     * @param {manager.IMenuInfo=} [properties] Properties to set\n     */\n    function MenuInfo(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * MenuInfo id.\n     * @member {number} id\n     * @memberof manager.MenuInfo\n     * @instance\n     */\n\n\n    MenuInfo.prototype.id = 0;\n    /**\n     * MenuInfo menuName.\n     * @member {string} menuName\n     * @memberof manager.MenuInfo\n     * @instance\n     */\n\n    MenuInfo.prototype.menuName = \"\";\n    /**\n     * MenuInfo menuRouter.\n     * @member {string} menuRouter\n     * @memberof manager.MenuInfo\n     * @instance\n     */\n\n    MenuInfo.prototype.menuRouter = \"\";\n    /**\n     * MenuInfo parentId.\n     * @member {number} parentId\n     * @memberof manager.MenuInfo\n     * @instance\n     */\n\n    MenuInfo.prototype.parentId = 0;\n    /**\n     * MenuInfo menuIcon.\n     * @member {string} menuIcon\n     * @memberof manager.MenuInfo\n     * @instance\n     */\n\n    MenuInfo.prototype.menuIcon = \"\";\n    /**\n     * MenuInfo createAt.\n     * @member {string} createAt\n     * @memberof manager.MenuInfo\n     * @instance\n     */\n\n    MenuInfo.prototype.createAt = \"\";\n    /**\n     * MenuInfo menuStatus.\n     * @member {number} menuStatus\n     * @memberof manager.MenuInfo\n     * @instance\n     */\n\n    MenuInfo.prototype.menuStatus = 0;\n    /**\n     * Creates a MenuInfo message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof manager.MenuInfo\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {manager.MenuInfo} MenuInfo\n     */\n\n    MenuInfo.fromObject = function fromObject(object) {\n      if (object instanceof $root.manager.MenuInfo) return object;\n      let message = new $root.manager.MenuInfo();\n      if (object.id != null) message.id = object.id | 0;\n      if (object.menuName != null) message.menuName = String(object.menuName);\n      if (object.menuRouter != null) message.menuRouter = String(object.menuRouter);\n      if (object.parentId != null) message.parentId = object.parentId | 0;\n      if (object.menuIcon != null) message.menuIcon = String(object.menuIcon);\n      if (object.createAt != null) message.createAt = String(object.createAt);\n      if (object.menuStatus != null) message.menuStatus = object.menuStatus | 0;\n      return message;\n    };\n    /**\n     * Creates a plain object from a MenuInfo message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof manager.MenuInfo\n     * @static\n     * @param {manager.MenuInfo} message MenuInfo\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    MenuInfo.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.id = 0;\n        object.menuName = \"\";\n        object.menuRouter = \"\";\n        object.parentId = 0;\n        object.menuIcon = \"\";\n        object.createAt = \"\";\n        object.menuStatus = 0;\n      }\n\n      if (message.id != null && message.hasOwnProperty(\"id\")) object.id = message.id;\n      if (message.menuName != null && message.hasOwnProperty(\"menuName\")) object.menuName = message.menuName;\n      if (message.menuRouter != null && message.hasOwnProperty(\"menuRouter\")) object.menuRouter = message.menuRouter;\n      if (message.parentId != null && message.hasOwnProperty(\"parentId\")) object.parentId = message.parentId;\n      if (message.menuIcon != null && message.hasOwnProperty(\"menuIcon\")) object.menuIcon = message.menuIcon;\n      if (message.createAt != null && message.hasOwnProperty(\"createAt\")) object.createAt = message.createAt;\n      if (message.menuStatus != null && message.hasOwnProperty(\"menuStatus\")) object.menuStatus = message.menuStatus;\n      return object;\n    };\n    /**\n     * Converts this MenuInfo to JSON.\n     * @function toJSON\n     * @memberof manager.MenuInfo\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    MenuInfo.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return MenuInfo;\n  }();\n\n  manager.CreateMenuRequest = function () {\n    /**\n     * Properties of a CreateMenuRequest.\n     * @memberof manager\n     * @interface ICreateMenuRequest\n     * @property {string|null} [menuName] CreateMenuRequest menuName\n     * @property {string|null} [menuRouter] CreateMenuRequest menuRouter\n     * @property {number|null} [parentId] CreateMenuRequest parentId\n     * @property {string|null} [menuIcon] CreateMenuRequest menuIcon\n     */\n\n    /**\n     * Constructs a new CreateMenuRequest.\n     * @memberof manager\n     * @classdesc Represents a CreateMenuRequest.\n     * @implements ICreateMenuRequest\n     * @constructor\n     * @param {manager.ICreateMenuRequest=} [properties] Properties to set\n     */\n    function CreateMenuRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * CreateMenuRequest menuName.\n     * @member {string} menuName\n     * @memberof manager.CreateMenuRequest\n     * @instance\n     */\n\n\n    CreateMenuRequest.prototype.menuName = \"\";\n    /**\n     * CreateMenuRequest menuRouter.\n     * @member {string} menuRouter\n     * @memberof manager.CreateMenuRequest\n     * @instance\n     */\n\n    CreateMenuRequest.prototype.menuRouter = \"\";\n    /**\n     * CreateMenuRequest parentId.\n     * @member {number} parentId\n     * @memberof manager.CreateMenuRequest\n     * @instance\n     */\n\n    CreateMenuRequest.prototype.parentId = 0;\n    /**\n     * CreateMenuRequest menuIcon.\n     * @member {string} menuIcon\n     * @memberof manager.CreateMenuRequest\n     * @instance\n     */\n\n    CreateMenuRequest.prototype.menuIcon = \"\";\n    /**\n     * Creates a CreateMenuRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof manager.CreateMenuRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {manager.CreateMenuRequest} CreateMenuRequest\n     */\n\n    CreateMenuRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.manager.CreateMenuRequest) return object;\n      let message = new $root.manager.CreateMenuRequest();\n      if (object.menuName != null) message.menuName = String(object.menuName);\n      if (object.menuRouter != null) message.menuRouter = String(object.menuRouter);\n      if (object.parentId != null) message.parentId = object.parentId | 0;\n      if (object.menuIcon != null) message.menuIcon = String(object.menuIcon);\n      return message;\n    };\n    /**\n     * Creates a plain object from a CreateMenuRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof manager.CreateMenuRequest\n     * @static\n     * @param {manager.CreateMenuRequest} message CreateMenuRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    CreateMenuRequest.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.menuName = \"\";\n        object.menuRouter = \"\";\n        object.parentId = 0;\n        object.menuIcon = \"\";\n      }\n\n      if (message.menuName != null && message.hasOwnProperty(\"menuName\")) object.menuName = message.menuName;\n      if (message.menuRouter != null && message.hasOwnProperty(\"menuRouter\")) object.menuRouter = message.menuRouter;\n      if (message.parentId != null && message.hasOwnProperty(\"parentId\")) object.parentId = message.parentId;\n      if (message.menuIcon != null && message.hasOwnProperty(\"menuIcon\")) object.menuIcon = message.menuIcon;\n      return object;\n    };\n    /**\n     * Converts this CreateMenuRequest to JSON.\n     * @function toJSON\n     * @memberof manager.CreateMenuRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    CreateMenuRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CreateMenuRequest;\n  }();\n\n  manager.ManagerService = function () {\n    /**\n     * Constructs a new ManagerService service.\n     * @memberof manager\n     * @classdesc Represents a ManagerService\n     * @extends $protobuf.rpc.Service\n     * @constructor\n     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n     */\n    function ManagerService(rpcImpl, requestDelimited, responseDelimited) {\n      $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n    }\n\n    (ManagerService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ManagerService;\n    /**\n     * Callback as used by {@link manager.ManagerService#createRole}.\n     * @memberof manager.ManagerService\n     * @typedef CreateRoleCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {manager.Response} [response] Response\n     */\n\n    /**\n     * Calls CreateRole.\n     * @function createRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IRole} request Role message or plain object\n     * @param {manager.ManagerService.CreateRoleCallback} callback Node-style callback called with the error, if any, and Response\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(ManagerService.prototype.createRole = function createRole(request, callback) {\n      return this.rpcCall(createRole, $root.manager.Role, $root.manager.Response, request, callback);\n    }, \"name\", {\n      value: \"CreateRole\"\n    });\n    /**\n     * Calls CreateRole.\n     * @function createRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IRole} request Role message or plain object\n     * @returns {Promise<manager.Response>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link manager.ManagerService#getRoleList}.\n     * @memberof manager.ManagerService\n     * @typedef GetRoleListCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {manager.GetRoleListResponse} [response] GetRoleListResponse\n     */\n\n    /**\n     * Calls GetRoleList.\n     * @function getRoleList\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IEmptyRequest} request EmptyRequest message or plain object\n     * @param {manager.ManagerService.GetRoleListCallback} callback Node-style callback called with the error, if any, and GetRoleListResponse\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(ManagerService.prototype.getRoleList = function getRoleList(request, callback) {\n      return this.rpcCall(getRoleList, $root.manager.EmptyRequest, $root.manager.GetRoleListResponse, request, callback);\n    }, \"name\", {\n      value: \"GetRoleList\"\n    });\n    /**\n     * Calls GetRoleList.\n     * @function getRoleList\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IEmptyRequest} request EmptyRequest message or plain object\n     * @returns {Promise<manager.GetRoleListResponse>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link manager.ManagerService#updateRole}.\n     * @memberof manager.ManagerService\n     * @typedef UpdateRoleCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {manager.Response} [response] Response\n     */\n\n    /**\n     * Calls UpdateRole.\n     * @function updateRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IRole} request Role message or plain object\n     * @param {manager.ManagerService.UpdateRoleCallback} callback Node-style callback called with the error, if any, and Response\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(ManagerService.prototype.updateRole = function updateRole(request, callback) {\n      return this.rpcCall(updateRole, $root.manager.Role, $root.manager.Response, request, callback);\n    }, \"name\", {\n      value: \"UpdateRole\"\n    });\n    /**\n     * Calls UpdateRole.\n     * @function updateRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IRole} request Role message or plain object\n     * @returns {Promise<manager.Response>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link manager.ManagerService#deleteRole}.\n     * @memberof manager.ManagerService\n     * @typedef DeleteRoleCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {manager.Response} [response] Response\n     */\n\n    /**\n     * Calls DeleteRole.\n     * @function deleteRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IDeleteRoleRequest} request DeleteRoleRequest message or plain object\n     * @param {manager.ManagerService.DeleteRoleCallback} callback Node-style callback called with the error, if any, and Response\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(ManagerService.prototype.deleteRole = function deleteRole(request, callback) {\n      return this.rpcCall(deleteRole, $root.manager.DeleteRoleRequest, $root.manager.Response, request, callback);\n    }, \"name\", {\n      value: \"DeleteRole\"\n    });\n    /**\n     * Calls DeleteRole.\n     * @function deleteRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IDeleteRoleRequest} request DeleteRoleRequest message or plain object\n     * @returns {Promise<manager.Response>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link manager.ManagerService#createMenu}.\n     * @memberof manager.ManagerService\n     * @typedef CreateMenuCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {manager.Response} [response] Response\n     */\n\n    /**\n     * Calls CreateMenu.\n     * @function createMenu\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.ICreateMenuRequest} request CreateMenuRequest message or plain object\n     * @param {manager.ManagerService.CreateMenuCallback} callback Node-style callback called with the error, if any, and Response\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(ManagerService.prototype.createMenu = function createMenu(request, callback) {\n      return this.rpcCall(createMenu, $root.manager.CreateMenuRequest, $root.manager.Response, request, callback);\n    }, \"name\", {\n      value: \"CreateMenu\"\n    });\n    /**\n     * Calls CreateMenu.\n     * @function createMenu\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.ICreateMenuRequest} request CreateMenuRequest message or plain object\n     * @returns {Promise<manager.Response>} Promise\n     * @variation 2\n     */\n\n    return ManagerService;\n  }();\n\n  return manager;\n})();","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/src/service/api/v1/manager_pb.js"],"names":["$protobuf","$util","util","$root","roots","manager","EmptyRequest","properties","keys","Object","i","length","fromObject","object","toObject","prototype","toJSON","constructor","toJSONOptions","Response","success","message","code","Boolean","String","options","defaults","hasOwnProperty","RoleStatus","valuesById","values","create","Role","id","roleName","createAt","roleStatus","enums","GetRoleListResponse","data","emptyArray","Array","isArray","TypeError","arrays","j","DeleteRoleRequest","MenuInfo","menuName","menuRouter","parentId","menuIcon","menuStatus","CreateMenuRequest","ManagerService","rpcImpl","requestDelimited","responseDelimited","rpc","Service","call","defineProperty","createRole","request","callback","rpcCall","value","getRoleList","updateRole","deleteRole","createMenu"],"mappings":"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","sourcesContent":["import * as $protobuf from \"protobufjs\";\n\n// Common aliases\nconst $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const manager = $root.manager = (() => {\n\n    /**\n     * Namespace manager.\n     * @exports manager\n     * @namespace\n     */\n    const manager = {};\n\n    manager.EmptyRequest = (function() {\n\n        /**\n         * Properties of an EmptyRequest.\n         * @memberof manager\n         * @interface IEmptyRequest\n         */\n\n        /**\n         * Constructs a new EmptyRequest.\n         * @memberof manager\n         * @classdesc Represents an EmptyRequest.\n         * @implements IEmptyRequest\n         * @constructor\n         * @param {manager.IEmptyRequest=} [properties] Properties to set\n         */\n        function EmptyRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates an EmptyRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof manager.EmptyRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {manager.EmptyRequest} EmptyRequest\n         */\n        EmptyRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.manager.EmptyRequest)\n                return object;\n            return new $root.manager.EmptyRequest();\n        };\n\n        /**\n         * Creates a plain object from an EmptyRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof manager.EmptyRequest\n         * @static\n         * @param {manager.EmptyRequest} message EmptyRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EmptyRequest.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this EmptyRequest to JSON.\n         * @function toJSON\n         * @memberof manager.EmptyRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EmptyRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return EmptyRequest;\n    })();\n\n    manager.Response = (function() {\n\n        /**\n         * Properties of a Response.\n         * @memberof manager\n         * @interface IResponse\n         * @property {boolean|null} [success] Response success\n         * @property {string|null} [message] Response message\n         * @property {number|null} [code] Response code\n         */\n\n        /**\n         * Constructs a new Response.\n         * @memberof manager\n         * @classdesc Represents a Response.\n         * @implements IResponse\n         * @constructor\n         * @param {manager.IResponse=} [properties] Properties to set\n         */\n        function Response(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Response success.\n         * @member {boolean} success\n         * @memberof manager.Response\n         * @instance\n         */\n        Response.prototype.success = false;\n\n        /**\n         * Response message.\n         * @member {string} message\n         * @memberof manager.Response\n         * @instance\n         */\n        Response.prototype.message = \"\";\n\n        /**\n         * Response code.\n         * @member {number} code\n         * @memberof manager.Response\n         * @instance\n         */\n        Response.prototype.code = 0;\n\n        /**\n         * Creates a Response message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof manager.Response\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {manager.Response} Response\n         */\n        Response.fromObject = function fromObject(object) {\n            if (object instanceof $root.manager.Response)\n                return object;\n            let message = new $root.manager.Response();\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            if (object.message != null)\n                message.message = String(object.message);\n            if (object.code != null)\n                message.code = object.code | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Response message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof manager.Response\n         * @static\n         * @param {manager.Response} message Response\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Response.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.success = false;\n                object.message = \"\";\n                object.code = 0;\n            }\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                object.code = message.code;\n            return object;\n        };\n\n        /**\n         * Converts this Response to JSON.\n         * @function toJSON\n         * @memberof manager.Response\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Response.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Response;\n    })();\n\n    /**\n     * RoleStatus enum.\n     * @name manager.RoleStatus\n     * @enum {number}\n     * @property {number} NORMAL=0 NORMAL value\n     * @property {number} DELETE=1 DELETE value\n     */\n    manager.RoleStatus = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NORMAL\"] = 0;\n        values[valuesById[1] = \"DELETE\"] = 1;\n        return values;\n    })();\n\n    manager.Role = (function() {\n\n        /**\n         * Properties of a Role.\n         * @memberof manager\n         * @interface IRole\n         * @property {number|null} [id] Role id\n         * @property {string|null} [roleName] Role roleName\n         * @property {string|null} [createAt] Role createAt\n         * @property {manager.RoleStatus|null} [roleStatus] Role roleStatus\n         */\n\n        /**\n         * Constructs a new Role.\n         * @memberof manager\n         * @classdesc Represents a Role.\n         * @implements IRole\n         * @constructor\n         * @param {manager.IRole=} [properties] Properties to set\n         */\n        function Role(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Role id.\n         * @member {number} id\n         * @memberof manager.Role\n         * @instance\n         */\n        Role.prototype.id = 0;\n\n        /**\n         * Role roleName.\n         * @member {string} roleName\n         * @memberof manager.Role\n         * @instance\n         */\n        Role.prototype.roleName = \"\";\n\n        /**\n         * Role createAt.\n         * @member {string} createAt\n         * @memberof manager.Role\n         * @instance\n         */\n        Role.prototype.createAt = \"\";\n\n        /**\n         * Role roleStatus.\n         * @member {manager.RoleStatus} roleStatus\n         * @memberof manager.Role\n         * @instance\n         */\n        Role.prototype.roleStatus = 0;\n\n        /**\n         * Creates a Role message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof manager.Role\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {manager.Role} Role\n         */\n        Role.fromObject = function fromObject(object) {\n            if (object instanceof $root.manager.Role)\n                return object;\n            let message = new $root.manager.Role();\n            if (object.id != null)\n                message.id = object.id | 0;\n            if (object.roleName != null)\n                message.roleName = String(object.roleName);\n            if (object.createAt != null)\n                message.createAt = String(object.createAt);\n            switch (object.roleStatus) {\n            case \"NORMAL\":\n            case 0:\n                message.roleStatus = 0;\n                break;\n            case \"DELETE\":\n            case 1:\n                message.roleStatus = 1;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Role message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof manager.Role\n         * @static\n         * @param {manager.Role} message Role\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Role.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.id = 0;\n                object.roleName = \"\";\n                object.createAt = \"\";\n                object.roleStatus = options.enums === String ? \"NORMAL\" : 0;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.roleName != null && message.hasOwnProperty(\"roleName\"))\n                object.roleName = message.roleName;\n            if (message.createAt != null && message.hasOwnProperty(\"createAt\"))\n                object.createAt = message.createAt;\n            if (message.roleStatus != null && message.hasOwnProperty(\"roleStatus\"))\n                object.roleStatus = options.enums === String ? $root.manager.RoleStatus[message.roleStatus] : message.roleStatus;\n            return object;\n        };\n\n        /**\n         * Converts this Role to JSON.\n         * @function toJSON\n         * @memberof manager.Role\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Role.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Role;\n    })();\n\n    manager.GetRoleListResponse = (function() {\n\n        /**\n         * Properties of a GetRoleListResponse.\n         * @memberof manager\n         * @interface IGetRoleListResponse\n         * @property {boolean|null} [success] GetRoleListResponse success\n         * @property {string|null} [message] GetRoleListResponse message\n         * @property {number|null} [code] GetRoleListResponse code\n         * @property {Array.<manager.IRole>|null} [data] GetRoleListResponse data\n         */\n\n        /**\n         * Constructs a new GetRoleListResponse.\n         * @memberof manager\n         * @classdesc Represents a GetRoleListResponse.\n         * @implements IGetRoleListResponse\n         * @constructor\n         * @param {manager.IGetRoleListResponse=} [properties] Properties to set\n         */\n        function GetRoleListResponse(properties) {\n            this.data = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GetRoleListResponse success.\n         * @member {boolean} success\n         * @memberof manager.GetRoleListResponse\n         * @instance\n         */\n        GetRoleListResponse.prototype.success = false;\n\n        /**\n         * GetRoleListResponse message.\n         * @member {string} message\n         * @memberof manager.GetRoleListResponse\n         * @instance\n         */\n        GetRoleListResponse.prototype.message = \"\";\n\n        /**\n         * GetRoleListResponse code.\n         * @member {number} code\n         * @memberof manager.GetRoleListResponse\n         * @instance\n         */\n        GetRoleListResponse.prototype.code = 0;\n\n        /**\n         * GetRoleListResponse data.\n         * @member {Array.<manager.IRole>} data\n         * @memberof manager.GetRoleListResponse\n         * @instance\n         */\n        GetRoleListResponse.prototype.data = $util.emptyArray;\n\n        /**\n         * Creates a GetRoleListResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof manager.GetRoleListResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {manager.GetRoleListResponse} GetRoleListResponse\n         */\n        GetRoleListResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.manager.GetRoleListResponse)\n                return object;\n            let message = new $root.manager.GetRoleListResponse();\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            if (object.message != null)\n                message.message = String(object.message);\n            if (object.code != null)\n                message.code = object.code | 0;\n            if (object.data) {\n                if (!Array.isArray(object.data))\n                    throw TypeError(\".manager.GetRoleListResponse.data: array expected\");\n                message.data = [];\n                for (let i = 0; i < object.data.length; ++i) {\n                    if (typeof object.data[i] !== \"object\")\n                        throw TypeError(\".manager.GetRoleListResponse.data: object expected\");\n                    message.data[i] = $root.manager.Role.fromObject(object.data[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GetRoleListResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof manager.GetRoleListResponse\n         * @static\n         * @param {manager.GetRoleListResponse} message GetRoleListResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GetRoleListResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.data = [];\n            if (options.defaults) {\n                object.success = false;\n                object.message = \"\";\n                object.code = 0;\n            }\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.data && message.data.length) {\n                object.data = [];\n                for (let j = 0; j < message.data.length; ++j)\n                    object.data[j] = $root.manager.Role.toObject(message.data[j], options);\n            }\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                object.code = message.code;\n            return object;\n        };\n\n        /**\n         * Converts this GetRoleListResponse to JSON.\n         * @function toJSON\n         * @memberof manager.GetRoleListResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GetRoleListResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GetRoleListResponse;\n    })();\n\n    manager.DeleteRoleRequest = (function() {\n\n        /**\n         * Properties of a DeleteRoleRequest.\n         * @memberof manager\n         * @interface IDeleteRoleRequest\n         * @property {number|null} [id] DeleteRoleRequest id\n         */\n\n        /**\n         * Constructs a new DeleteRoleRequest.\n         * @memberof manager\n         * @classdesc Represents a DeleteRoleRequest.\n         * @implements IDeleteRoleRequest\n         * @constructor\n         * @param {manager.IDeleteRoleRequest=} [properties] Properties to set\n         */\n        function DeleteRoleRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DeleteRoleRequest id.\n         * @member {number} id\n         * @memberof manager.DeleteRoleRequest\n         * @instance\n         */\n        DeleteRoleRequest.prototype.id = 0;\n\n        /**\n         * Creates a DeleteRoleRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof manager.DeleteRoleRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {manager.DeleteRoleRequest} DeleteRoleRequest\n         */\n        DeleteRoleRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.manager.DeleteRoleRequest)\n                return object;\n            let message = new $root.manager.DeleteRoleRequest();\n            if (object.id != null)\n                message.id = object.id | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DeleteRoleRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof manager.DeleteRoleRequest\n         * @static\n         * @param {manager.DeleteRoleRequest} message DeleteRoleRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DeleteRoleRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.id = 0;\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            return object;\n        };\n\n        /**\n         * Converts this DeleteRoleRequest to JSON.\n         * @function toJSON\n         * @memberof manager.DeleteRoleRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DeleteRoleRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DeleteRoleRequest;\n    })();\n\n    manager.MenuInfo = (function() {\n\n        /**\n         * Properties of a MenuInfo.\n         * @memberof manager\n         * @interface IMenuInfo\n         * @property {number|null} [id] MenuInfo id\n         * @property {string|null} [menuName] MenuInfo menuName\n         * @property {string|null} [menuRouter] MenuInfo menuRouter\n         * @property {number|null} [parentId] MenuInfo parentId\n         * @property {string|null} [menuIcon] MenuInfo menuIcon\n         * @property {string|null} [createAt] MenuInfo createAt\n         * @property {number|null} [menuStatus] MenuInfo menuStatus\n         */\n\n        /**\n         * Constructs a new MenuInfo.\n         * @memberof manager\n         * @classdesc Represents a MenuInfo.\n         * @implements IMenuInfo\n         * @constructor\n         * @param {manager.IMenuInfo=} [properties] Properties to set\n         */\n        function MenuInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * MenuInfo id.\n         * @member {number} id\n         * @memberof manager.MenuInfo\n         * @instance\n         */\n        MenuInfo.prototype.id = 0;\n\n        /**\n         * MenuInfo menuName.\n         * @member {string} menuName\n         * @memberof manager.MenuInfo\n         * @instance\n         */\n        MenuInfo.prototype.menuName = \"\";\n\n        /**\n         * MenuInfo menuRouter.\n         * @member {string} menuRouter\n         * @memberof manager.MenuInfo\n         * @instance\n         */\n        MenuInfo.prototype.menuRouter = \"\";\n\n        /**\n         * MenuInfo parentId.\n         * @member {number} parentId\n         * @memberof manager.MenuInfo\n         * @instance\n         */\n        MenuInfo.prototype.parentId = 0;\n\n        /**\n         * MenuInfo menuIcon.\n         * @member {string} menuIcon\n         * @memberof manager.MenuInfo\n         * @instance\n         */\n        MenuInfo.prototype.menuIcon = \"\";\n\n        /**\n         * MenuInfo createAt.\n         * @member {string} createAt\n         * @memberof manager.MenuInfo\n         * @instance\n         */\n        MenuInfo.prototype.createAt = \"\";\n\n        /**\n         * MenuInfo menuStatus.\n         * @member {number} menuStatus\n         * @memberof manager.MenuInfo\n         * @instance\n         */\n        MenuInfo.prototype.menuStatus = 0;\n\n        /**\n         * Creates a MenuInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof manager.MenuInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {manager.MenuInfo} MenuInfo\n         */\n        MenuInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.manager.MenuInfo)\n                return object;\n            let message = new $root.manager.MenuInfo();\n            if (object.id != null)\n                message.id = object.id | 0;\n            if (object.menuName != null)\n                message.menuName = String(object.menuName);\n            if (object.menuRouter != null)\n                message.menuRouter = String(object.menuRouter);\n            if (object.parentId != null)\n                message.parentId = object.parentId | 0;\n            if (object.menuIcon != null)\n                message.menuIcon = String(object.menuIcon);\n            if (object.createAt != null)\n                message.createAt = String(object.createAt);\n            if (object.menuStatus != null)\n                message.menuStatus = object.menuStatus | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a MenuInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof manager.MenuInfo\n         * @static\n         * @param {manager.MenuInfo} message MenuInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        MenuInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.id = 0;\n                object.menuName = \"\";\n                object.menuRouter = \"\";\n                object.parentId = 0;\n                object.menuIcon = \"\";\n                object.createAt = \"\";\n                object.menuStatus = 0;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.menuName != null && message.hasOwnProperty(\"menuName\"))\n                object.menuName = message.menuName;\n            if (message.menuRouter != null && message.hasOwnProperty(\"menuRouter\"))\n                object.menuRouter = message.menuRouter;\n            if (message.parentId != null && message.hasOwnProperty(\"parentId\"))\n                object.parentId = message.parentId;\n            if (message.menuIcon != null && message.hasOwnProperty(\"menuIcon\"))\n                object.menuIcon = message.menuIcon;\n            if (message.createAt != null && message.hasOwnProperty(\"createAt\"))\n                object.createAt = message.createAt;\n            if (message.menuStatus != null && message.hasOwnProperty(\"menuStatus\"))\n                object.menuStatus = message.menuStatus;\n            return object;\n        };\n\n        /**\n         * Converts this MenuInfo to JSON.\n         * @function toJSON\n         * @memberof manager.MenuInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        MenuInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return MenuInfo;\n    })();\n\n    manager.CreateMenuRequest = (function() {\n\n        /**\n         * Properties of a CreateMenuRequest.\n         * @memberof manager\n         * @interface ICreateMenuRequest\n         * @property {string|null} [menuName] CreateMenuRequest menuName\n         * @property {string|null} [menuRouter] CreateMenuRequest menuRouter\n         * @property {number|null} [parentId] CreateMenuRequest parentId\n         * @property {string|null} [menuIcon] CreateMenuRequest menuIcon\n         */\n\n        /**\n         * Constructs a new CreateMenuRequest.\n         * @memberof manager\n         * @classdesc Represents a CreateMenuRequest.\n         * @implements ICreateMenuRequest\n         * @constructor\n         * @param {manager.ICreateMenuRequest=} [properties] Properties to set\n         */\n        function CreateMenuRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CreateMenuRequest menuName.\n         * @member {string} menuName\n         * @memberof manager.CreateMenuRequest\n         * @instance\n         */\n        CreateMenuRequest.prototype.menuName = \"\";\n\n        /**\n         * CreateMenuRequest menuRouter.\n         * @member {string} menuRouter\n         * @memberof manager.CreateMenuRequest\n         * @instance\n         */\n        CreateMenuRequest.prototype.menuRouter = \"\";\n\n        /**\n         * CreateMenuRequest parentId.\n         * @member {number} parentId\n         * @memberof manager.CreateMenuRequest\n         * @instance\n         */\n        CreateMenuRequest.prototype.parentId = 0;\n\n        /**\n         * CreateMenuRequest menuIcon.\n         * @member {string} menuIcon\n         * @memberof manager.CreateMenuRequest\n         * @instance\n         */\n        CreateMenuRequest.prototype.menuIcon = \"\";\n\n        /**\n         * Creates a CreateMenuRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof manager.CreateMenuRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {manager.CreateMenuRequest} CreateMenuRequest\n         */\n        CreateMenuRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.manager.CreateMenuRequest)\n                return object;\n            let message = new $root.manager.CreateMenuRequest();\n            if (object.menuName != null)\n                message.menuName = String(object.menuName);\n            if (object.menuRouter != null)\n                message.menuRouter = String(object.menuRouter);\n            if (object.parentId != null)\n                message.parentId = object.parentId | 0;\n            if (object.menuIcon != null)\n                message.menuIcon = String(object.menuIcon);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CreateMenuRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof manager.CreateMenuRequest\n         * @static\n         * @param {manager.CreateMenuRequest} message CreateMenuRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CreateMenuRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.menuName = \"\";\n                object.menuRouter = \"\";\n                object.parentId = 0;\n                object.menuIcon = \"\";\n            }\n            if (message.menuName != null && message.hasOwnProperty(\"menuName\"))\n                object.menuName = message.menuName;\n            if (message.menuRouter != null && message.hasOwnProperty(\"menuRouter\"))\n                object.menuRouter = message.menuRouter;\n            if (message.parentId != null && message.hasOwnProperty(\"parentId\"))\n                object.parentId = message.parentId;\n            if (message.menuIcon != null && message.hasOwnProperty(\"menuIcon\"))\n                object.menuIcon = message.menuIcon;\n            return object;\n        };\n\n        /**\n         * Converts this CreateMenuRequest to JSON.\n         * @function toJSON\n         * @memberof manager.CreateMenuRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CreateMenuRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CreateMenuRequest;\n    })();\n\n    manager.ManagerService = (function() {\n\n        /**\n         * Constructs a new ManagerService service.\n         * @memberof manager\n         * @classdesc Represents a ManagerService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function ManagerService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (ManagerService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ManagerService;\n\n        /**\n         * Callback as used by {@link manager.ManagerService#createRole}.\n         * @memberof manager.ManagerService\n         * @typedef CreateRoleCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {manager.Response} [response] Response\n         */\n\n        /**\n         * Calls CreateRole.\n         * @function createRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IRole} request Role message or plain object\n         * @param {manager.ManagerService.CreateRoleCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ManagerService.prototype.createRole = function createRole(request, callback) {\n            return this.rpcCall(createRole, $root.manager.Role, $root.manager.Response, request, callback);\n        }, \"name\", { value: \"CreateRole\" });\n\n        /**\n         * Calls CreateRole.\n         * @function createRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IRole} request Role message or plain object\n         * @returns {Promise<manager.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link manager.ManagerService#getRoleList}.\n         * @memberof manager.ManagerService\n         * @typedef GetRoleListCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {manager.GetRoleListResponse} [response] GetRoleListResponse\n         */\n\n        /**\n         * Calls GetRoleList.\n         * @function getRoleList\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IEmptyRequest} request EmptyRequest message or plain object\n         * @param {manager.ManagerService.GetRoleListCallback} callback Node-style callback called with the error, if any, and GetRoleListResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ManagerService.prototype.getRoleList = function getRoleList(request, callback) {\n            return this.rpcCall(getRoleList, $root.manager.EmptyRequest, $root.manager.GetRoleListResponse, request, callback);\n        }, \"name\", { value: \"GetRoleList\" });\n\n        /**\n         * Calls GetRoleList.\n         * @function getRoleList\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IEmptyRequest} request EmptyRequest message or plain object\n         * @returns {Promise<manager.GetRoleListResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link manager.ManagerService#updateRole}.\n         * @memberof manager.ManagerService\n         * @typedef UpdateRoleCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {manager.Response} [response] Response\n         */\n\n        /**\n         * Calls UpdateRole.\n         * @function updateRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IRole} request Role message or plain object\n         * @param {manager.ManagerService.UpdateRoleCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ManagerService.prototype.updateRole = function updateRole(request, callback) {\n            return this.rpcCall(updateRole, $root.manager.Role, $root.manager.Response, request, callback);\n        }, \"name\", { value: \"UpdateRole\" });\n\n        /**\n         * Calls UpdateRole.\n         * @function updateRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IRole} request Role message or plain object\n         * @returns {Promise<manager.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link manager.ManagerService#deleteRole}.\n         * @memberof manager.ManagerService\n         * @typedef DeleteRoleCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {manager.Response} [response] Response\n         */\n\n        /**\n         * Calls DeleteRole.\n         * @function deleteRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IDeleteRoleRequest} request DeleteRoleRequest message or plain object\n         * @param {manager.ManagerService.DeleteRoleCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ManagerService.prototype.deleteRole = function deleteRole(request, callback) {\n            return this.rpcCall(deleteRole, $root.manager.DeleteRoleRequest, $root.manager.Response, request, callback);\n        }, \"name\", { value: \"DeleteRole\" });\n\n        /**\n         * Calls DeleteRole.\n         * @function deleteRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IDeleteRoleRequest} request DeleteRoleRequest message or plain object\n         * @returns {Promise<manager.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link manager.ManagerService#createMenu}.\n         * @memberof manager.ManagerService\n         * @typedef CreateMenuCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {manager.Response} [response] Response\n         */\n\n        /**\n         * Calls CreateMenu.\n         * @function createMenu\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.ICreateMenuRequest} request CreateMenuRequest message or plain object\n         * @param {manager.ManagerService.CreateMenuCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ManagerService.prototype.createMenu = function createMenu(request, callback) {\n            return this.rpcCall(createMenu, $root.manager.CreateMenuRequest, $root.manager.Response, request, callback);\n        }, \"name\", { value: \"CreateMenu\" });\n\n        /**\n         * Calls CreateMenu.\n         * @function createMenu\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.ICreateMenuRequest} request CreateMenuRequest message or plain object\n         * @returns {Promise<manager.Response>} Promise\n         * @variation 2\n         */\n\n        return ManagerService;\n    })();\n\n    return manager;\n})();"]},"metadata":{},"sourceType":"module"}