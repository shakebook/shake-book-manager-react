{"ast":null,"code":"/**\n * @fileoverview web worker for layout\n * @author changzhe.zb@antfin.com\n */\nimport { getLayoutByName } from '../../registy';\nimport { LAYOUT_MESSAGE } from './layoutConst';\nconst ctx = self;\n\nfunction isLayoutMessage(event) {\n  const {\n    type\n  } = event.data;\n  return type === LAYOUT_MESSAGE.RUN || type === LAYOUT_MESSAGE.GPURUN;\n}\n\nfunction handleLayoutMessage(event) {\n  const {\n    type\n  } = event.data;\n\n  switch (type) {\n    case LAYOUT_MESSAGE.RUN:\n      {\n        const {\n          nodes,\n          edges,\n          layoutCfg = {}\n        } = event.data;\n        const {\n          type: layoutType\n        } = layoutCfg;\n        const LayoutClass = getLayoutByName(layoutType); // tslint:disable-line\n\n        if (!LayoutClass) {\n          ctx.postMessage({\n            type: LAYOUT_MESSAGE.ERROR,\n            message: `layout ${layoutType} not found`\n          });\n          break;\n        }\n\n        const layoutMethod = new LayoutClass(layoutCfg);\n        layoutMethod.init({\n          nodes,\n          edges\n        });\n        layoutMethod.execute();\n        ctx.postMessage({\n          nodes,\n          type: LAYOUT_MESSAGE.END\n        });\n        layoutMethod.destroy();\n        break;\n      }\n\n    case LAYOUT_MESSAGE.GPURUN:\n      {\n        const {\n          nodes,\n          edges,\n          layoutCfg = {},\n          canvas\n        } = event.data;\n        const {\n          type: layoutType\n        } = layoutCfg;\n        const LayoutClass = getLayoutByName(layoutType); // tslint:disable-line\n\n        if (!LayoutClass) {\n          ctx.postMessage({\n            type: LAYOUT_MESSAGE.ERROR,\n            message: `layout ${layoutType} not found`\n          });\n          break;\n        }\n\n        if (layoutType.split('-')[1] !== 'gpu') {\n          ctx.postMessage({\n            type: LAYOUT_MESSAGE.ERROR,\n            message: `layout ${layoutType} does not support GPU`\n          });\n          break;\n        }\n\n        const layoutMethod = new LayoutClass(layoutCfg);\n        layoutMethod.init({\n          nodes,\n          edges\n        });\n        layoutMethod.executeWithWorker(canvas, ctx);\n        break;\n      }\n\n    default:\n      break;\n  }\n} // listen to message posted to web worker\n\n\nctx.onmessage = event => {\n  if (isLayoutMessage(event)) {\n    handleLayoutMessage(event);\n  }\n}; // https://stackoverflow.com/questions/50210416/webpack-worker-loader-fails-to-compile-typescript-worker\n\n\nexport default null;","map":{"version":3,"sources":["../../../src/layout/worker/layout.worker.ts"],"names":[],"mappings":"AAAA;;;AAGG;AACH,SAAS,eAAT,QAAgC,eAAhC;AACA,SAAS,cAAT,QAA+B,eAA/B;AAOA,MAAM,GAAG,GAAW,IAApB;;AAEA,SAAS,eAAT,CAAyB,KAAzB,EAAqC;AACnC,QAAM;AAAE,IAAA;AAAF,MAAW,KAAK,CAAC,IAAvB;AACA,SAAO,IAAI,KAAK,cAAc,CAAC,GAAxB,IAA+B,IAAI,KAAK,cAAc,CAAC,MAA9D;AACD;;AAED,SAAS,mBAAT,CAA6B,KAA7B,EAAyC;AACvC,QAAM;AAAE,IAAA;AAAF,MAAW,KAAK,CAAC,IAAvB;;AAEA,UAAQ,IAAR;AACE,SAAK,cAAc,CAAC,GAApB;AAAyB;AACvB,cAAM;AAAE,UAAA,KAAF;AAAS,UAAA,KAAT;AAAgB,UAAA,SAAS,GAAG;AAA5B,YAAmC,KAAK,CAAC,IAA/C;AACA,cAAM;AAAE,UAAA,IAAI,EAAE;AAAR,YAAuB,SAA7B;AACA,cAAM,WAAW,GAAG,eAAe,CAAC,UAAD,CAAnC,CAHuB,CAGyB;;AAChD,YAAI,CAAC,WAAL,EAAkB;AAChB,UAAA,GAAG,CAAC,WAAJ,CAAgB;AAAE,YAAA,IAAI,EAAE,cAAc,CAAC,KAAvB;AAA8B,YAAA,OAAO,EAAE,UAAU,UAAU;AAA3D,WAAhB;AACA;AACD;;AAED,cAAM,YAAY,GAAG,IAAI,WAAJ,CAAgB,SAAhB,CAArB;AACA,QAAA,YAAY,CAAC,IAAb,CAAkB;AAAE,UAAA,KAAF;AAAS,UAAA;AAAT,SAAlB;AACA,QAAA,YAAY,CAAC,OAAb;AACA,QAAA,GAAG,CAAC,WAAJ,CAAgB;AAAE,UAAA,KAAF;AAAS,UAAA,IAAI,EAAE,cAAc,CAAC;AAA9B,SAAhB;AACA,QAAA,YAAY,CAAC,OAAb;AACA;AACD;;AAED,SAAK,cAAc,CAAC,MAApB;AAA4B;AAC1B,cAAM;AAAE,UAAA,KAAF;AAAS,UAAA,KAAT;AAAgB,UAAA,SAAS,GAAG,EAA5B;AAAgC,UAAA;AAAhC,YAA2C,KAAK,CAAC,IAAvD;AAEA,cAAM;AAAE,UAAA,IAAI,EAAE;AAAR,YAAuB,SAA7B;AAEA,cAAM,WAAW,GAAG,eAAe,CAAC,UAAD,CAAnC,CAL0B,CAKsB;;AAChD,YAAI,CAAC,WAAL,EAAkB;AAChB,UAAA,GAAG,CAAC,WAAJ,CAAgB;AAAE,YAAA,IAAI,EAAE,cAAc,CAAC,KAAvB;AAA8B,YAAA,OAAO,EAAE,UAAU,UAAU;AAA3D,WAAhB;AACA;AACD;;AACD,YAAI,UAAU,CAAC,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,MAA6B,KAAjC,EAAwC;AACtC,UAAA,GAAG,CAAC,WAAJ,CAAgB;AAAE,YAAA,IAAI,EAAE,cAAc,CAAC,KAAvB;AAA8B,YAAA,OAAO,EAAE,UAAU,UAAU;AAA3D,WAAhB;AACA;AACD;;AAGD,cAAM,YAAY,GAAG,IAAI,WAAJ,CAAgB,SAAhB,CAArB;AACA,QAAA,YAAY,CAAC,IAAb,CAAkB;AAAE,UAAA,KAAF;AAAS,UAAA;AAAT,SAAlB;AACA,QAAA,YAAY,CAAC,iBAAb,CAA+B,MAA/B,EAAuC,GAAvC;AACA;AACD;;AACD;AACE;AAxCJ;AA0CD,C,CAED;;;AACA,GAAG,CAAC,SAAJ,GAAiB,KAAD,IAAiB;AAC/B,MAAI,eAAe,CAAC,KAAD,CAAnB,EAA4B;AAC1B,IAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD;AACF,CAJD,C,CAMA;;;AACA,eAAe,IAAf","sourceRoot":"","sourcesContent":["/**\n * @fileoverview web worker for layout\n * @author changzhe.zb@antfin.com\n */\nimport { getLayoutByName } from '../../registy';\nimport { LAYOUT_MESSAGE } from './layoutConst';\nconst ctx = self;\nfunction isLayoutMessage(event) {\n    const { type } = event.data;\n    return type === LAYOUT_MESSAGE.RUN || type === LAYOUT_MESSAGE.GPURUN;\n}\nfunction handleLayoutMessage(event) {\n    const { type } = event.data;\n    switch (type) {\n        case LAYOUT_MESSAGE.RUN: {\n            const { nodes, edges, layoutCfg = {} } = event.data;\n            const { type: layoutType } = layoutCfg;\n            const LayoutClass = getLayoutByName(layoutType); // tslint:disable-line\n            if (!LayoutClass) {\n                ctx.postMessage({ type: LAYOUT_MESSAGE.ERROR, message: `layout ${layoutType} not found` });\n                break;\n            }\n            const layoutMethod = new LayoutClass(layoutCfg);\n            layoutMethod.init({ nodes, edges });\n            layoutMethod.execute();\n            ctx.postMessage({ nodes, type: LAYOUT_MESSAGE.END });\n            layoutMethod.destroy();\n            break;\n        }\n        case LAYOUT_MESSAGE.GPURUN: {\n            const { nodes, edges, layoutCfg = {}, canvas } = event.data;\n            const { type: layoutType } = layoutCfg;\n            const LayoutClass = getLayoutByName(layoutType); // tslint:disable-line\n            if (!LayoutClass) {\n                ctx.postMessage({ type: LAYOUT_MESSAGE.ERROR, message: `layout ${layoutType} not found` });\n                break;\n            }\n            if (layoutType.split('-')[1] !== 'gpu') {\n                ctx.postMessage({ type: LAYOUT_MESSAGE.ERROR, message: `layout ${layoutType} does not support GPU` });\n                break;\n            }\n            const layoutMethod = new LayoutClass(layoutCfg);\n            layoutMethod.init({ nodes, edges });\n            layoutMethod.executeWithWorker(canvas, ctx);\n            break;\n        }\n        default:\n            break;\n    }\n}\n// listen to message posted to web worker\nctx.onmessage = (event) => {\n    if (isLayoutMessage(event)) {\n        handleLayoutMessage(event);\n    }\n};\n// https://stackoverflow.com/questions/50210416/webpack-worker-loader-fails-to-compile-typescript-worker\nexport default null;\n//# sourceMappingURL=layout.worker.js.map"]},"metadata":{},"sourceType":"module"}