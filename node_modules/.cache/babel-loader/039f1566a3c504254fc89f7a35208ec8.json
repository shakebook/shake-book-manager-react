{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFunctionName = exports.getBaseClassDependencyCount = exports.getDependencies = void 0;\n\nvar inject_1 = require(\"../annotation/inject\");\n\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\n\nvar literal_types_1 = require(\"../constants/literal_types\");\n\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\n\nvar serialization_1 = require(\"../utils/serialization\");\n\nObject.defineProperty(exports, \"getFunctionName\", {\n  enumerable: true,\n  get: function () {\n    return serialization_1.getFunctionName;\n  }\n});\n\nvar target_1 = require(\"./target\");\n\nfunction getDependencies(metadataReader, func) {\n  var constructorName = serialization_1.getFunctionName(func);\n  var targets = getTargets(metadataReader, constructorName, func, false);\n  return targets;\n}\n\nexports.getDependencies = getDependencies;\n\nfunction getTargets(metadataReader, constructorName, func, isBaseClass) {\n  var metadata = metadataReader.getConstructorMetadata(func);\n  var serviceIdentifiers = metadata.compilerGeneratedMetadata;\n\n  if (serviceIdentifiers === undefined) {\n    var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\n    throw new Error(msg);\n  }\n\n  var constructorArgsMetadata = metadata.userGeneratedMetadata;\n  var keys = Object.keys(constructorArgsMetadata);\n  var hasUserDeclaredUnknownInjections = func.length === 0 && keys.length > 0;\n  var iterations = hasUserDeclaredUnknownInjections ? keys.length : func.length;\n  var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);\n  var propertyTargets = getClassPropsAsTargets(metadataReader, func);\n\n  var targets = __spreadArrays(constructorTargets, propertyTargets);\n\n  return targets;\n}\n\nfunction getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {\n  var targetMetadata = constructorArgsMetadata[index.toString()] || [];\n  var metadata = formatTargetMetadata(targetMetadata);\n  var isManaged = metadata.unmanaged !== true;\n  var serviceIdentifier = serviceIdentifiers[index];\n  var injectIdentifier = metadata.inject || metadata.multiInject;\n  serviceIdentifier = injectIdentifier ? injectIdentifier : serviceIdentifier;\n\n  if (serviceIdentifier instanceof inject_1.LazyServiceIdentifer) {\n    serviceIdentifier = serviceIdentifier.unwrap();\n  }\n\n  if (isManaged) {\n    var isObject = serviceIdentifier === Object;\n    var isFunction = serviceIdentifier === Function;\n    var isUndefined = serviceIdentifier === undefined;\n    var isUnknownType = isObject || isFunction || isUndefined;\n\n    if (!isBaseClass && isUnknownType) {\n      var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + index + \" in class \" + constructorName + \".\";\n      throw new Error(msg);\n    }\n\n    var target = new target_1.Target(literal_types_1.TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);\n    target.metadata = targetMetadata;\n    return target;\n  }\n\n  return null;\n}\n\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {\n  var targets = [];\n\n  for (var i = 0; i < iterations; i++) {\n    var index = i;\n    var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);\n\n    if (target !== null) {\n      targets.push(target);\n    }\n  }\n\n  return targets;\n}\n\nfunction getClassPropsAsTargets(metadataReader, constructorFunc) {\n  var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);\n  var targets = [];\n  var keys = Object.keys(classPropsMetadata);\n\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n    var targetMetadata = classPropsMetadata[key];\n    var metadata = formatTargetMetadata(classPropsMetadata[key]);\n    var targetName = metadata.targetName || key;\n    var serviceIdentifier = metadata.inject || metadata.multiInject;\n    var target = new target_1.Target(literal_types_1.TargetTypeEnum.ClassProperty, targetName, serviceIdentifier);\n    target.metadata = targetMetadata;\n    targets.push(target);\n  }\n\n  var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;\n\n  if (baseConstructor !== Object) {\n    var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor);\n    targets = __spreadArrays(targets, baseTargets);\n  }\n\n  return targets;\n}\n\nfunction getBaseClassDependencyCount(metadataReader, func) {\n  var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n\n  if (baseConstructor !== Object) {\n    var baseConstructorName = serialization_1.getFunctionName(baseConstructor);\n    var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);\n    var metadata = targets.map(function (t) {\n      return t.metadata.filter(function (m) {\n        return m.key === METADATA_KEY.UNMANAGED_TAG;\n      });\n    });\n    var unmanagedCount = [].concat.apply([], metadata).length;\n    var dependencyCount = targets.length - unmanagedCount;\n\n    if (dependencyCount > 0) {\n      return dependencyCount;\n    } else {\n      return getBaseClassDependencyCount(metadataReader, baseConstructor);\n    }\n  } else {\n    return 0;\n  }\n}\n\nexports.getBaseClassDependencyCount = getBaseClassDependencyCount;\n\nfunction formatTargetMetadata(targetMetadata) {\n  var targetMetadataMap = {};\n  targetMetadata.forEach(function (m) {\n    targetMetadataMap[m.key.toString()] = m.value;\n  });\n  return {\n    inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\n    multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\n    targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\n    unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\n  };\n}","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/node_modules/inversify/lib/planning/reflection_utils.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","Object","defineProperty","exports","value","getFunctionName","getBaseClassDependencyCount","getDependencies","inject_1","require","ERROR_MSGS","literal_types_1","METADATA_KEY","serialization_1","enumerable","get","target_1","metadataReader","func","constructorName","targets","getTargets","isBaseClass","metadata","getConstructorMetadata","serviceIdentifiers","compilerGeneratedMetadata","undefined","msg","MISSING_INJECTABLE_ANNOTATION","Error","constructorArgsMetadata","userGeneratedMetadata","keys","hasUserDeclaredUnknownInjections","iterations","constructorTargets","getConstructorArgsAsTargets","propertyTargets","getClassPropsAsTargets","getConstructorArgsAsTarget","index","targetMetadata","toString","formatTargetMetadata","isManaged","unmanaged","serviceIdentifier","injectIdentifier","inject","multiInject","LazyServiceIdentifer","unwrap","isObject","isFunction","Function","isUndefined","isUnknownType","MISSING_INJECT_ANNOTATION","target","Target","TargetTypeEnum","ConstructorArgument","targetName","push","constructorFunc","classPropsMetadata","getPropertiesMetadata","_i","keys_1","key","ClassProperty","baseConstructor","getPrototypeOf","prototype","constructor","baseTargets","baseConstructorName","map","t","filter","m","UNMANAGED_TAG","unmanagedCount","concat","apply","dependencyCount","targetMetadataMap","forEach","INJECT_TAG","MULTI_INJECT_TAG","NAME_TAG"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFunctionName = exports.getBaseClassDependencyCount = exports.getDependencies = void 0;\nvar inject_1 = require(\"../annotation/inject\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar serialization_1 = require(\"../utils/serialization\");\nObject.defineProperty(exports, \"getFunctionName\", { enumerable: true, get: function () { return serialization_1.getFunctionName; } });\nvar target_1 = require(\"./target\");\nfunction getDependencies(metadataReader, func) {\n    var constructorName = serialization_1.getFunctionName(func);\n    var targets = getTargets(metadataReader, constructorName, func, false);\n    return targets;\n}\nexports.getDependencies = getDependencies;\nfunction getTargets(metadataReader, constructorName, func, isBaseClass) {\n    var metadata = metadataReader.getConstructorMetadata(func);\n    var serviceIdentifiers = metadata.compilerGeneratedMetadata;\n    if (serviceIdentifiers === undefined) {\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\n        throw new Error(msg);\n    }\n    var constructorArgsMetadata = metadata.userGeneratedMetadata;\n    var keys = Object.keys(constructorArgsMetadata);\n    var hasUserDeclaredUnknownInjections = (func.length === 0 && keys.length > 0);\n    var iterations = (hasUserDeclaredUnknownInjections) ? keys.length : func.length;\n    var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);\n    var propertyTargets = getClassPropsAsTargets(metadataReader, func);\n    var targets = __spreadArrays(constructorTargets, propertyTargets);\n    return targets;\n}\nfunction getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {\n    var targetMetadata = constructorArgsMetadata[index.toString()] || [];\n    var metadata = formatTargetMetadata(targetMetadata);\n    var isManaged = metadata.unmanaged !== true;\n    var serviceIdentifier = serviceIdentifiers[index];\n    var injectIdentifier = (metadata.inject || metadata.multiInject);\n    serviceIdentifier = (injectIdentifier) ? (injectIdentifier) : serviceIdentifier;\n    if (serviceIdentifier instanceof inject_1.LazyServiceIdentifer) {\n        serviceIdentifier = serviceIdentifier.unwrap();\n    }\n    if (isManaged) {\n        var isObject = serviceIdentifier === Object;\n        var isFunction = serviceIdentifier === Function;\n        var isUndefined = serviceIdentifier === undefined;\n        var isUnknownType = (isObject || isFunction || isUndefined);\n        if (!isBaseClass && isUnknownType) {\n            var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + index + \" in class \" + constructorName + \".\";\n            throw new Error(msg);\n        }\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);\n        target.metadata = targetMetadata;\n        return target;\n    }\n    return null;\n}\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {\n    var targets = [];\n    for (var i = 0; i < iterations; i++) {\n        var index = i;\n        var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);\n        if (target !== null) {\n            targets.push(target);\n        }\n    }\n    return targets;\n}\nfunction getClassPropsAsTargets(metadataReader, constructorFunc) {\n    var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);\n    var targets = [];\n    var keys = Object.keys(classPropsMetadata);\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        var targetMetadata = classPropsMetadata[key];\n        var metadata = formatTargetMetadata(classPropsMetadata[key]);\n        var targetName = metadata.targetName || key;\n        var serviceIdentifier = (metadata.inject || metadata.multiInject);\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ClassProperty, targetName, serviceIdentifier);\n        target.metadata = targetMetadata;\n        targets.push(target);\n    }\n    var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor);\n        targets = __spreadArrays(targets, baseTargets);\n    }\n    return targets;\n}\nfunction getBaseClassDependencyCount(metadataReader, func) {\n    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var baseConstructorName = serialization_1.getFunctionName(baseConstructor);\n        var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);\n        var metadata = targets.map(function (t) {\n            return t.metadata.filter(function (m) {\n                return m.key === METADATA_KEY.UNMANAGED_TAG;\n            });\n        });\n        var unmanagedCount = [].concat.apply([], metadata).length;\n        var dependencyCount = targets.length - unmanagedCount;\n        if (dependencyCount > 0) {\n            return dependencyCount;\n        }\n        else {\n            return getBaseClassDependencyCount(metadataReader, baseConstructor);\n        }\n    }\n    else {\n        return 0;\n    }\n}\nexports.getBaseClassDependencyCount = getBaseClassDependencyCount;\nfunction formatTargetMetadata(targetMetadata) {\n    var targetMetadataMap = {};\n    targetMetadata.forEach(function (m) {\n        targetMetadataMap[m.key.toString()] = m.value;\n    });\n    return {\n        inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\n        multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\n        targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\n        unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\n    };\n}\n"]},"metadata":{},"sourceType":"script"}