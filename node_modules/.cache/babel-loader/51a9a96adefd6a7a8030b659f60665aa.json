{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.injectable = void 0;\n\nvar ERRORS_MSGS = require(\"../constants/error_msgs\");\n\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\n\nfunction injectable() {\n  return function (target) {\n    if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {\n      throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);\n    }\n\n    var types = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];\n    Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);\n    return target;\n  };\n}\n\nexports.injectable = injectable;","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/node_modules/inversify/lib/annotation/injectable.js"],"names":["Object","defineProperty","exports","value","injectable","ERRORS_MSGS","require","METADATA_KEY","target","Reflect","hasOwnMetadata","PARAM_TYPES","Error","DUPLICATED_INJECTABLE_DECORATOR","types","getMetadata","DESIGN_PARAM_TYPES","defineMetadata"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,IAAIC,WAAW,GAAGC,OAAO,CAAC,yBAAD,CAAzB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,4BAAD,CAA1B;;AACA,SAASF,UAAT,GAAsB;AAClB,SAAO,UAAUI,MAAV,EAAkB;AACrB,QAAIC,OAAO,CAACC,cAAR,CAAuBH,YAAY,CAACI,WAApC,EAAiDH,MAAjD,CAAJ,EAA8D;AAC1D,YAAM,IAAII,KAAJ,CAAUP,WAAW,CAACQ,+BAAtB,CAAN;AACH;;AACD,QAAIC,KAAK,GAAGL,OAAO,CAACM,WAAR,CAAoBR,YAAY,CAACS,kBAAjC,EAAqDR,MAArD,KAAgE,EAA5E;AACAC,IAAAA,OAAO,CAACQ,cAAR,CAAuBV,YAAY,CAACI,WAApC,EAAiDG,KAAjD,EAAwDN,MAAxD;AACA,WAAOA,MAAP;AACH,GAPD;AAQH;;AACDN,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.injectable = void 0;\nvar ERRORS_MSGS = require(\"../constants/error_msgs\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nfunction injectable() {\n    return function (target) {\n        if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {\n            throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);\n        }\n        var types = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];\n        Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);\n        return target;\n    };\n}\nexports.injectable = injectable;\n"]},"metadata":{},"sourceType":"script"}