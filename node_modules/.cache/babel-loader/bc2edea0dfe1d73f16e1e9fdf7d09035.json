{"ast":null,"code":"import { each, size } from '@antv/util';\n/**\n * 是否有环的判断依据是，当前 source 对应的 target 是 source 的父节点\n * @param circleCache\n * @param source\n * @param target\n */\n\nfunction hasCircle(circleCache, source, target) {\n  // 父元素为空，则表示已经到头了！\n  if (size(source) === 0) return false; // target 在父元素路径上，所以形成环\n\n  if (source.includes(target)) return true; // 递归\n\n  return source.some(function (s) {\n    return hasCircle(circleCache, circleCache.get(s), target);\n  });\n}\n/**\n * 切断桑基图数据中的环（会丢失数据），保证顺序\n * @param data\n * @param sourceField\n * @param targetField\n */\n\n\nexport function cutoffCircle(data, sourceField, targetField) {\n  var dataWithoutCircle = [];\n  var removedData = [];\n  /** 存储父子关系的链表关系，具体是 子 -> 父 数组 */\n\n  var circleCache = new Map();\n  each(data, function (d) {\n    var source = d[sourceField];\n    var target = d[targetField]; // 当前数据，不成环\n\n    if (!hasCircle(circleCache, [source], target)) {\n      // 保留数据\n      dataWithoutCircle.push(d); // 存储关系链表\n\n      if (!circleCache.has(target)) {\n        circleCache.set(target, []);\n      }\n\n      circleCache.get(target).push(source);\n    } else {\n      // 保存起来用于打印 log\n      removedData.push(d);\n    }\n  });\n\n  if (removedData.length !== 0) {\n    console.warn(\"sankey data contains circle, \" + removedData.length + \" records removed.\", removedData);\n  }\n\n  return dataWithoutCircle;\n}","map":{"version":3,"sources":["../../../src/plots/sankey/circle.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,EAAe,IAAf,QAA2B,YAA3B;AAGA;;;;;AAKG;;AACH,SAAS,SAAT,CAAmB,WAAnB,EAAuD,MAAvD,EAAyE,MAAzE,EAAuF;AACrF;AACA,MAAI,IAAI,CAAC,MAAD,CAAJ,KAAiB,CAArB,EAAwB,OAAO,KAAP,CAF6D,CAGrF;;AACA,MAAI,MAAM,CAAC,QAAP,CAAgB,MAAhB,CAAJ,EAA6B,OAAO,IAAP,CAJwD,CAMrF;;AACA,SAAO,MAAM,CAAC,IAAP,CAAY,UAAC,CAAD,EAAU;AAAK,WAAA,SAAS,CAAC,WAAD,EAAc,WAAW,CAAC,GAAZ,CAAgB,CAAhB,CAAd,EAAT,MAAS,CAAT;AAAkD,GAA7E,CAAP;AACD;AAED;;;;;AAKG;;;AACH,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAAmC,WAAnC,EAAwD,WAAxD,EAA2E;AAC/E,MAAM,iBAAiB,GAAG,EAA1B;AACA,MAAM,WAAW,GAAG,EAApB;AAEA;;AACA,MAAM,WAAW,GAAG,IAAI,GAAJ,EAApB;AAEA,EAAA,IAAI,CAAC,IAAD,EAAO,UAAC,CAAD,EAAS;AAClB,QAAM,MAAM,GAAG,CAAC,CAAC,WAAD,CAAhB;AACA,QAAM,MAAM,GAAG,CAAC,CAAC,WAAD,CAAhB,CAFkB,CAIlB;;AACA,QAAI,CAAC,SAAS,CAAC,WAAD,EAAc,CAAC,MAAD,CAAd,EAAwB,MAAxB,CAAd,EAA+C;AAC7C;AACA,MAAA,iBAAiB,CAAC,IAAlB,CAAuB,CAAvB,EAF6C,CAG7C;;AACA,UAAI,CAAC,WAAW,CAAC,GAAZ,CAAgB,MAAhB,CAAL,EAA8B;AAC5B,QAAA,WAAW,CAAC,GAAZ,CAAgB,MAAhB,EAAwB,EAAxB;AACD;;AACD,MAAA,WAAW,CAAC,GAAZ,CAAgB,MAAhB,EAAwB,IAAxB,CAA6B,MAA7B;AACD,KARD,MAQO;AACL;AACA,MAAA,WAAW,CAAC,IAAZ,CAAiB,CAAjB;AACD;AACF,GAjBG,CAAJ;;AAmBA,MAAI,WAAW,CAAC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,IAAA,OAAO,CAAC,IAAR,CAAa,kCAAgC,WAAW,CAAC,MAA5C,GAAkD,mBAA/D,EAAoF,WAApF;AACD;;AAED,SAAO,iBAAP;AACD","sourcesContent":["import { each, size } from '@antv/util';\nimport { Data, Datum } from '../../types';\n\n/**\n * 是否有环的判断依据是，当前 source 对应的 target 是 source 的父节点\n * @param circleCache\n * @param source\n * @param target\n */\nfunction hasCircle(circleCache: Map<string, string[]>, source: string[], target: string): boolean {\n  // 父元素为空，则表示已经到头了！\n  if (size(source) === 0) return false;\n  // target 在父元素路径上，所以形成环\n  if (source.includes(target)) return true;\n\n  // 递归\n  return source.some((s: string) => hasCircle(circleCache, circleCache.get(s), target));\n}\n\n/**\n * 切断桑基图数据中的环（会丢失数据），保证顺序\n * @param data\n * @param sourceField\n * @param targetField\n */\nexport function cutoffCircle(data: Data, sourceField: string, targetField: string): Data {\n  const dataWithoutCircle = [];\n  const removedData = [];\n\n  /** 存储父子关系的链表关系，具体是 子 -> 父 数组 */\n  const circleCache = new Map<string, string[]>();\n\n  each(data, (d: Datum) => {\n    const source = d[sourceField] as string;\n    const target = d[targetField] as string;\n\n    // 当前数据，不成环\n    if (!hasCircle(circleCache, [source], target)) {\n      // 保留数据\n      dataWithoutCircle.push(d);\n      // 存储关系链表\n      if (!circleCache.has(target)) {\n        circleCache.set(target, []);\n      }\n      circleCache.get(target).push(source);\n    } else {\n      // 保存起来用于打印 log\n      removedData.push(d);\n    }\n  });\n\n  if (removedData.length !== 0) {\n    console.warn(`sankey data contains circle, ${removedData.length} records removed.`, removedData);\n  }\n\n  return dataWithoutCircle;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}