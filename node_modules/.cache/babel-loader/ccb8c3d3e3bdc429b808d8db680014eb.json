{"ast":null,"code":"import WebWorker from './work';\n\nfunction workerCode() {\n  // @ts-ignore\n  importScripts('https://unpkg.com/@antv/layout@latest/dist/layout.min.js');\n  var LAYOUT_MESSAGE = {\n    // run layout\n    RUN: 'LAYOUT_RUN',\n    // layout ended with success\n    END: 'LAYOUT_END',\n    // layout error\n    ERROR: 'LAYOUT_ERROR',\n    // layout tick, used in force directed layout\n    TICK: 'LAYOUT_TICK',\n    GPURUN: 'GPU_LAYOUT_RUN',\n    GPUEND: 'GPU_LAYOUT_END'\n  };\n\n  function isLayoutMessage(event) {\n    var type = event.data.type;\n    return type === LAYOUT_MESSAGE.RUN || type === LAYOUT_MESSAGE.GPURUN;\n  }\n\n  function handleLayoutMessage(event) {\n    var type = event.data.type;\n\n    switch (type) {\n      case LAYOUT_MESSAGE.RUN:\n        {\n          var _a = event.data,\n              nodes = _a.nodes,\n              edges = _a.edges,\n              _b = _a.layoutCfg,\n              layoutCfg = _b === void 0 ? {} : _b;\n          var layoutType = layoutCfg.type; // @ts-ignore\n\n          var LayoutClass = layout.getLayoutByName(layoutType);\n\n          if (!LayoutClass) {\n            this.postMessage({\n              type: LAYOUT_MESSAGE.ERROR,\n              message: \"layout \" + layoutType + \" not found\"\n            });\n            break;\n          }\n\n          var layoutMethod = new LayoutClass(layoutCfg);\n          layoutMethod.init({\n            nodes: nodes,\n            edges: edges\n          });\n          layoutMethod.execute();\n          this.postMessage({\n            type: LAYOUT_MESSAGE.END,\n            nodes: nodes\n          });\n          layoutMethod.destroy();\n          break;\n        }\n\n      case LAYOUT_MESSAGE.GPURUN:\n        {\n          var _c = event.data,\n              nodes = _c.nodes,\n              edges = _c.edges,\n              _d = _c.layoutCfg,\n              layoutCfg = _d === void 0 ? {} : _d,\n              canvas = _c.canvas;\n          var layoutType = layoutCfg.type; // @ts-ignore\n\n          var LayoutClass = layout.getLayoutByName(layoutType);\n\n          if (!LayoutClass) {\n            this.postMessage({\n              type: LAYOUT_MESSAGE.ERROR,\n              message: \"layout \" + layoutType + \" not found\"\n            });\n            break;\n          }\n\n          if (layoutType.split('-')[1] !== 'gpu') {\n            this.postMessage({\n              type: LAYOUT_MESSAGE.ERROR,\n              message: \"layout \" + layoutType + \" does not support GPU\"\n            });\n            break;\n          }\n\n          var layoutMethod = new LayoutClass(layoutCfg);\n          layoutMethod.init({\n            nodes: nodes,\n            edges: edges\n          });\n          layoutMethod.executeWithWorker(canvas, this);\n          break;\n        }\n\n      default:\n        break;\n    }\n  }\n\n  onmessage = function onmessage(event) {\n    if (isLayoutMessage(event)) {\n      handleLayoutMessage(event);\n    }\n  };\n}\n\nvar LayoutWorker = new WebWorker(workerCode);\nexport { LayoutWorker };","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/node_modules/@antv/g6-pc/es/layout/worker/layout.worker.js"],"names":["WebWorker","workerCode","importScripts","LAYOUT_MESSAGE","RUN","END","ERROR","TICK","GPURUN","GPUEND","isLayoutMessage","event","type","data","handleLayoutMessage","_a","nodes","edges","_b","layoutCfg","layoutType","LayoutClass","layout","getLayoutByName","postMessage","message","layoutMethod","init","execute","destroy","_c","_d","canvas","split","executeWithWorker","onmessage","LayoutWorker"],"mappings":"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","sourcesContent":["import WebWorker from './work';\n\nfunction workerCode() {\n  // @ts-ignore\n  importScripts('https://unpkg.com/@antv/layout@latest/dist/layout.min.js');\n  var LAYOUT_MESSAGE = {\n    // run layout\n    RUN: 'LAYOUT_RUN',\n    // layout ended with success\n    END: 'LAYOUT_END',\n    // layout error\n    ERROR: 'LAYOUT_ERROR',\n    // layout tick, used in force directed layout\n    TICK: 'LAYOUT_TICK',\n    GPURUN: 'GPU_LAYOUT_RUN',\n    GPUEND: 'GPU_LAYOUT_END'\n  };\n\n  function isLayoutMessage(event) {\n    var type = event.data.type;\n    return type === LAYOUT_MESSAGE.RUN || type === LAYOUT_MESSAGE.GPURUN;\n  }\n\n  function handleLayoutMessage(event) {\n    var type = event.data.type;\n\n    switch (type) {\n      case LAYOUT_MESSAGE.RUN:\n        {\n          var _a = event.data,\n              nodes = _a.nodes,\n              edges = _a.edges,\n              _b = _a.layoutCfg,\n              layoutCfg = _b === void 0 ? {} : _b;\n          var layoutType = layoutCfg.type; // @ts-ignore\n\n          var LayoutClass = layout.getLayoutByName(layoutType);\n\n          if (!LayoutClass) {\n            this.postMessage({\n              type: LAYOUT_MESSAGE.ERROR,\n              message: \"layout \" + layoutType + \" not found\"\n            });\n            break;\n          }\n\n          var layoutMethod = new LayoutClass(layoutCfg);\n          layoutMethod.init({\n            nodes: nodes,\n            edges: edges\n          });\n          layoutMethod.execute();\n          this.postMessage({\n            type: LAYOUT_MESSAGE.END,\n            nodes: nodes\n          });\n          layoutMethod.destroy();\n          break;\n        }\n\n      case LAYOUT_MESSAGE.GPURUN:\n        {\n          var _c = event.data,\n              nodes = _c.nodes,\n              edges = _c.edges,\n              _d = _c.layoutCfg,\n              layoutCfg = _d === void 0 ? {} : _d,\n              canvas = _c.canvas;\n          var layoutType = layoutCfg.type; // @ts-ignore\n\n          var LayoutClass = layout.getLayoutByName(layoutType);\n\n          if (!LayoutClass) {\n            this.postMessage({\n              type: LAYOUT_MESSAGE.ERROR,\n              message: \"layout \" + layoutType + \" not found\"\n            });\n            break;\n          }\n\n          if (layoutType.split('-')[1] !== 'gpu') {\n            this.postMessage({\n              type: LAYOUT_MESSAGE.ERROR,\n              message: \"layout \" + layoutType + \" does not support GPU\"\n            });\n            break;\n          }\n\n          var layoutMethod = new LayoutClass(layoutCfg);\n          layoutMethod.init({\n            nodes: nodes,\n            edges: edges\n          });\n          layoutMethod.executeWithWorker(canvas, this);\n          break;\n        }\n\n      default:\n        break;\n    }\n  }\n\n  onmessage = function onmessage(event) {\n    if (isLayoutMessage(event)) {\n      handleLayoutMessage(event);\n    }\n  };\n}\n\nvar LayoutWorker = new WebWorker(workerCode);\nexport { LayoutWorker };"]},"metadata":{},"sourceType":"module"}