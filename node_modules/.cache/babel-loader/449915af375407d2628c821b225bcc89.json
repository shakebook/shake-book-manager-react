{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveInstance = void 0;\n\nvar error_msgs_1 = require(\"../constants/error_msgs\");\n\nvar literal_types_1 = require(\"../constants/literal_types\");\n\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\n\nfunction _injectProperties(instance, childRequests, resolveRequest) {\n  var propertyInjectionsRequests = childRequests.filter(function (childRequest) {\n    return childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ClassProperty;\n  });\n  var propertyInjections = propertyInjectionsRequests.map(resolveRequest);\n  propertyInjectionsRequests.forEach(function (r, index) {\n    var propertyName = \"\";\n    propertyName = r.target.name.value();\n    var injection = propertyInjections[index];\n    instance[propertyName] = injection;\n  });\n  return instance;\n}\n\nfunction _createInstance(Func, injections) {\n  return new (Func.bind.apply(Func, __spreadArrays([void 0], injections)))();\n}\n\nfunction _postConstruct(constr, result) {\n  if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {\n    var data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);\n\n    try {\n      result[data.value]();\n    } catch (e) {\n      throw new Error(error_msgs_1.POST_CONSTRUCT_ERROR(constr.name, e.message));\n    }\n  }\n}\n\nfunction resolveInstance(constr, childRequests, resolveRequest) {\n  var result = null;\n\n  if (childRequests.length > 0) {\n    var constructorInjectionsRequests = childRequests.filter(function (childRequest) {\n      return childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ConstructorArgument;\n    });\n    var constructorInjections = constructorInjectionsRequests.map(resolveRequest);\n    result = _createInstance(constr, constructorInjections);\n    result = _injectProperties(result, childRequests, resolveRequest);\n  } else {\n    result = new constr();\n  }\n\n  _postConstruct(constr, result);\n\n  return result;\n}\n\nexports.resolveInstance = resolveInstance;","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/node_modules/inversify/lib/resolution/instantiation.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","Object","defineProperty","exports","value","resolveInstance","error_msgs_1","require","literal_types_1","METADATA_KEY","_injectProperties","instance","childRequests","resolveRequest","propertyInjectionsRequests","filter","childRequest","target","type","TargetTypeEnum","ClassProperty","propertyInjections","map","forEach","index","propertyName","name","injection","_createInstance","Func","injections","bind","apply","_postConstruct","constr","result","Reflect","hasMetadata","POST_CONSTRUCT","data","getMetadata","e","Error","POST_CONSTRUCT_ERROR","message","constructorInjectionsRequests","ConstructorArgument","constructorInjections"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveInstance = void 0;\nvar error_msgs_1 = require(\"../constants/error_msgs\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nfunction _injectProperties(instance, childRequests, resolveRequest) {\n    var propertyInjectionsRequests = childRequests.filter(function (childRequest) {\n        return (childRequest.target !== null &&\n            childRequest.target.type === literal_types_1.TargetTypeEnum.ClassProperty);\n    });\n    var propertyInjections = propertyInjectionsRequests.map(resolveRequest);\n    propertyInjectionsRequests.forEach(function (r, index) {\n        var propertyName = \"\";\n        propertyName = r.target.name.value();\n        var injection = propertyInjections[index];\n        instance[propertyName] = injection;\n    });\n    return instance;\n}\nfunction _createInstance(Func, injections) {\n    return new (Func.bind.apply(Func, __spreadArrays([void 0], injections)))();\n}\nfunction _postConstruct(constr, result) {\n    if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {\n        var data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);\n        try {\n            result[data.value]();\n        }\n        catch (e) {\n            throw new Error(error_msgs_1.POST_CONSTRUCT_ERROR(constr.name, e.message));\n        }\n    }\n}\nfunction resolveInstance(constr, childRequests, resolveRequest) {\n    var result = null;\n    if (childRequests.length > 0) {\n        var constructorInjectionsRequests = childRequests.filter(function (childRequest) {\n            return (childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ConstructorArgument);\n        });\n        var constructorInjections = constructorInjectionsRequests.map(resolveRequest);\n        result = _createInstance(constr, constructorInjections);\n        result = _injectProperties(result, childRequests, resolveRequest);\n    }\n    else {\n        result = new constr();\n    }\n    _postConstruct(constr, result);\n    return result;\n}\nexports.resolveInstance = resolveInstance;\n"]},"metadata":{},"sourceType":"script"}