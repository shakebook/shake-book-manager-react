{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { interaction, animation, theme } from '../../adaptor/common';\nimport { flow } from '../../utils';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { chordLayout } from '../../utils/transform/chord';\nimport { transformDataToNodeLinkData } from '../../utils/data';\nimport { X_FIELD, Y_FIELD, NODE_COLOR_FIELD, EDGE_COLOR_FIELD } from './constant';\n\nfunction transformData(params) {\n  // 将弦图数据放到ext中，nodeGeometry edgeGeometry使用\n  var options = params.options;\n  var data = options.data,\n      sourceField = options.sourceField,\n      targetField = options.targetField,\n      weightField = options.weightField,\n      nodePaddingRatio = options.nodePaddingRatio,\n      nodeWidthRatio = options.nodeWidthRatio; // 将数据转换为node link格式\n\n  var chordLayoutInputData = transformDataToNodeLinkData(data, sourceField, targetField, weightField);\n\n  var _a = chordLayout({\n    weight: true,\n    nodePaddingRatio: nodePaddingRatio,\n    nodeWidthRatio: nodeWidthRatio\n  }, chordLayoutInputData),\n      nodes = _a.nodes,\n      links = _a.links; // 1. 生成绘制node使用数据\n\n\n  var nodesData = nodes.map(function (node) {\n    return {\n      id: node.id,\n      x: node.x,\n      y: node.y,\n      name: node.name\n    };\n  }); // 2. 生成edge使用数据\n  // TODO: 对于边的数据暂时只支持两端一致\n\n  var edgesData = links.map(function (link) {\n    return {\n      source: link.source.name,\n      target: link.target.name,\n      x: link.x,\n      y: link.y,\n      value: link.value\n    };\n  });\n  return __assign(__assign({}, params), {\n    ext: __assign(__assign({}, params.ext), {\n      // 将chordData放到ext中，方便下面的geometry使用\n      chordData: {\n        nodesData: nodesData,\n        edgesData: edgesData\n      }\n    })\n  });\n}\n/**\n * scale配置\n * @param params 参数\n */\n\n\nfunction scale(params) {\n  var _a;\n\n  var chart = params.chart;\n  chart.scale((_a = {\n    x: {\n      sync: true,\n      nice: true\n    },\n    y: {\n      sync: true,\n      nice: true,\n      max: 1\n    }\n  }, _a[NODE_COLOR_FIELD] = {\n    sync: 'color'\n  }, _a[EDGE_COLOR_FIELD] = {\n    sync: 'color'\n  }, _a));\n  return params;\n}\n/**\n * axis配置\n * @param params 参数\n */\n\n\nfunction axis(params) {\n  var chart = params.chart;\n  chart.axis(false);\n  return params;\n}\n/**\n * legend配置\n * @param params 参数\n */\n\n\nfunction legend(params) {\n  var chart = params.chart;\n  chart.legend(false);\n  return params;\n}\n/**\n * tooltip配置\n * @param params 参数\n */\n\n\nfunction tooltip(params) {\n  var chart = params.chart;\n  chart.tooltip({\n    showTitle: false,\n    showMarkers: false\n  });\n  return params;\n}\n/**\n * coordinate配置\n * @param params 参数\n */\n\n\nfunction coordinate(params) {\n  var chart = params.chart;\n  chart.coordinate('polar').reflect('y');\n  return params;\n}\n/**\n * nodeGeometry配置\n * @param params 参数\n */\n\n\nfunction nodeGeometry(params) {\n  // node view\n  var chart = params.chart,\n      options = params.options;\n  var nodesData = params.ext.chordData.nodesData;\n  var nodeStyle = options.nodeStyle,\n      label = options.label;\n  var nodeView = chart.createView();\n  nodeView.data(nodesData); // 面\n\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: NODE_COLOR_FIELD,\n      polygon: {\n        style: nodeStyle\n      },\n      label: label,\n      tooltip: false\n    }\n  });\n  return params;\n}\n/**\n * edgeGeometry配置\n * @param params 参数\n */\n\n\nfunction edgeGeometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var edgesData = params.ext.chordData.edgesData;\n  var edgeStyle = options.edgeStyle,\n      tooltip = options.tooltip;\n  var edgeView = chart.createView();\n  edgeView.data(edgesData); // edge\n\n  var edgeOptions = {\n    xField: X_FIELD,\n    yField: Y_FIELD,\n    seriesField: EDGE_COLOR_FIELD,\n    edge: {\n      style: edgeStyle,\n      shape: 'arc'\n    },\n    tooltip: tooltip\n  };\n  edge({\n    chart: edgeView,\n    options: edgeOptions\n  });\n  return params;\n}\n/**\n * 弦图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(transformData, coordinate, scale, axis, legend, tooltip, edgeGeometry, nodeGeometry, interaction, animation, theme)(params);\n}","map":{"version":3,"sources":["../../../src/plots/chord/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { interaction, animation, theme } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow } from '../../utils';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { chordLayout } from '../../utils/transform/chord';\nimport { transformDataToNodeLinkData } from '../../utils/data';\nimport { ChordOptions } from './types';\nimport { X_FIELD, Y_FIELD, NODE_COLOR_FIELD, EDGE_COLOR_FIELD } from './constant';\n\nfunction transformData(params: Params<ChordOptions>): Params<ChordOptions> {\n  // 将弦图数据放到ext中，nodeGeometry edgeGeometry使用\n\n  const { options } = params;\n  const { data, sourceField, targetField, weightField, nodePaddingRatio, nodeWidthRatio } = options;\n\n  // 将数据转换为node link格式\n  const chordLayoutInputData = transformDataToNodeLinkData(data, sourceField, targetField, weightField);\n\n  const { nodes, links } = chordLayout({ weight: true, nodePaddingRatio, nodeWidthRatio }, chordLayoutInputData);\n\n  // 1. 生成绘制node使用数据\n  const nodesData = nodes.map((node) => {\n    return {\n      id: node.id,\n      x: node.x,\n      y: node.y,\n      name: node.name,\n      // value: node.value,\n    };\n  });\n\n  // 2. 生成edge使用数据\n  // TODO: 对于边的数据暂时只支持两端一致\n  const edgesData = links.map((link) => {\n    return {\n      source: link.source.name,\n      target: link.target.name,\n      x: link.x,\n      y: link.y,\n      value: link.value,\n    };\n  });\n\n  return {\n    ...params,\n    ext: {\n      ...params.ext,\n      // 将chordData放到ext中，方便下面的geometry使用\n      chordData: { nodesData, edgesData },\n    },\n  };\n}\n\n/**\n * scale配置\n * @param params 参数\n */\nfunction scale(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.scale({\n    x: { sync: true, nice: true },\n    y: { sync: true, nice: true, max: 1 },\n    [NODE_COLOR_FIELD]: { sync: 'color' },\n    [EDGE_COLOR_FIELD]: { sync: 'color' },\n  });\n  return params;\n}\n\n/**\n * axis配置\n * @param params 参数\n */\nfunction axis(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.axis(false);\n  return params;\n}\n\n/**\n * legend配置\n * @param params 参数\n */\nfunction legend(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.legend(false);\n  return params;\n}\n\n/**\n * tooltip配置\n * @param params 参数\n */\nfunction tooltip(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.tooltip({\n    showTitle: false,\n    showMarkers: false,\n  });\n  return params;\n}\n\n/**\n * coordinate配置\n * @param params 参数\n */\nfunction coordinate(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.coordinate('polar').reflect('y');\n  return params;\n}\n\n/**\n * nodeGeometry配置\n * @param params 参数\n */\nfunction nodeGeometry(params: Params<ChordOptions>): Params<ChordOptions> {\n  // node view\n  const { chart, options } = params;\n  const { nodesData } = params.ext.chordData;\n  const { nodeStyle, label } = options;\n\n  const nodeView = chart.createView();\n  nodeView.data(nodesData);\n\n  // 面\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: NODE_COLOR_FIELD,\n      polygon: {\n        style: nodeStyle,\n      },\n      label,\n      tooltip: false,\n    },\n  });\n  return params;\n}\n\n/**\n * edgeGeometry配置\n * @param params 参数\n */\nfunction edgeGeometry(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart, options } = params;\n  const { edgesData } = params.ext.chordData;\n  const { edgeStyle, tooltip } = options;\n\n  const edgeView = chart.createView();\n  edgeView.data(edgesData);\n\n  // edge\n  const edgeOptions = {\n    xField: X_FIELD,\n    yField: Y_FIELD,\n    seriesField: EDGE_COLOR_FIELD,\n    edge: {\n      style: edgeStyle,\n      shape: 'arc',\n    },\n    tooltip,\n  };\n  edge({\n    chart: edgeView,\n    options: edgeOptions,\n  });\n  return params;\n}\n\n/**\n * 弦图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<ChordOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    transformData,\n    coordinate,\n    scale,\n    axis,\n    legend,\n    tooltip,\n    edgeGeometry,\n    nodeGeometry,\n    interaction,\n    animation,\n    theme\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}