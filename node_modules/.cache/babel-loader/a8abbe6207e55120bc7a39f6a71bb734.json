{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray } from '@antv/util';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { deepAssign } from '../../utils';\nexport function isDrillDown(interactions) {\n  if (!isArray(interactions)) return false;\n  return interactions.findIndex(function (i) {\n    return i.type === 'treemap-drill-down';\n  }) > -1;\n}\nexport function getFommatInteractions(interactions, hierarchyConfig) {\n  var openDrillDown = isDrillDown(interactions);\n\n  if (openDrillDown) {\n    return interactions.map(function (i) {\n      if (i.type === 'treemap-drill-down') {\n        return deepAssign({}, i, {\n          cfg: {\n            hierarchyConfig: hierarchyConfig\n          }\n        });\n      }\n\n      return i;\n    });\n  }\n\n  return interactions;\n}\nexport function transformData(options) {\n  var data = options.data,\n      colorField = options.colorField,\n      openDrillDown = options.openDrillDown,\n      _a = options.hierarchyConfig,\n      hierarchyConfig = _a === void 0 ? {} : _a;\n  var nodes = treemap(data, __assign(__assign({}, hierarchyConfig), {\n    // @ts-ignore\n    type: 'hierarchy.treemap',\n    field: 'value',\n    as: ['x', 'y']\n  }));\n  var result = [];\n  nodes.forEach(function (node) {\n    if (node.depth === 0) {\n      return null;\n    } // 开启下钻，仅加载 depth === 1 的数据\n\n\n    if (openDrillDown && node.depth !== 1) {\n      return null;\n    } // 不开启下钻，加载所有叶子节点\n\n\n    if (!openDrillDown && node.children) {\n      return null;\n    }\n\n    var eachNode = Object.assign({}, node.data, {\n      x: node.x,\n      y: node.y,\n      depth: node.depth,\n      value: node.value\n    });\n\n    if (!node.data[colorField] && node.parent) {\n      var ancestorNode = node.ancestors().find(function (n) {\n        return n.data[colorField];\n      });\n      eachNode[colorField] = ancestorNode === null || ancestorNode === void 0 ? void 0 : ancestorNode.data[colorField];\n    } else {\n      eachNode[colorField] = node.data[colorField];\n    }\n\n    result.push(eachNode);\n  });\n  return result;\n}","map":{"version":3,"sources":["../../../src/plots/treemap/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArray } from '@antv/util';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { deepAssign } from '../../utils';\nimport { TreemapOptions } from './types';\n\nexport function isDrillDown(interactions: TreemapOptions['interactions']) {\n  if (!isArray(interactions)) return false;\n  return interactions.findIndex((i) => i.type === 'treemap-drill-down') > -1;\n}\n\nexport function getFommatInteractions(\n  interactions: TreemapOptions['interactions'],\n  hierarchyConfig: TreemapOptions['hierarchyConfig']\n): TreemapOptions['interactions'] {\n  const openDrillDown = isDrillDown(interactions);\n  if (openDrillDown) {\n    return interactions.map((i) => {\n      if (i.type === 'treemap-drill-down') {\n        return deepAssign({}, i, {\n          cfg: {\n            hierarchyConfig,\n          },\n        });\n      }\n      return i;\n    });\n  }\n  return interactions;\n}\n\ninterface TransformDataOptions {\n  data: TreemapOptions['data'];\n  colorField: TreemapOptions['colorField'];\n  openDrillDown: boolean;\n  hierarchyConfig?: TreemapOptions['hierarchyConfig'];\n}\n\nexport function transformData(options: TransformDataOptions) {\n  const { data, colorField, openDrillDown, hierarchyConfig = {} } = options;\n\n  const nodes = treemap(data, {\n    ...hierarchyConfig,\n    // @ts-ignore\n    type: 'hierarchy.treemap',\n    field: 'value',\n    as: ['x', 'y'],\n  });\n\n  const result = [];\n  nodes.forEach((node) => {\n    if (node.depth === 0) {\n      return null;\n    }\n\n    // 开启下钻，仅加载 depth === 1 的数据\n    if (openDrillDown && node.depth !== 1) {\n      return null;\n    }\n\n    // 不开启下钻，加载所有叶子节点\n    if (!openDrillDown && node.children) {\n      return null;\n    }\n\n    const eachNode = Object.assign({}, node.data, {\n      x: node.x,\n      y: node.y,\n      depth: node.depth,\n      value: node.value,\n    });\n    if (!node.data[colorField] && node.parent) {\n      const ancestorNode = node.ancestors().find((n) => n.data[colorField]);\n      eachNode[colorField] = ancestorNode?.data[colorField];\n    } else {\n      eachNode[colorField] = node.data[colorField];\n    }\n\n    result.push(eachNode);\n  });\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}