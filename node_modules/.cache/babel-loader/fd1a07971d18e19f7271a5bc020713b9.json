{"ast":null,"code":"import * as $protobuf from \"protobufjs\"; // Common aliases\n\nconst $util = $protobuf.util; // Exported root namespace\n\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\nexport const manager = $root.manager = (() => {\n  /**\n   * Namespace manager.\n   * @exports manager\n   * @namespace\n   */\n  const manager = {};\n\n  manager.EmptyRequest = function () {\n    /**\n     * Properties of an EmptyRequest.\n     * @memberof manager\n     * @interface IEmptyRequest\n     */\n\n    /**\n     * Constructs a new EmptyRequest.\n     * @memberof manager\n     * @classdesc Represents an EmptyRequest.\n     * @implements IEmptyRequest\n     * @constructor\n     * @param {manager.IEmptyRequest=} [properties] Properties to set\n     */\n    function EmptyRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Creates an EmptyRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof manager.EmptyRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {manager.EmptyRequest} EmptyRequest\n     */\n\n\n    EmptyRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.manager.EmptyRequest) return object;\n      return new $root.manager.EmptyRequest();\n    };\n    /**\n     * Creates a plain object from an EmptyRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof manager.EmptyRequest\n     * @static\n     * @param {manager.EmptyRequest} message EmptyRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    EmptyRequest.toObject = function toObject() {\n      return {};\n    };\n    /**\n     * Converts this EmptyRequest to JSON.\n     * @function toJSON\n     * @memberof manager.EmptyRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    EmptyRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EmptyRequest;\n  }();\n\n  manager.Response = function () {\n    /**\n     * Properties of a Response.\n     * @memberof manager\n     * @interface IResponse\n     * @property {boolean|null} [success] Response success\n     * @property {string|null} [message] Response message\n     */\n\n    /**\n     * Constructs a new Response.\n     * @memberof manager\n     * @classdesc Represents a Response.\n     * @implements IResponse\n     * @constructor\n     * @param {manager.IResponse=} [properties] Properties to set\n     */\n    function Response(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Response success.\n     * @member {boolean} success\n     * @memberof manager.Response\n     * @instance\n     */\n\n\n    Response.prototype.success = false;\n    /**\n     * Response message.\n     * @member {string} message\n     * @memberof manager.Response\n     * @instance\n     */\n\n    Response.prototype.message = \"\";\n    /**\n     * Creates a Response message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof manager.Response\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {manager.Response} Response\n     */\n\n    Response.fromObject = function fromObject(object) {\n      if (object instanceof $root.manager.Response) return object;\n      let message = new $root.manager.Response();\n      if (object.success != null) message.success = Boolean(object.success);\n      if (object.message != null) message.message = String(object.message);\n      return message;\n    };\n    /**\n     * Creates a plain object from a Response message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof manager.Response\n     * @static\n     * @param {manager.Response} message Response\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Response.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.success = false;\n        object.message = \"\";\n      }\n\n      if (message.success != null && message.hasOwnProperty(\"success\")) object.success = message.success;\n      if (message.message != null && message.hasOwnProperty(\"message\")) object.message = message.message;\n      return object;\n    };\n    /**\n     * Converts this Response to JSON.\n     * @function toJSON\n     * @memberof manager.Response\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Response.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Response;\n  }();\n\n  manager.Role = function () {\n    /**\n     * Properties of a Role.\n     * @memberof manager\n     * @interface IRole\n     * @property {number|null} [id] Role id\n     * @property {string|null} [roleName] Role roleName\n     * @property {string|null} [createAt] Role createAt\n     * @property {manager.RoleStatus|null} [roleStatus] Role roleStatus\n     */\n\n    /**\n     * Constructs a new Role.\n     * @memberof manager\n     * @classdesc Represents a Role.\n     * @implements IRole\n     * @constructor\n     * @param {manager.IRole=} [properties] Properties to set\n     */\n    function Role(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Role id.\n     * @member {number} id\n     * @memberof manager.Role\n     * @instance\n     */\n\n\n    Role.prototype.id = 0;\n    /**\n     * Role roleName.\n     * @member {string} roleName\n     * @memberof manager.Role\n     * @instance\n     */\n\n    Role.prototype.roleName = \"\";\n    /**\n     * Role createAt.\n     * @member {string} createAt\n     * @memberof manager.Role\n     * @instance\n     */\n\n    Role.prototype.createAt = \"\";\n    /**\n     * Role roleStatus.\n     * @member {manager.RoleStatus} roleStatus\n     * @memberof manager.Role\n     * @instance\n     */\n\n    Role.prototype.roleStatus = 0;\n    /**\n     * Creates a Role message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof manager.Role\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {manager.Role} Role\n     */\n\n    Role.fromObject = function fromObject(object) {\n      if (object instanceof $root.manager.Role) return object;\n      let message = new $root.manager.Role();\n      if (object.id != null) message.id = object.id | 0;\n      if (object.roleName != null) message.roleName = String(object.roleName);\n      if (object.createAt != null) message.createAt = String(object.createAt);\n\n      switch (object.roleStatus) {\n        case \"NORMAL\":\n        case 0:\n          message.roleStatus = 0;\n          break;\n\n        case \"DELETE\":\n        case 1:\n          message.roleStatus = 1;\n          break;\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a Role message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof manager.Role\n     * @static\n     * @param {manager.Role} message Role\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Role.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.id = 0;\n        object.roleName = \"\";\n        object.createAt = \"\";\n        object.roleStatus = options.enums === String ? \"NORMAL\" : 0;\n      }\n\n      if (message.id != null && message.hasOwnProperty(\"id\")) object.id = message.id;\n      if (message.roleName != null && message.hasOwnProperty(\"roleName\")) object.roleName = message.roleName;\n      if (message.createAt != null && message.hasOwnProperty(\"createAt\")) object.createAt = message.createAt;\n      if (message.roleStatus != null && message.hasOwnProperty(\"roleStatus\")) object.roleStatus = options.enums === String ? $root.manager.RoleStatus[message.roleStatus] : message.roleStatus;\n      return object;\n    };\n    /**\n     * Converts this Role to JSON.\n     * @function toJSON\n     * @memberof manager.Role\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Role.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Role;\n  }();\n\n  manager.GetRoleListResponse = function () {\n    /**\n     * Properties of a GetRoleListResponse.\n     * @memberof manager\n     * @interface IGetRoleListResponse\n     * @property {boolean|null} [success] GetRoleListResponse success\n     * @property {string|null} [message] GetRoleListResponse message\n     * @property {Array.<manager.IRole>|null} [data] GetRoleListResponse data\n     */\n\n    /**\n     * Constructs a new GetRoleListResponse.\n     * @memberof manager\n     * @classdesc Represents a GetRoleListResponse.\n     * @implements IGetRoleListResponse\n     * @constructor\n     * @param {manager.IGetRoleListResponse=} [properties] Properties to set\n     */\n    function GetRoleListResponse(properties) {\n      this.data = [];\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * GetRoleListResponse success.\n     * @member {boolean} success\n     * @memberof manager.GetRoleListResponse\n     * @instance\n     */\n\n\n    GetRoleListResponse.prototype.success = false;\n    /**\n     * GetRoleListResponse message.\n     * @member {string} message\n     * @memberof manager.GetRoleListResponse\n     * @instance\n     */\n\n    GetRoleListResponse.prototype.message = \"\";\n    /**\n     * GetRoleListResponse data.\n     * @member {Array.<manager.IRole>} data\n     * @memberof manager.GetRoleListResponse\n     * @instance\n     */\n\n    GetRoleListResponse.prototype.data = $util.emptyArray;\n    /**\n     * Creates a GetRoleListResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof manager.GetRoleListResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {manager.GetRoleListResponse} GetRoleListResponse\n     */\n\n    GetRoleListResponse.fromObject = function fromObject(object) {\n      if (object instanceof $root.manager.GetRoleListResponse) return object;\n      let message = new $root.manager.GetRoleListResponse();\n      if (object.success != null) message.success = Boolean(object.success);\n      if (object.message != null) message.message = String(object.message);\n\n      if (object.data) {\n        if (!Array.isArray(object.data)) throw TypeError(\".manager.GetRoleListResponse.data: array expected\");\n        message.data = [];\n\n        for (let i = 0; i < object.data.length; ++i) {\n          if (typeof object.data[i] !== \"object\") throw TypeError(\".manager.GetRoleListResponse.data: object expected\");\n          message.data[i] = $root.manager.Role.fromObject(object.data[i]);\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a GetRoleListResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof manager.GetRoleListResponse\n     * @static\n     * @param {manager.GetRoleListResponse} message GetRoleListResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    GetRoleListResponse.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n      if (options.arrays || options.defaults) object.data = [];\n\n      if (options.defaults) {\n        object.success = false;\n        object.message = \"\";\n      }\n\n      if (message.success != null && message.hasOwnProperty(\"success\")) object.success = message.success;\n      if (message.message != null && message.hasOwnProperty(\"message\")) object.message = message.message;\n\n      if (message.data && message.data.length) {\n        object.data = [];\n\n        for (let j = 0; j < message.data.length; ++j) object.data[j] = $root.manager.Role.toObject(message.data[j], options);\n      }\n\n      return object;\n    };\n    /**\n     * Converts this GetRoleListResponse to JSON.\n     * @function toJSON\n     * @memberof manager.GetRoleListResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    GetRoleListResponse.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return GetRoleListResponse;\n  }();\n  /**\n   * RoleStatus enum.\n   * @name manager.RoleStatus\n   * @enum {number}\n   * @property {number} NORMAL=0 NORMAL value\n   * @property {number} DELETE=1 DELETE value\n   */\n\n\n  manager.RoleStatus = function () {\n    const valuesById = {},\n          values = Object.create(valuesById);\n    values[valuesById[0] = \"NORMAL\"] = 0;\n    values[valuesById[1] = \"DELETE\"] = 1;\n    return values;\n  }();\n\n  manager.ManagerService = function () {\n    /**\n     * Constructs a new ManagerService service.\n     * @memberof manager\n     * @classdesc Represents a ManagerService\n     * @extends $protobuf.rpc.Service\n     * @constructor\n     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n     */\n    function ManagerService(rpcImpl, requestDelimited, responseDelimited) {\n      $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n    }\n\n    (ManagerService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ManagerService;\n    /**\n     * Callback as used by {@link manager.ManagerService#createRole}.\n     * @memberof manager.ManagerService\n     * @typedef CreateRoleCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {manager.Response} [response] Response\n     */\n\n    /**\n     * Calls CreateRole.\n     * @function createRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IRole} request Role message or plain object\n     * @param {manager.ManagerService.CreateRoleCallback} callback Node-style callback called with the error, if any, and Response\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(ManagerService.prototype.createRole = function createRole(request, callback) {\n      return this.rpcCall(createRole, $root.manager.Role, $root.manager.Response, request, callback);\n    }, \"name\", {\n      value: \"CreateRole\"\n    });\n    /**\n     * Calls CreateRole.\n     * @function createRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IRole} request Role message or plain object\n     * @returns {Promise<manager.Response>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link manager.ManagerService#getRoleList}.\n     * @memberof manager.ManagerService\n     * @typedef GetRoleListCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {manager.GetRoleListResponse} [response] GetRoleListResponse\n     */\n\n    /**\n     * Calls GetRoleList.\n     * @function getRoleList\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IEmptyRequest} request EmptyRequest message or plain object\n     * @param {manager.ManagerService.GetRoleListCallback} callback Node-style callback called with the error, if any, and GetRoleListResponse\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(ManagerService.prototype.getRoleList = function getRoleList(request, callback) {\n      return this.rpcCall(getRoleList, $root.manager.EmptyRequest, $root.manager.GetRoleListResponse, request, callback);\n    }, \"name\", {\n      value: \"GetRoleList\"\n    });\n    /**\n     * Calls GetRoleList.\n     * @function getRoleList\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IEmptyRequest} request EmptyRequest message or plain object\n     * @returns {Promise<manager.GetRoleListResponse>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link manager.ManagerService#updateRole}.\n     * @memberof manager.ManagerService\n     * @typedef UpdateRoleCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {manager.Response} [response] Response\n     */\n\n    /**\n     * Calls UpdateRole.\n     * @function updateRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IRole} request Role message or plain object\n     * @param {manager.ManagerService.UpdateRoleCallback} callback Node-style callback called with the error, if any, and Response\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(ManagerService.prototype.updateRole = function updateRole(request, callback) {\n      return this.rpcCall(updateRole, $root.manager.Role, $root.manager.Response, request, callback);\n    }, \"name\", {\n      value: \"UpdateRole\"\n    });\n    /**\n     * Calls UpdateRole.\n     * @function updateRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IRole} request Role message or plain object\n     * @returns {Promise<manager.Response>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link manager.ManagerService#deleteRole}.\n     * @memberof manager.ManagerService\n     * @typedef DeleteRoleCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {manager.Response} [response] Response\n     */\n\n    /**\n     * Calls DeleteRole.\n     * @function deleteRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IRole} request Role message or plain object\n     * @param {manager.ManagerService.DeleteRoleCallback} callback Node-style callback called with the error, if any, and Response\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(ManagerService.prototype.deleteRole = function deleteRole(request, callback) {\n      return this.rpcCall(deleteRole, $root.manager.Role, $root.manager.Response, request, callback);\n    }, \"name\", {\n      value: \"DeleteRole\"\n    });\n    /**\n     * Calls DeleteRole.\n     * @function deleteRole\n     * @memberof manager.ManagerService\n     * @instance\n     * @param {manager.IRole} request Role message or plain object\n     * @returns {Promise<manager.Response>} Promise\n     * @variation 2\n     */\n\n    return ManagerService;\n  }();\n\n  return manager;\n})();","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/src/service/api/v1/manager_pb.js"],"names":["$protobuf","$util","util","$root","roots","manager","EmptyRequest","properties","keys","Object","i","length","fromObject","object","toObject","prototype","toJSON","constructor","toJSONOptions","Response","success","message","Boolean","String","options","defaults","hasOwnProperty","Role","id","roleName","createAt","roleStatus","enums","RoleStatus","GetRoleListResponse","data","emptyArray","Array","isArray","TypeError","arrays","j","valuesById","values","create","ManagerService","rpcImpl","requestDelimited","responseDelimited","rpc","Service","call","defineProperty","createRole","request","callback","rpcCall","value","getRoleList","updateRole","deleteRole"],"mappings":"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","sourcesContent":["import * as $protobuf from \"protobufjs\";\n\n// Common aliases\nconst $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const manager = $root.manager = (() => {\n\n    /**\n     * Namespace manager.\n     * @exports manager\n     * @namespace\n     */\n    const manager = {};\n\n    manager.EmptyRequest = (function() {\n\n        /**\n         * Properties of an EmptyRequest.\n         * @memberof manager\n         * @interface IEmptyRequest\n         */\n\n        /**\n         * Constructs a new EmptyRequest.\n         * @memberof manager\n         * @classdesc Represents an EmptyRequest.\n         * @implements IEmptyRequest\n         * @constructor\n         * @param {manager.IEmptyRequest=} [properties] Properties to set\n         */\n        function EmptyRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates an EmptyRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof manager.EmptyRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {manager.EmptyRequest} EmptyRequest\n         */\n        EmptyRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.manager.EmptyRequest)\n                return object;\n            return new $root.manager.EmptyRequest();\n        };\n\n        /**\n         * Creates a plain object from an EmptyRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof manager.EmptyRequest\n         * @static\n         * @param {manager.EmptyRequest} message EmptyRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EmptyRequest.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this EmptyRequest to JSON.\n         * @function toJSON\n         * @memberof manager.EmptyRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EmptyRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return EmptyRequest;\n    })();\n\n    manager.Response = (function() {\n\n        /**\n         * Properties of a Response.\n         * @memberof manager\n         * @interface IResponse\n         * @property {boolean|null} [success] Response success\n         * @property {string|null} [message] Response message\n         */\n\n        /**\n         * Constructs a new Response.\n         * @memberof manager\n         * @classdesc Represents a Response.\n         * @implements IResponse\n         * @constructor\n         * @param {manager.IResponse=} [properties] Properties to set\n         */\n        function Response(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Response success.\n         * @member {boolean} success\n         * @memberof manager.Response\n         * @instance\n         */\n        Response.prototype.success = false;\n\n        /**\n         * Response message.\n         * @member {string} message\n         * @memberof manager.Response\n         * @instance\n         */\n        Response.prototype.message = \"\";\n\n        /**\n         * Creates a Response message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof manager.Response\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {manager.Response} Response\n         */\n        Response.fromObject = function fromObject(object) {\n            if (object instanceof $root.manager.Response)\n                return object;\n            let message = new $root.manager.Response();\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            if (object.message != null)\n                message.message = String(object.message);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Response message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof manager.Response\n         * @static\n         * @param {manager.Response} message Response\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Response.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.success = false;\n                object.message = \"\";\n            }\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            return object;\n        };\n\n        /**\n         * Converts this Response to JSON.\n         * @function toJSON\n         * @memberof manager.Response\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Response.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Response;\n    })();\n\n    manager.Role = (function() {\n\n        /**\n         * Properties of a Role.\n         * @memberof manager\n         * @interface IRole\n         * @property {number|null} [id] Role id\n         * @property {string|null} [roleName] Role roleName\n         * @property {string|null} [createAt] Role createAt\n         * @property {manager.RoleStatus|null} [roleStatus] Role roleStatus\n         */\n\n        /**\n         * Constructs a new Role.\n         * @memberof manager\n         * @classdesc Represents a Role.\n         * @implements IRole\n         * @constructor\n         * @param {manager.IRole=} [properties] Properties to set\n         */\n        function Role(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Role id.\n         * @member {number} id\n         * @memberof manager.Role\n         * @instance\n         */\n        Role.prototype.id = 0;\n\n        /**\n         * Role roleName.\n         * @member {string} roleName\n         * @memberof manager.Role\n         * @instance\n         */\n        Role.prototype.roleName = \"\";\n\n        /**\n         * Role createAt.\n         * @member {string} createAt\n         * @memberof manager.Role\n         * @instance\n         */\n        Role.prototype.createAt = \"\";\n\n        /**\n         * Role roleStatus.\n         * @member {manager.RoleStatus} roleStatus\n         * @memberof manager.Role\n         * @instance\n         */\n        Role.prototype.roleStatus = 0;\n\n        /**\n         * Creates a Role message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof manager.Role\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {manager.Role} Role\n         */\n        Role.fromObject = function fromObject(object) {\n            if (object instanceof $root.manager.Role)\n                return object;\n            let message = new $root.manager.Role();\n            if (object.id != null)\n                message.id = object.id | 0;\n            if (object.roleName != null)\n                message.roleName = String(object.roleName);\n            if (object.createAt != null)\n                message.createAt = String(object.createAt);\n            switch (object.roleStatus) {\n            case \"NORMAL\":\n            case 0:\n                message.roleStatus = 0;\n                break;\n            case \"DELETE\":\n            case 1:\n                message.roleStatus = 1;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Role message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof manager.Role\n         * @static\n         * @param {manager.Role} message Role\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Role.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.id = 0;\n                object.roleName = \"\";\n                object.createAt = \"\";\n                object.roleStatus = options.enums === String ? \"NORMAL\" : 0;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.roleName != null && message.hasOwnProperty(\"roleName\"))\n                object.roleName = message.roleName;\n            if (message.createAt != null && message.hasOwnProperty(\"createAt\"))\n                object.createAt = message.createAt;\n            if (message.roleStatus != null && message.hasOwnProperty(\"roleStatus\"))\n                object.roleStatus = options.enums === String ? $root.manager.RoleStatus[message.roleStatus] : message.roleStatus;\n            return object;\n        };\n\n        /**\n         * Converts this Role to JSON.\n         * @function toJSON\n         * @memberof manager.Role\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Role.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Role;\n    })();\n\n    manager.GetRoleListResponse = (function() {\n\n        /**\n         * Properties of a GetRoleListResponse.\n         * @memberof manager\n         * @interface IGetRoleListResponse\n         * @property {boolean|null} [success] GetRoleListResponse success\n         * @property {string|null} [message] GetRoleListResponse message\n         * @property {Array.<manager.IRole>|null} [data] GetRoleListResponse data\n         */\n\n        /**\n         * Constructs a new GetRoleListResponse.\n         * @memberof manager\n         * @classdesc Represents a GetRoleListResponse.\n         * @implements IGetRoleListResponse\n         * @constructor\n         * @param {manager.IGetRoleListResponse=} [properties] Properties to set\n         */\n        function GetRoleListResponse(properties) {\n            this.data = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GetRoleListResponse success.\n         * @member {boolean} success\n         * @memberof manager.GetRoleListResponse\n         * @instance\n         */\n        GetRoleListResponse.prototype.success = false;\n\n        /**\n         * GetRoleListResponse message.\n         * @member {string} message\n         * @memberof manager.GetRoleListResponse\n         * @instance\n         */\n        GetRoleListResponse.prototype.message = \"\";\n\n        /**\n         * GetRoleListResponse data.\n         * @member {Array.<manager.IRole>} data\n         * @memberof manager.GetRoleListResponse\n         * @instance\n         */\n        GetRoleListResponse.prototype.data = $util.emptyArray;\n\n        /**\n         * Creates a GetRoleListResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof manager.GetRoleListResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {manager.GetRoleListResponse} GetRoleListResponse\n         */\n        GetRoleListResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.manager.GetRoleListResponse)\n                return object;\n            let message = new $root.manager.GetRoleListResponse();\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            if (object.message != null)\n                message.message = String(object.message);\n            if (object.data) {\n                if (!Array.isArray(object.data))\n                    throw TypeError(\".manager.GetRoleListResponse.data: array expected\");\n                message.data = [];\n                for (let i = 0; i < object.data.length; ++i) {\n                    if (typeof object.data[i] !== \"object\")\n                        throw TypeError(\".manager.GetRoleListResponse.data: object expected\");\n                    message.data[i] = $root.manager.Role.fromObject(object.data[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GetRoleListResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof manager.GetRoleListResponse\n         * @static\n         * @param {manager.GetRoleListResponse} message GetRoleListResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GetRoleListResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.data = [];\n            if (options.defaults) {\n                object.success = false;\n                object.message = \"\";\n            }\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.data && message.data.length) {\n                object.data = [];\n                for (let j = 0; j < message.data.length; ++j)\n                    object.data[j] = $root.manager.Role.toObject(message.data[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GetRoleListResponse to JSON.\n         * @function toJSON\n         * @memberof manager.GetRoleListResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GetRoleListResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GetRoleListResponse;\n    })();\n\n    /**\n     * RoleStatus enum.\n     * @name manager.RoleStatus\n     * @enum {number}\n     * @property {number} NORMAL=0 NORMAL value\n     * @property {number} DELETE=1 DELETE value\n     */\n    manager.RoleStatus = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NORMAL\"] = 0;\n        values[valuesById[1] = \"DELETE\"] = 1;\n        return values;\n    })();\n\n    manager.ManagerService = (function() {\n\n        /**\n         * Constructs a new ManagerService service.\n         * @memberof manager\n         * @classdesc Represents a ManagerService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function ManagerService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (ManagerService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ManagerService;\n\n        /**\n         * Callback as used by {@link manager.ManagerService#createRole}.\n         * @memberof manager.ManagerService\n         * @typedef CreateRoleCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {manager.Response} [response] Response\n         */\n\n        /**\n         * Calls CreateRole.\n         * @function createRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IRole} request Role message or plain object\n         * @param {manager.ManagerService.CreateRoleCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ManagerService.prototype.createRole = function createRole(request, callback) {\n            return this.rpcCall(createRole, $root.manager.Role, $root.manager.Response, request, callback);\n        }, \"name\", { value: \"CreateRole\" });\n\n        /**\n         * Calls CreateRole.\n         * @function createRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IRole} request Role message or plain object\n         * @returns {Promise<manager.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link manager.ManagerService#getRoleList}.\n         * @memberof manager.ManagerService\n         * @typedef GetRoleListCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {manager.GetRoleListResponse} [response] GetRoleListResponse\n         */\n\n        /**\n         * Calls GetRoleList.\n         * @function getRoleList\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IEmptyRequest} request EmptyRequest message or plain object\n         * @param {manager.ManagerService.GetRoleListCallback} callback Node-style callback called with the error, if any, and GetRoleListResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ManagerService.prototype.getRoleList = function getRoleList(request, callback) {\n            return this.rpcCall(getRoleList, $root.manager.EmptyRequest, $root.manager.GetRoleListResponse, request, callback);\n        }, \"name\", { value: \"GetRoleList\" });\n\n        /**\n         * Calls GetRoleList.\n         * @function getRoleList\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IEmptyRequest} request EmptyRequest message or plain object\n         * @returns {Promise<manager.GetRoleListResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link manager.ManagerService#updateRole}.\n         * @memberof manager.ManagerService\n         * @typedef UpdateRoleCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {manager.Response} [response] Response\n         */\n\n        /**\n         * Calls UpdateRole.\n         * @function updateRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IRole} request Role message or plain object\n         * @param {manager.ManagerService.UpdateRoleCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ManagerService.prototype.updateRole = function updateRole(request, callback) {\n            return this.rpcCall(updateRole, $root.manager.Role, $root.manager.Response, request, callback);\n        }, \"name\", { value: \"UpdateRole\" });\n\n        /**\n         * Calls UpdateRole.\n         * @function updateRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IRole} request Role message or plain object\n         * @returns {Promise<manager.Response>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link manager.ManagerService#deleteRole}.\n         * @memberof manager.ManagerService\n         * @typedef DeleteRoleCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {manager.Response} [response] Response\n         */\n\n        /**\n         * Calls DeleteRole.\n         * @function deleteRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IRole} request Role message or plain object\n         * @param {manager.ManagerService.DeleteRoleCallback} callback Node-style callback called with the error, if any, and Response\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(ManagerService.prototype.deleteRole = function deleteRole(request, callback) {\n            return this.rpcCall(deleteRole, $root.manager.Role, $root.manager.Response, request, callback);\n        }, \"name\", { value: \"DeleteRole\" });\n\n        /**\n         * Calls DeleteRole.\n         * @function deleteRole\n         * @memberof manager.ManagerService\n         * @instance\n         * @param {manager.IRole} request Role message or plain object\n         * @returns {Promise<manager.Response>} Promise\n         * @variation 2\n         */\n\n        return ManagerService;\n    })();\n\n    return manager;\n})();"]},"metadata":{},"sourceType":"module"}