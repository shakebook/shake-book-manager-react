{"ast":null,"code":"import * as $protobuf from \"protobufjs\"; // Common aliases\n\nconst $util = $protobuf.util; // Exported root namespace\n\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\nexport const shakebook = $root.shakebook = (() => {\n  /**\n   * Namespace shakebook.\n   * @exports shakebook\n   * @namespace\n   */\n  const shakebook = {};\n\n  shakebook.ErrorResponse = function () {\n    /**\n     * Properties of an ErrorResponse.\n     * @memberof shakebook\n     * @interface IErrorResponse\n     * @property {number|null} [code] ErrorResponse code\n     * @property {string|null} [message] ErrorResponse message\n     */\n\n    /**\n     * Constructs a new ErrorResponse.\n     * @memberof shakebook\n     * @classdesc Represents an ErrorResponse.\n     * @implements IErrorResponse\n     * @constructor\n     * @param {shakebook.IErrorResponse=} [properties] Properties to set\n     */\n    function ErrorResponse(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * ErrorResponse code.\n     * @member {number} code\n     * @memberof shakebook.ErrorResponse\n     * @instance\n     */\n\n\n    ErrorResponse.prototype.code = 0;\n    /**\n     * ErrorResponse message.\n     * @member {string} message\n     * @memberof shakebook.ErrorResponse\n     * @instance\n     */\n\n    ErrorResponse.prototype.message = \"\";\n    /**\n     * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.ErrorResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.ErrorResponse} ErrorResponse\n     */\n\n    ErrorResponse.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.ErrorResponse) return object;\n      let message = new $root.shakebook.ErrorResponse();\n      if (object.code != null) message.code = object.code | 0;\n      if (object.message != null) message.message = String(object.message);\n      return message;\n    };\n    /**\n     * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.ErrorResponse\n     * @static\n     * @param {shakebook.ErrorResponse} message ErrorResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    ErrorResponse.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.code = 0;\n        object.message = \"\";\n      }\n\n      if (message.code != null && message.hasOwnProperty(\"code\")) object.code = message.code;\n      if (message.message != null && message.hasOwnProperty(\"message\")) object.message = message.message;\n      return object;\n    };\n    /**\n     * Converts this ErrorResponse to JSON.\n     * @function toJSON\n     * @memberof shakebook.ErrorResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    ErrorResponse.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ErrorResponse;\n  }();\n\n  shakebook.SignUpRequest = function () {\n    /**\n     * Properties of a SignUpRequest.\n     * @memberof shakebook\n     * @interface ISignUpRequest\n     * @property {string|null} [accountName] SignUpRequest accountName\n     * @property {string|null} [accountEmail] SignUpRequest accountEmail\n     * @property {string|null} [accountPassword] SignUpRequest accountPassword\n     * @property {string|null} [emailValidCode] SignUpRequest emailValidCode\n     */\n\n    /**\n     * Constructs a new SignUpRequest.\n     * @memberof shakebook\n     * @classdesc Represents a SignUpRequest.\n     * @implements ISignUpRequest\n     * @constructor\n     * @param {shakebook.ISignUpRequest=} [properties] Properties to set\n     */\n    function SignUpRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * SignUpRequest accountName.\n     * @member {string} accountName\n     * @memberof shakebook.SignUpRequest\n     * @instance\n     */\n\n\n    SignUpRequest.prototype.accountName = \"\";\n    /**\n     * SignUpRequest accountEmail.\n     * @member {string} accountEmail\n     * @memberof shakebook.SignUpRequest\n     * @instance\n     */\n\n    SignUpRequest.prototype.accountEmail = \"\";\n    /**\n     * SignUpRequest accountPassword.\n     * @member {string} accountPassword\n     * @memberof shakebook.SignUpRequest\n     * @instance\n     */\n\n    SignUpRequest.prototype.accountPassword = \"\";\n    /**\n     * SignUpRequest emailValidCode.\n     * @member {string} emailValidCode\n     * @memberof shakebook.SignUpRequest\n     * @instance\n     */\n\n    SignUpRequest.prototype.emailValidCode = \"\";\n    /**\n     * Creates a SignUpRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.SignUpRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.SignUpRequest} SignUpRequest\n     */\n\n    SignUpRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.SignUpRequest) return object;\n      let message = new $root.shakebook.SignUpRequest();\n      if (object.accountName != null) message.accountName = String(object.accountName);\n      if (object.accountEmail != null) message.accountEmail = String(object.accountEmail);\n      if (object.accountPassword != null) message.accountPassword = String(object.accountPassword);\n      if (object.emailValidCode != null) message.emailValidCode = String(object.emailValidCode);\n      return message;\n    };\n    /**\n     * Creates a plain object from a SignUpRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.SignUpRequest\n     * @static\n     * @param {shakebook.SignUpRequest} message SignUpRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    SignUpRequest.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.accountName = \"\";\n        object.accountEmail = \"\";\n        object.accountPassword = \"\";\n        object.emailValidCode = \"\";\n      }\n\n      if (message.accountName != null && message.hasOwnProperty(\"accountName\")) object.accountName = message.accountName;\n      if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\")) object.accountEmail = message.accountEmail;\n      if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\")) object.accountPassword = message.accountPassword;\n      if (message.emailValidCode != null && message.hasOwnProperty(\"emailValidCode\")) object.emailValidCode = message.emailValidCode;\n      return object;\n    };\n    /**\n     * Converts this SignUpRequest to JSON.\n     * @function toJSON\n     * @memberof shakebook.SignUpRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    SignUpRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SignUpRequest;\n  }();\n\n  shakebook.AccountId = function () {\n    /**\n     * Properties of an AccountId.\n     * @memberof shakebook\n     * @interface IAccountId\n     * @property {number|null} [id] AccountId id\n     */\n\n    /**\n     * Constructs a new AccountId.\n     * @memberof shakebook\n     * @classdesc Represents an AccountId.\n     * @implements IAccountId\n     * @constructor\n     * @param {shakebook.IAccountId=} [properties] Properties to set\n     */\n    function AccountId(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * AccountId id.\n     * @member {number} id\n     * @memberof shakebook.AccountId\n     * @instance\n     */\n\n\n    AccountId.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * Creates an AccountId message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.AccountId\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.AccountId} AccountId\n     */\n\n    AccountId.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.AccountId) return object;\n      let message = new $root.shakebook.AccountId();\n      if (object.id != null) if ($util.Long) (message.id = $util.Long.fromValue(object.id)).unsigned = false;else if (typeof object.id === \"string\") message.id = parseInt(object.id, 10);else if (typeof object.id === \"number\") message.id = object.id;else if (typeof object.id === \"object\") message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();\n      return message;\n    };\n    /**\n     * Creates a plain object from an AccountId message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.AccountId\n     * @static\n     * @param {shakebook.AccountId} message AccountId\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    AccountId.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n      if (options.defaults) if ($util.Long) {\n        let long = new $util.Long(0, 0, false);\n        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.id = options.longs === String ? \"0\" : 0;\n      if (message.id != null && message.hasOwnProperty(\"id\")) if (typeof message.id === \"number\") object.id = options.longs === String ? String(message.id) : message.id;else object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;\n      return object;\n    };\n    /**\n     * Converts this AccountId to JSON.\n     * @function toJSON\n     * @memberof shakebook.AccountId\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    AccountId.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AccountId;\n  }();\n\n  shakebook.SignInRequest = function () {\n    /**\n     * Properties of a SignInRequest.\n     * @memberof shakebook\n     * @interface ISignInRequest\n     * @property {string|null} [accountName] SignInRequest accountName\n     * @property {string|null} [accountPassword] SignInRequest accountPassword\n     */\n\n    /**\n     * Constructs a new SignInRequest.\n     * @memberof shakebook\n     * @classdesc Represents a SignInRequest.\n     * @implements ISignInRequest\n     * @constructor\n     * @param {shakebook.ISignInRequest=} [properties] Properties to set\n     */\n    function SignInRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * SignInRequest accountName.\n     * @member {string} accountName\n     * @memberof shakebook.SignInRequest\n     * @instance\n     */\n\n\n    SignInRequest.prototype.accountName = \"\";\n    /**\n     * SignInRequest accountPassword.\n     * @member {string} accountPassword\n     * @memberof shakebook.SignInRequest\n     * @instance\n     */\n\n    SignInRequest.prototype.accountPassword = \"\";\n    /**\n     * Creates a SignInRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.SignInRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.SignInRequest} SignInRequest\n     */\n\n    SignInRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.SignInRequest) return object;\n      let message = new $root.shakebook.SignInRequest();\n      if (object.accountName != null) message.accountName = String(object.accountName);\n      if (object.accountPassword != null) message.accountPassword = String(object.accountPassword);\n      return message;\n    };\n    /**\n     * Creates a plain object from a SignInRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.SignInRequest\n     * @static\n     * @param {shakebook.SignInRequest} message SignInRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    SignInRequest.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.accountName = \"\";\n        object.accountPassword = \"\";\n      }\n\n      if (message.accountName != null && message.hasOwnProperty(\"accountName\")) object.accountName = message.accountName;\n      if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\")) object.accountPassword = message.accountPassword;\n      return object;\n    };\n    /**\n     * Converts this SignInRequest to JSON.\n     * @function toJSON\n     * @memberof shakebook.SignInRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    SignInRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SignInRequest;\n  }();\n\n  shakebook.SignInResponse = function () {\n    /**\n     * Properties of a SignInResponse.\n     * @memberof shakebook\n     * @interface ISignInResponse\n     * @property {boolean|null} [success] SignInResponse success\n     * @property {string|null} [message] SignInResponse message\n     * @property {string|null} [data] SignInResponse data\n     */\n\n    /**\n     * Constructs a new SignInResponse.\n     * @memberof shakebook\n     * @classdesc Represents a SignInResponse.\n     * @implements ISignInResponse\n     * @constructor\n     * @param {shakebook.ISignInResponse=} [properties] Properties to set\n     */\n    function SignInResponse(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * SignInResponse success.\n     * @member {boolean} success\n     * @memberof shakebook.SignInResponse\n     * @instance\n     */\n\n\n    SignInResponse.prototype.success = false;\n    /**\n     * SignInResponse message.\n     * @member {string} message\n     * @memberof shakebook.SignInResponse\n     * @instance\n     */\n\n    SignInResponse.prototype.message = \"\";\n    /**\n     * SignInResponse data.\n     * @member {string} data\n     * @memberof shakebook.SignInResponse\n     * @instance\n     */\n\n    SignInResponse.prototype.data = \"\";\n    /**\n     * Creates a SignInResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.SignInResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.SignInResponse} SignInResponse\n     */\n\n    SignInResponse.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.SignInResponse) return object;\n      let message = new $root.shakebook.SignInResponse();\n      if (object.success != null) message.success = Boolean(object.success);\n      if (object.message != null) message.message = String(object.message);\n      if (object.data != null) message.data = String(object.data);\n      return message;\n    };\n    /**\n     * Creates a plain object from a SignInResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.SignInResponse\n     * @static\n     * @param {shakebook.SignInResponse} message SignInResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    SignInResponse.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.success = false;\n        object.message = \"\";\n        object.data = \"\";\n      }\n\n      if (message.success != null && message.hasOwnProperty(\"success\")) object.success = message.success;\n      if (message.message != null && message.hasOwnProperty(\"message\")) object.message = message.message;\n      if (message.data != null && message.hasOwnProperty(\"data\")) object.data = message.data;\n      return object;\n    };\n    /**\n     * Converts this SignInResponse to JSON.\n     * @function toJSON\n     * @memberof shakebook.SignInResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    SignInResponse.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SignInResponse;\n  }();\n  /**\n   * AccountStatus enum.\n   * @name shakebook.AccountStatus\n   * @enum {number}\n   * @property {number} NORMAL=0 NORMAL value\n   * @property {number} DISABLE=1 DISABLE value\n   * @property {number} LOCK=2 LOCK value\n   * @property {number} DELETE=3 DELETE value\n   */\n\n\n  shakebook.AccountStatus = function () {\n    const valuesById = {},\n          values = Object.create(valuesById);\n    values[valuesById[0] = \"NORMAL\"] = 0;\n    values[valuesById[1] = \"DISABLE\"] = 1;\n    values[valuesById[2] = \"LOCK\"] = 2;\n    values[valuesById[3] = \"DELETE\"] = 3;\n    return values;\n  }();\n\n  shakebook.UpdateAccountRequest = function () {\n    /**\n     * Properties of an UpdateAccountRequest.\n     * @memberof shakebook\n     * @interface IUpdateAccountRequest\n     * @property {string|null} [accountName] UpdateAccountRequest accountName\n     * @property {string|null} [accountEmail] UpdateAccountRequest accountEmail\n     * @property {string|null} [accountPhone] UpdateAccountRequest accountPhone\n     * @property {string|null} [imageUrl] UpdateAccountRequest imageUrl\n     * @property {string|null} [backgroundUrl] UpdateAccountRequest backgroundUrl\n     * @property {string|null} [accountDesc] UpdateAccountRequest accountDesc\n     * @property {shakebook.AccountStatus|null} [accountStatus] UpdateAccountRequest accountStatus\n     * @property {string|null} [accountPassword] UpdateAccountRequest accountPassword\n     */\n\n    /**\n     * Constructs a new UpdateAccountRequest.\n     * @memberof shakebook\n     * @classdesc Represents an UpdateAccountRequest.\n     * @implements IUpdateAccountRequest\n     * @constructor\n     * @param {shakebook.IUpdateAccountRequest=} [properties] Properties to set\n     */\n    function UpdateAccountRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * UpdateAccountRequest accountName.\n     * @member {string} accountName\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n\n    UpdateAccountRequest.prototype.accountName = \"\";\n    /**\n     * UpdateAccountRequest accountEmail.\n     * @member {string} accountEmail\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.accountEmail = \"\";\n    /**\n     * UpdateAccountRequest accountPhone.\n     * @member {string} accountPhone\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.accountPhone = \"\";\n    /**\n     * UpdateAccountRequest imageUrl.\n     * @member {string} imageUrl\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.imageUrl = \"\";\n    /**\n     * UpdateAccountRequest backgroundUrl.\n     * @member {string} backgroundUrl\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.backgroundUrl = \"\";\n    /**\n     * UpdateAccountRequest accountDesc.\n     * @member {string} accountDesc\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.accountDesc = \"\";\n    /**\n     * UpdateAccountRequest accountStatus.\n     * @member {shakebook.AccountStatus} accountStatus\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.accountStatus = 0;\n    /**\n     * UpdateAccountRequest accountPassword.\n     * @member {string} accountPassword\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     */\n\n    UpdateAccountRequest.prototype.accountPassword = \"\";\n    /**\n     * Creates an UpdateAccountRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.UpdateAccountRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.UpdateAccountRequest} UpdateAccountRequest\n     */\n\n    UpdateAccountRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.UpdateAccountRequest) return object;\n      let message = new $root.shakebook.UpdateAccountRequest();\n      if (object.accountName != null) message.accountName = String(object.accountName);\n      if (object.accountEmail != null) message.accountEmail = String(object.accountEmail);\n      if (object.accountPhone != null) message.accountPhone = String(object.accountPhone);\n      if (object.imageUrl != null) message.imageUrl = String(object.imageUrl);\n      if (object.backgroundUrl != null) message.backgroundUrl = String(object.backgroundUrl);\n      if (object.accountDesc != null) message.accountDesc = String(object.accountDesc);\n\n      switch (object.accountStatus) {\n        case \"NORMAL\":\n        case 0:\n          message.accountStatus = 0;\n          break;\n\n        case \"DISABLE\":\n        case 1:\n          message.accountStatus = 1;\n          break;\n\n        case \"LOCK\":\n        case 2:\n          message.accountStatus = 2;\n          break;\n\n        case \"DELETE\":\n        case 3:\n          message.accountStatus = 3;\n          break;\n      }\n\n      if (object.accountPassword != null) message.accountPassword = String(object.accountPassword);\n      return message;\n    };\n    /**\n     * Creates a plain object from an UpdateAccountRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.UpdateAccountRequest\n     * @static\n     * @param {shakebook.UpdateAccountRequest} message UpdateAccountRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    UpdateAccountRequest.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        object.accountName = \"\";\n        object.accountEmail = \"\";\n        object.accountPhone = \"\";\n        object.imageUrl = \"\";\n        object.backgroundUrl = \"\";\n        object.accountDesc = \"\";\n        object.accountStatus = options.enums === String ? \"NORMAL\" : 0;\n        object.accountPassword = \"\";\n      }\n\n      if (message.accountName != null && message.hasOwnProperty(\"accountName\")) object.accountName = message.accountName;\n      if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\")) object.accountEmail = message.accountEmail;\n      if (message.accountPhone != null && message.hasOwnProperty(\"accountPhone\")) object.accountPhone = message.accountPhone;\n      if (message.imageUrl != null && message.hasOwnProperty(\"imageUrl\")) object.imageUrl = message.imageUrl;\n      if (message.backgroundUrl != null && message.hasOwnProperty(\"backgroundUrl\")) object.backgroundUrl = message.backgroundUrl;\n      if (message.accountDesc != null && message.hasOwnProperty(\"accountDesc\")) object.accountDesc = message.accountDesc;\n      if (message.accountStatus != null && message.hasOwnProperty(\"accountStatus\")) object.accountStatus = options.enums === String ? $root.shakebook.AccountStatus[message.accountStatus] : message.accountStatus;\n      if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\")) object.accountPassword = message.accountPassword;\n      return object;\n    };\n    /**\n     * Converts this UpdateAccountRequest to JSON.\n     * @function toJSON\n     * @memberof shakebook.UpdateAccountRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    UpdateAccountRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UpdateAccountRequest;\n  }();\n\n  shakebook.Account = function () {\n    /**\n     * Properties of an Account.\n     * @memberof shakebook\n     * @interface IAccount\n     * @property {number|null} [id] Account id\n     * @property {string|null} [accountName] Account accountName\n     * @property {string|null} [accountPassword] Account accountPassword\n     * @property {string|null} [accountPhone] Account accountPhone\n     * @property {string|null} [accountEmail] Account accountEmail\n     * @property {string|null} [signupAt] Account signupAt\n     * @property {string|null} [lastTime] Account lastTime\n     * @property {shakebook.AccountStatus|null} [accountStatus] Account accountStatus\n     * @property {string|null} [imageUrl] Account imageUrl\n     * @property {string|null} [backgroundUrl] Account backgroundUrl\n     * @property {string|null} [accountDesc] Account accountDesc\n     * @property {number|null} [thumbsUp] Account thumbsUp\n     * @property {number|null} [focusNumber] Account focusNumber\n     * @property {number|null} [fansNumber] Account fansNumber\n     */\n\n    /**\n     * Constructs a new Account.\n     * @memberof shakebook\n     * @classdesc Represents an Account.\n     * @implements IAccount\n     * @constructor\n     * @param {shakebook.IAccount=} [properties] Properties to set\n     */\n    function Account(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Account id.\n     * @member {number} id\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n\n    Account.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * Account accountName.\n     * @member {string} accountName\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.accountName = \"\";\n    /**\n     * Account accountPassword.\n     * @member {string} accountPassword\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.accountPassword = \"\";\n    /**\n     * Account accountPhone.\n     * @member {string} accountPhone\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.accountPhone = \"\";\n    /**\n     * Account accountEmail.\n     * @member {string} accountEmail\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.accountEmail = \"\";\n    /**\n     * Account signupAt.\n     * @member {string} signupAt\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.signupAt = \"\";\n    /**\n     * Account lastTime.\n     * @member {string} lastTime\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.lastTime = \"\";\n    /**\n     * Account accountStatus.\n     * @member {shakebook.AccountStatus} accountStatus\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.accountStatus = 0;\n    /**\n     * Account imageUrl.\n     * @member {string} imageUrl\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.imageUrl = \"\";\n    /**\n     * Account backgroundUrl.\n     * @member {string} backgroundUrl\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.backgroundUrl = \"\";\n    /**\n     * Account accountDesc.\n     * @member {string} accountDesc\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.accountDesc = \"\";\n    /**\n     * Account thumbsUp.\n     * @member {number} thumbsUp\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.thumbsUp = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * Account focusNumber.\n     * @member {number} focusNumber\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.focusNumber = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * Account fansNumber.\n     * @member {number} fansNumber\n     * @memberof shakebook.Account\n     * @instance\n     */\n\n    Account.prototype.fansNumber = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * Creates an Account message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.Account\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.Account} Account\n     */\n\n    Account.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.Account) return object;\n      let message = new $root.shakebook.Account();\n      if (object.id != null) if ($util.Long) (message.id = $util.Long.fromValue(object.id)).unsigned = false;else if (typeof object.id === \"string\") message.id = parseInt(object.id, 10);else if (typeof object.id === \"number\") message.id = object.id;else if (typeof object.id === \"object\") message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();\n      if (object.accountName != null) message.accountName = String(object.accountName);\n      if (object.accountPassword != null) message.accountPassword = String(object.accountPassword);\n      if (object.accountPhone != null) message.accountPhone = String(object.accountPhone);\n      if (object.accountEmail != null) message.accountEmail = String(object.accountEmail);\n      if (object.signupAt != null) message.signupAt = String(object.signupAt);\n      if (object.lastTime != null) message.lastTime = String(object.lastTime);\n\n      switch (object.accountStatus) {\n        case \"NORMAL\":\n        case 0:\n          message.accountStatus = 0;\n          break;\n\n        case \"DISABLE\":\n        case 1:\n          message.accountStatus = 1;\n          break;\n\n        case \"LOCK\":\n        case 2:\n          message.accountStatus = 2;\n          break;\n\n        case \"DELETE\":\n        case 3:\n          message.accountStatus = 3;\n          break;\n      }\n\n      if (object.imageUrl != null) message.imageUrl = String(object.imageUrl);\n      if (object.backgroundUrl != null) message.backgroundUrl = String(object.backgroundUrl);\n      if (object.accountDesc != null) message.accountDesc = String(object.accountDesc);\n      if (object.thumbsUp != null) if ($util.Long) (message.thumbsUp = $util.Long.fromValue(object.thumbsUp)).unsigned = false;else if (typeof object.thumbsUp === \"string\") message.thumbsUp = parseInt(object.thumbsUp, 10);else if (typeof object.thumbsUp === \"number\") message.thumbsUp = object.thumbsUp;else if (typeof object.thumbsUp === \"object\") message.thumbsUp = new $util.LongBits(object.thumbsUp.low >>> 0, object.thumbsUp.high >>> 0).toNumber();\n      if (object.focusNumber != null) if ($util.Long) (message.focusNumber = $util.Long.fromValue(object.focusNumber)).unsigned = false;else if (typeof object.focusNumber === \"string\") message.focusNumber = parseInt(object.focusNumber, 10);else if (typeof object.focusNumber === \"number\") message.focusNumber = object.focusNumber;else if (typeof object.focusNumber === \"object\") message.focusNumber = new $util.LongBits(object.focusNumber.low >>> 0, object.focusNumber.high >>> 0).toNumber();\n      if (object.fansNumber != null) if ($util.Long) (message.fansNumber = $util.Long.fromValue(object.fansNumber)).unsigned = false;else if (typeof object.fansNumber === \"string\") message.fansNumber = parseInt(object.fansNumber, 10);else if (typeof object.fansNumber === \"number\") message.fansNumber = object.fansNumber;else if (typeof object.fansNumber === \"object\") message.fansNumber = new $util.LongBits(object.fansNumber.low >>> 0, object.fansNumber.high >>> 0).toNumber();\n      return message;\n    };\n    /**\n     * Creates a plain object from an Account message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.Account\n     * @static\n     * @param {shakebook.Account} message Account\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Account.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n\n      if (options.defaults) {\n        if ($util.Long) {\n          let long = new $util.Long(0, 0, false);\n          object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.id = options.longs === String ? \"0\" : 0;\n\n        object.accountName = \"\";\n        object.accountPassword = \"\";\n        object.accountPhone = \"\";\n        object.accountEmail = \"\";\n        object.signupAt = \"\";\n        object.lastTime = \"\";\n        object.accountStatus = options.enums === String ? \"NORMAL\" : 0;\n        object.imageUrl = \"\";\n        object.backgroundUrl = \"\";\n        object.accountDesc = \"\";\n\n        if ($util.Long) {\n          let long = new $util.Long(0, 0, false);\n          object.thumbsUp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.thumbsUp = options.longs === String ? \"0\" : 0;\n\n        if ($util.Long) {\n          let long = new $util.Long(0, 0, false);\n          object.focusNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.focusNumber = options.longs === String ? \"0\" : 0;\n\n        if ($util.Long) {\n          let long = new $util.Long(0, 0, false);\n          object.fansNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.fansNumber = options.longs === String ? \"0\" : 0;\n      }\n\n      if (message.id != null && message.hasOwnProperty(\"id\")) if (typeof message.id === \"number\") object.id = options.longs === String ? String(message.id) : message.id;else object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;\n      if (message.accountName != null && message.hasOwnProperty(\"accountName\")) object.accountName = message.accountName;\n      if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\")) object.accountPassword = message.accountPassword;\n      if (message.accountPhone != null && message.hasOwnProperty(\"accountPhone\")) object.accountPhone = message.accountPhone;\n      if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\")) object.accountEmail = message.accountEmail;\n      if (message.signupAt != null && message.hasOwnProperty(\"signupAt\")) object.signupAt = message.signupAt;\n      if (message.lastTime != null && message.hasOwnProperty(\"lastTime\")) object.lastTime = message.lastTime;\n      if (message.accountStatus != null && message.hasOwnProperty(\"accountStatus\")) object.accountStatus = options.enums === String ? $root.shakebook.AccountStatus[message.accountStatus] : message.accountStatus;\n      if (message.imageUrl != null && message.hasOwnProperty(\"imageUrl\")) object.imageUrl = message.imageUrl;\n      if (message.backgroundUrl != null && message.hasOwnProperty(\"backgroundUrl\")) object.backgroundUrl = message.backgroundUrl;\n      if (message.accountDesc != null && message.hasOwnProperty(\"accountDesc\")) object.accountDesc = message.accountDesc;\n      if (message.thumbsUp != null && message.hasOwnProperty(\"thumbsUp\")) if (typeof message.thumbsUp === \"number\") object.thumbsUp = options.longs === String ? String(message.thumbsUp) : message.thumbsUp;else object.thumbsUp = options.longs === String ? $util.Long.prototype.toString.call(message.thumbsUp) : options.longs === Number ? new $util.LongBits(message.thumbsUp.low >>> 0, message.thumbsUp.high >>> 0).toNumber() : message.thumbsUp;\n      if (message.focusNumber != null && message.hasOwnProperty(\"focusNumber\")) if (typeof message.focusNumber === \"number\") object.focusNumber = options.longs === String ? String(message.focusNumber) : message.focusNumber;else object.focusNumber = options.longs === String ? $util.Long.prototype.toString.call(message.focusNumber) : options.longs === Number ? new $util.LongBits(message.focusNumber.low >>> 0, message.focusNumber.high >>> 0).toNumber() : message.focusNumber;\n      if (message.fansNumber != null && message.hasOwnProperty(\"fansNumber\")) if (typeof message.fansNumber === \"number\") object.fansNumber = options.longs === String ? String(message.fansNumber) : message.fansNumber;else object.fansNumber = options.longs === String ? $util.Long.prototype.toString.call(message.fansNumber) : options.longs === Number ? new $util.LongBits(message.fansNumber.low >>> 0, message.fansNumber.high >>> 0).toNumber() : message.fansNumber;\n      return object;\n    };\n    /**\n     * Converts this Account to JSON.\n     * @function toJSON\n     * @memberof shakebook.Account\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Account.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Account;\n  }();\n\n  shakebook.ValidEmailRequest = function () {\n    /**\n     * Properties of a ValidEmailRequest.\n     * @memberof shakebook\n     * @interface IValidEmailRequest\n     * @property {string|null} [accountEmail] ValidEmailRequest accountEmail\n     */\n\n    /**\n     * Constructs a new ValidEmailRequest.\n     * @memberof shakebook\n     * @classdesc Represents a ValidEmailRequest.\n     * @implements IValidEmailRequest\n     * @constructor\n     * @param {shakebook.IValidEmailRequest=} [properties] Properties to set\n     */\n    function ValidEmailRequest(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * ValidEmailRequest accountEmail.\n     * @member {string} accountEmail\n     * @memberof shakebook.ValidEmailRequest\n     * @instance\n     */\n\n\n    ValidEmailRequest.prototype.accountEmail = \"\";\n    /**\n     * Creates a ValidEmailRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.ValidEmailRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.ValidEmailRequest} ValidEmailRequest\n     */\n\n    ValidEmailRequest.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.ValidEmailRequest) return object;\n      let message = new $root.shakebook.ValidEmailRequest();\n      if (object.accountEmail != null) message.accountEmail = String(object.accountEmail);\n      return message;\n    };\n    /**\n     * Creates a plain object from a ValidEmailRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.ValidEmailRequest\n     * @static\n     * @param {shakebook.ValidEmailRequest} message ValidEmailRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    ValidEmailRequest.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n      if (options.defaults) object.accountEmail = \"\";\n      if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\")) object.accountEmail = message.accountEmail;\n      return object;\n    };\n    /**\n     * Converts this ValidEmailRequest to JSON.\n     * @function toJSON\n     * @memberof shakebook.ValidEmailRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    ValidEmailRequest.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ValidEmailRequest;\n  }();\n\n  shakebook.OperationResponse = function () {\n    /**\n     * Properties of an OperationResponse.\n     * @memberof shakebook\n     * @interface IOperationResponse\n     * @property {boolean|null} [success] OperationResponse success\n     */\n\n    /**\n     * Constructs a new OperationResponse.\n     * @memberof shakebook\n     * @classdesc Represents an OperationResponse.\n     * @implements IOperationResponse\n     * @constructor\n     * @param {shakebook.IOperationResponse=} [properties] Properties to set\n     */\n    function OperationResponse(properties) {\n      if (properties) for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * OperationResponse success.\n     * @member {boolean} success\n     * @memberof shakebook.OperationResponse\n     * @instance\n     */\n\n\n    OperationResponse.prototype.success = false;\n    /**\n     * Creates an OperationResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof shakebook.OperationResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {shakebook.OperationResponse} OperationResponse\n     */\n\n    OperationResponse.fromObject = function fromObject(object) {\n      if (object instanceof $root.shakebook.OperationResponse) return object;\n      let message = new $root.shakebook.OperationResponse();\n      if (object.success != null) message.success = Boolean(object.success);\n      return message;\n    };\n    /**\n     * Creates a plain object from an OperationResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof shakebook.OperationResponse\n     * @static\n     * @param {shakebook.OperationResponse} message OperationResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    OperationResponse.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      let object = {};\n      if (options.defaults) object.success = false;\n      if (message.success != null && message.hasOwnProperty(\"success\")) object.success = message.success;\n      return object;\n    };\n    /**\n     * Converts this OperationResponse to JSON.\n     * @function toJSON\n     * @memberof shakebook.OperationResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    OperationResponse.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return OperationResponse;\n  }();\n\n  shakebook.AccountService = function () {\n    /**\n     * Constructs a new AccountService service.\n     * @memberof shakebook\n     * @classdesc Represents an AccountService\n     * @extends $protobuf.rpc.Service\n     * @constructor\n     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n     */\n    function AccountService(rpcImpl, requestDelimited, responseDelimited) {\n      $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n    }\n\n    (AccountService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = AccountService;\n    /**\n     * Callback as used by {@link shakebook.AccountService#signUp}.\n     * @memberof shakebook.AccountService\n     * @typedef SignUpCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.AccountId} [response] AccountId\n     */\n\n    /**\n     * Calls SignUp.\n     * @function signUp\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.ISignUpRequest} request SignUpRequest message or plain object\n     * @param {shakebook.AccountService.SignUpCallback} callback Node-style callback called with the error, if any, and AccountId\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.signUp = function signUp(request, callback) {\n      return this.rpcCall(signUp, $root.shakebook.SignUpRequest, $root.shakebook.AccountId, request, callback);\n    }, \"name\", {\n      value: \"SignUp\"\n    });\n    /**\n     * Calls SignUp.\n     * @function signUp\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.ISignUpRequest} request SignUpRequest message or plain object\n     * @returns {Promise<shakebook.AccountId>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link shakebook.AccountService#signIn}.\n     * @memberof shakebook.AccountService\n     * @typedef SignInCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.SignInResponse} [response] SignInResponse\n     */\n\n    /**\n     * Calls SignIn.\n     * @function signIn\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.ISignInRequest} request SignInRequest message or plain object\n     * @param {shakebook.AccountService.SignInCallback} callback Node-style callback called with the error, if any, and SignInResponse\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.signIn = function signIn(request, callback) {\n      return this.rpcCall(signIn, $root.shakebook.SignInRequest, $root.shakebook.SignInResponse, request, callback);\n    }, \"name\", {\n      value: \"SignIn\"\n    });\n    /**\n     * Calls SignIn.\n     * @function signIn\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.ISignInRequest} request SignInRequest message or plain object\n     * @returns {Promise<shakebook.SignInResponse>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link shakebook.AccountService#signOut}.\n     * @memberof shakebook.AccountService\n     * @typedef SignOutCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.OperationResponse} [response] OperationResponse\n     */\n\n    /**\n     * Calls SignOut.\n     * @function signOut\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IAccountId} request AccountId message or plain object\n     * @param {shakebook.AccountService.SignOutCallback} callback Node-style callback called with the error, if any, and OperationResponse\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.signOut = function signOut(request, callback) {\n      return this.rpcCall(signOut, $root.shakebook.AccountId, $root.shakebook.OperationResponse, request, callback);\n    }, \"name\", {\n      value: \"SignOut\"\n    });\n    /**\n     * Calls SignOut.\n     * @function signOut\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IAccountId} request AccountId message or plain object\n     * @returns {Promise<shakebook.OperationResponse>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link shakebook.AccountService#validEmail}.\n     * @memberof shakebook.AccountService\n     * @typedef ValidEmailCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.OperationResponse} [response] OperationResponse\n     */\n\n    /**\n     * Calls ValidEmail.\n     * @function validEmail\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IValidEmailRequest} request ValidEmailRequest message or plain object\n     * @param {shakebook.AccountService.ValidEmailCallback} callback Node-style callback called with the error, if any, and OperationResponse\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.validEmail = function validEmail(request, callback) {\n      return this.rpcCall(validEmail, $root.shakebook.ValidEmailRequest, $root.shakebook.OperationResponse, request, callback);\n    }, \"name\", {\n      value: \"ValidEmail\"\n    });\n    /**\n     * Calls ValidEmail.\n     * @function validEmail\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IValidEmailRequest} request ValidEmailRequest message or plain object\n     * @returns {Promise<shakebook.OperationResponse>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link shakebook.AccountService#updateAccount}.\n     * @memberof shakebook.AccountService\n     * @typedef UpdateAccountCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.AccountId} [response] AccountId\n     */\n\n    /**\n     * Calls UpdateAccount.\n     * @function updateAccount\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IUpdateAccountRequest} request UpdateAccountRequest message or plain object\n     * @param {shakebook.AccountService.UpdateAccountCallback} callback Node-style callback called with the error, if any, and AccountId\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.updateAccount = function updateAccount(request, callback) {\n      return this.rpcCall(updateAccount, $root.shakebook.UpdateAccountRequest, $root.shakebook.AccountId, request, callback);\n    }, \"name\", {\n      value: \"UpdateAccount\"\n    });\n    /**\n     * Calls UpdateAccount.\n     * @function updateAccount\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IUpdateAccountRequest} request UpdateAccountRequest message or plain object\n     * @returns {Promise<shakebook.AccountId>} Promise\n     * @variation 2\n     */\n\n    /**\n     * Callback as used by {@link shakebook.AccountService#getAccount}.\n     * @memberof shakebook.AccountService\n     * @typedef GetAccountCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any\n     * @param {shakebook.Account} [response] Account\n     */\n\n    /**\n     * Calls GetAccount.\n     * @function getAccount\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IAccountId} request AccountId message or plain object\n     * @param {shakebook.AccountService.GetAccountCallback} callback Node-style callback called with the error, if any, and Account\n     * @returns {undefined}\n     * @variation 1\n     */\n\n    Object.defineProperty(AccountService.prototype.getAccount = function getAccount(request, callback) {\n      return this.rpcCall(getAccount, $root.shakebook.AccountId, $root.shakebook.Account, request, callback);\n    }, \"name\", {\n      value: \"GetAccount\"\n    });\n    /**\n     * Calls GetAccount.\n     * @function getAccount\n     * @memberof shakebook.AccountService\n     * @instance\n     * @param {shakebook.IAccountId} request AccountId message or plain object\n     * @returns {Promise<shakebook.Account>} Promise\n     * @variation 2\n     */\n\n    return AccountService;\n  }();\n\n  return shakebook;\n})();","map":{"version":3,"sources":["/Users/yangjiafeng/web-src/shake-book-manager/src/service/api/v1/account_pb.js"],"names":["$protobuf","$util","util","$root","roots","shakebook","ErrorResponse","properties","keys","Object","i","length","prototype","code","message","fromObject","object","String","toObject","options","defaults","hasOwnProperty","toJSON","constructor","toJSONOptions","SignUpRequest","accountName","accountEmail","accountPassword","emailValidCode","AccountId","id","Long","fromBits","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","long","longs","toString","Number","call","SignInRequest","SignInResponse","success","data","Boolean","AccountStatus","valuesById","values","create","UpdateAccountRequest","accountPhone","imageUrl","backgroundUrl","accountDesc","accountStatus","enums","Account","signupAt","lastTime","thumbsUp","focusNumber","fansNumber","ValidEmailRequest","OperationResponse","AccountService","rpcImpl","requestDelimited","responseDelimited","rpc","Service","defineProperty","signUp","request","callback","rpcCall","value","signIn","signOut","validEmail","updateAccount","getAccount"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,YAA3B,C,CAEA;;AACA,MAAMC,KAAK,GAAGD,SAAS,CAACE,IAAxB,C,CAEA;;AACA,MAAMC,KAAK,GAAGH,SAAS,CAACI,KAAV,CAAgB,SAAhB,MAA+BJ,SAAS,CAACI,KAAV,CAAgB,SAAhB,IAA6B,EAA5D,CAAd;AAEA,OAAO,MAAMC,SAAS,GAAGF,KAAK,CAACE,SAAN,GAAkB,CAAC,MAAM;AAE9C;AACJ;AACA;AACA;AACA;AACI,QAAMA,SAAS,GAAG,EAAlB;;AAEAA,EAAAA,SAAS,CAACC,aAAV,GAA2B,YAAW;AAElC;AACR;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAASA,aAAT,CAAuBC,UAAvB,EAAmC;AAC/B,UAAIA,UAAJ,EACI,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE,EACI,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EACI,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AACf;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQJ,IAAAA,aAAa,CAACM,SAAd,CAAwBC,IAAxB,GAA+B,CAA/B;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQP,IAAAA,aAAa,CAACM,SAAd,CAAwBE,OAAxB,GAAkC,EAAlC;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQR,IAAAA,aAAa,CAACS,UAAd,GAA2B,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACnD,UAAIA,MAAM,YAAYb,KAAK,CAACE,SAAN,CAAgBC,aAAtC,EACI,OAAOU,MAAP;AACJ,UAAIF,OAAO,GAAG,IAAIX,KAAK,CAACE,SAAN,CAAgBC,aAApB,EAAd;AACA,UAAIU,MAAM,CAACH,IAAP,IAAe,IAAnB,EACIC,OAAO,CAACD,IAAR,GAAeG,MAAM,CAACH,IAAP,GAAc,CAA7B;AACJ,UAAIG,MAAM,CAACF,OAAP,IAAkB,IAAtB,EACIA,OAAO,CAACA,OAAR,GAAkBG,MAAM,CAACD,MAAM,CAACF,OAAR,CAAxB;AACJ,aAAOA,OAAP;AACH,KATD;AAWA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQR,IAAAA,aAAa,CAACY,QAAd,GAAyB,SAASA,QAAT,CAAkBJ,OAAlB,EAA2BK,OAA3B,EAAoC;AACzD,UAAI,CAACA,OAAL,EACIA,OAAO,GAAG,EAAV;AACJ,UAAIH,MAAM,GAAG,EAAb;;AACA,UAAIG,OAAO,CAACC,QAAZ,EAAsB;AAClBJ,QAAAA,MAAM,CAACH,IAAP,GAAc,CAAd;AACAG,QAAAA,MAAM,CAACF,OAAP,GAAiB,EAAjB;AACH;;AACD,UAAIA,OAAO,CAACD,IAAR,IAAgB,IAAhB,IAAwBC,OAAO,CAACO,cAAR,CAAuB,MAAvB,CAA5B,EACIL,MAAM,CAACH,IAAP,GAAcC,OAAO,CAACD,IAAtB;AACJ,UAAIC,OAAO,CAACA,OAAR,IAAmB,IAAnB,IAA2BA,OAAO,CAACO,cAAR,CAAuB,SAAvB,CAA/B,EACIL,MAAM,CAACF,OAAP,GAAiBA,OAAO,CAACA,OAAzB;AACJ,aAAOE,MAAP;AACH,KAbD;AAeA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQV,IAAAA,aAAa,CAACM,SAAd,CAAwBU,MAAxB,GAAiC,SAASA,MAAT,GAAkB;AAC/C,aAAO,KAAKC,WAAL,CAAiBL,QAAjB,CAA0B,IAA1B,EAAgClB,SAAS,CAACE,IAAV,CAAesB,aAA/C,CAAP;AACH,KAFD;;AAIA,WAAOlB,aAAP;AACH,GAhGyB,EAA1B;;AAkGAD,EAAAA,SAAS,CAACoB,aAAV,GAA2B,YAAW;AAElC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAASA,aAAT,CAAuBlB,UAAvB,EAAmC;AAC/B,UAAIA,UAAJ,EACI,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE,EACI,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EACI,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AACf;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQe,IAAAA,aAAa,CAACb,SAAd,CAAwBc,WAAxB,GAAsC,EAAtC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQD,IAAAA,aAAa,CAACb,SAAd,CAAwBe,YAAxB,GAAuC,EAAvC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQF,IAAAA,aAAa,CAACb,SAAd,CAAwBgB,eAAxB,GAA0C,EAA1C;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQH,IAAAA,aAAa,CAACb,SAAd,CAAwBiB,cAAxB,GAAyC,EAAzC;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQJ,IAAAA,aAAa,CAACV,UAAd,GAA2B,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACnD,UAAIA,MAAM,YAAYb,KAAK,CAACE,SAAN,CAAgBoB,aAAtC,EACI,OAAOT,MAAP;AACJ,UAAIF,OAAO,GAAG,IAAIX,KAAK,CAACE,SAAN,CAAgBoB,aAApB,EAAd;AACA,UAAIT,MAAM,CAACU,WAAP,IAAsB,IAA1B,EACIZ,OAAO,CAACY,WAAR,GAAsBT,MAAM,CAACD,MAAM,CAACU,WAAR,CAA5B;AACJ,UAAIV,MAAM,CAACW,YAAP,IAAuB,IAA3B,EACIb,OAAO,CAACa,YAAR,GAAuBV,MAAM,CAACD,MAAM,CAACW,YAAR,CAA7B;AACJ,UAAIX,MAAM,CAACY,eAAP,IAA0B,IAA9B,EACId,OAAO,CAACc,eAAR,GAA0BX,MAAM,CAACD,MAAM,CAACY,eAAR,CAAhC;AACJ,UAAIZ,MAAM,CAACa,cAAP,IAAyB,IAA7B,EACIf,OAAO,CAACe,cAAR,GAAyBZ,MAAM,CAACD,MAAM,CAACa,cAAR,CAA/B;AACJ,aAAOf,OAAP;AACH,KAbD;AAeA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQW,IAAAA,aAAa,CAACP,QAAd,GAAyB,SAASA,QAAT,CAAkBJ,OAAlB,EAA2BK,OAA3B,EAAoC;AACzD,UAAI,CAACA,OAAL,EACIA,OAAO,GAAG,EAAV;AACJ,UAAIH,MAAM,GAAG,EAAb;;AACA,UAAIG,OAAO,CAACC,QAAZ,EAAsB;AAClBJ,QAAAA,MAAM,CAACU,WAAP,GAAqB,EAArB;AACAV,QAAAA,MAAM,CAACW,YAAP,GAAsB,EAAtB;AACAX,QAAAA,MAAM,CAACY,eAAP,GAAyB,EAAzB;AACAZ,QAAAA,MAAM,CAACa,cAAP,GAAwB,EAAxB;AACH;;AACD,UAAIf,OAAO,CAACY,WAAR,IAAuB,IAAvB,IAA+BZ,OAAO,CAACO,cAAR,CAAuB,aAAvB,CAAnC,EACIL,MAAM,CAACU,WAAP,GAAqBZ,OAAO,CAACY,WAA7B;AACJ,UAAIZ,OAAO,CAACa,YAAR,IAAwB,IAAxB,IAAgCb,OAAO,CAACO,cAAR,CAAuB,cAAvB,CAApC,EACIL,MAAM,CAACW,YAAP,GAAsBb,OAAO,CAACa,YAA9B;AACJ,UAAIb,OAAO,CAACc,eAAR,IAA2B,IAA3B,IAAmCd,OAAO,CAACO,cAAR,CAAuB,iBAAvB,CAAvC,EACIL,MAAM,CAACY,eAAP,GAAyBd,OAAO,CAACc,eAAjC;AACJ,UAAId,OAAO,CAACe,cAAR,IAA0B,IAA1B,IAAkCf,OAAO,CAACO,cAAR,CAAuB,gBAAvB,CAAtC,EACIL,MAAM,CAACa,cAAP,GAAwBf,OAAO,CAACe,cAAhC;AACJ,aAAOb,MAAP;AACH,KAnBD;AAqBA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQS,IAAAA,aAAa,CAACb,SAAd,CAAwBU,MAAxB,GAAiC,SAASA,MAAT,GAAkB;AAC/C,aAAO,KAAKC,WAAL,CAAiBL,QAAjB,CAA0B,IAA1B,EAAgClB,SAAS,CAACE,IAAV,CAAesB,aAA/C,CAAP;AACH,KAFD;;AAIA,WAAOC,aAAP;AACH,GA5HyB,EAA1B;;AA8HApB,EAAAA,SAAS,CAACyB,SAAV,GAAuB,YAAW;AAE9B;AACR;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAASA,SAAT,CAAmBvB,UAAnB,EAA+B;AAC3B,UAAIA,UAAJ,EACI,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE,EACI,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EACI,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AACf;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQoB,IAAAA,SAAS,CAAClB,SAAV,CAAoBmB,EAApB,GAAyB9B,KAAK,CAAC+B,IAAN,GAAa/B,KAAK,CAAC+B,IAAN,CAAWC,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,KAAxB,CAAb,GAA8C,CAAvE;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQH,IAAAA,SAAS,CAACf,UAAV,GAAuB,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AAC/C,UAAIA,MAAM,YAAYb,KAAK,CAACE,SAAN,CAAgByB,SAAtC,EACI,OAAOd,MAAP;AACJ,UAAIF,OAAO,GAAG,IAAIX,KAAK,CAACE,SAAN,CAAgByB,SAApB,EAAd;AACA,UAAId,MAAM,CAACe,EAAP,IAAa,IAAjB,EACI,IAAI9B,KAAK,CAAC+B,IAAV,EACI,CAAClB,OAAO,CAACiB,EAAR,GAAa9B,KAAK,CAAC+B,IAAN,CAAWE,SAAX,CAAqBlB,MAAM,CAACe,EAA5B,CAAd,EAA+CI,QAA/C,GAA0D,KAA1D,CADJ,KAEK,IAAI,OAAOnB,MAAM,CAACe,EAAd,KAAqB,QAAzB,EACDjB,OAAO,CAACiB,EAAR,GAAaK,QAAQ,CAACpB,MAAM,CAACe,EAAR,EAAY,EAAZ,CAArB,CADC,KAEA,IAAI,OAAOf,MAAM,CAACe,EAAd,KAAqB,QAAzB,EACDjB,OAAO,CAACiB,EAAR,GAAaf,MAAM,CAACe,EAApB,CADC,KAEA,IAAI,OAAOf,MAAM,CAACe,EAAd,KAAqB,QAAzB,EACDjB,OAAO,CAACiB,EAAR,GAAa,IAAI9B,KAAK,CAACoC,QAAV,CAAmBrB,MAAM,CAACe,EAAP,CAAUO,GAAV,KAAkB,CAArC,EAAwCtB,MAAM,CAACe,EAAP,CAAUQ,IAAV,KAAmB,CAA3D,EAA8DC,QAA9D,EAAb;AACR,aAAO1B,OAAP;AACH,KAdD;AAgBA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQgB,IAAAA,SAAS,CAACZ,QAAV,GAAqB,SAASA,QAAT,CAAkBJ,OAAlB,EAA2BK,OAA3B,EAAoC;AACrD,UAAI,CAACA,OAAL,EACIA,OAAO,GAAG,EAAV;AACJ,UAAIH,MAAM,GAAG,EAAb;AACA,UAAIG,OAAO,CAACC,QAAZ,EACI,IAAInB,KAAK,CAAC+B,IAAV,EAAgB;AACZ,YAAIS,IAAI,GAAG,IAAIxC,KAAK,CAAC+B,IAAV,CAAe,CAAf,EAAkB,CAAlB,EAAqB,KAArB,CAAX;AACAhB,QAAAA,MAAM,CAACe,EAAP,GAAYZ,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BwB,IAAI,CAACE,QAAL,EAA3B,GAA6CxB,OAAO,CAACuB,KAAR,KAAkBE,MAAlB,GAA2BH,IAAI,CAACD,QAAL,EAA3B,GAA6CC,IAAtG;AACH,OAHD,MAIIzB,MAAM,CAACe,EAAP,GAAYZ,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2B,GAA3B,GAAiC,CAA7C;AACR,UAAIH,OAAO,CAACiB,EAAR,IAAc,IAAd,IAAsBjB,OAAO,CAACO,cAAR,CAAuB,IAAvB,CAA1B,EACI,IAAI,OAAOP,OAAO,CAACiB,EAAf,KAAsB,QAA1B,EACIf,MAAM,CAACe,EAAP,GAAYZ,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BA,MAAM,CAACH,OAAO,CAACiB,EAAT,CAAjC,GAAgDjB,OAAO,CAACiB,EAApE,CADJ,KAGIf,MAAM,CAACe,EAAP,GAAYZ,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BhB,KAAK,CAAC+B,IAAN,CAAWpB,SAAX,CAAqB+B,QAArB,CAA8BE,IAA9B,CAAmC/B,OAAO,CAACiB,EAA3C,CAA3B,GAA4EZ,OAAO,CAACuB,KAAR,KAAkBE,MAAlB,GAA2B,IAAI3C,KAAK,CAACoC,QAAV,CAAmBvB,OAAO,CAACiB,EAAR,CAAWO,GAAX,KAAmB,CAAtC,EAAyCxB,OAAO,CAACiB,EAAR,CAAWQ,IAAX,KAAoB,CAA7D,EAAgEC,QAAhE,EAA3B,GAAwG1B,OAAO,CAACiB,EAAxM;AACR,aAAOf,MAAP;AACH,KAhBD;AAkBA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQc,IAAAA,SAAS,CAAClB,SAAV,CAAoBU,MAApB,GAA6B,SAASA,MAAT,GAAkB;AAC3C,aAAO,KAAKC,WAAL,CAAiBL,QAAjB,CAA0B,IAA1B,EAAgClB,SAAS,CAACE,IAAV,CAAesB,aAA/C,CAAP;AACH,KAFD;;AAIA,WAAOM,SAAP;AACH,GA/FqB,EAAtB;;AAiGAzB,EAAAA,SAAS,CAACyC,aAAV,GAA2B,YAAW;AAElC;AACR;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAASA,aAAT,CAAuBvC,UAAvB,EAAmC;AAC/B,UAAIA,UAAJ,EACI,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE,EACI,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EACI,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AACf;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQoC,IAAAA,aAAa,CAAClC,SAAd,CAAwBc,WAAxB,GAAsC,EAAtC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQoB,IAAAA,aAAa,CAAClC,SAAd,CAAwBgB,eAAxB,GAA0C,EAA1C;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQkB,IAAAA,aAAa,CAAC/B,UAAd,GAA2B,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACnD,UAAIA,MAAM,YAAYb,KAAK,CAACE,SAAN,CAAgByC,aAAtC,EACI,OAAO9B,MAAP;AACJ,UAAIF,OAAO,GAAG,IAAIX,KAAK,CAACE,SAAN,CAAgByC,aAApB,EAAd;AACA,UAAI9B,MAAM,CAACU,WAAP,IAAsB,IAA1B,EACIZ,OAAO,CAACY,WAAR,GAAsBT,MAAM,CAACD,MAAM,CAACU,WAAR,CAA5B;AACJ,UAAIV,MAAM,CAACY,eAAP,IAA0B,IAA9B,EACId,OAAO,CAACc,eAAR,GAA0BX,MAAM,CAACD,MAAM,CAACY,eAAR,CAAhC;AACJ,aAAOd,OAAP;AACH,KATD;AAWA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQgC,IAAAA,aAAa,CAAC5B,QAAd,GAAyB,SAASA,QAAT,CAAkBJ,OAAlB,EAA2BK,OAA3B,EAAoC;AACzD,UAAI,CAACA,OAAL,EACIA,OAAO,GAAG,EAAV;AACJ,UAAIH,MAAM,GAAG,EAAb;;AACA,UAAIG,OAAO,CAACC,QAAZ,EAAsB;AAClBJ,QAAAA,MAAM,CAACU,WAAP,GAAqB,EAArB;AACAV,QAAAA,MAAM,CAACY,eAAP,GAAyB,EAAzB;AACH;;AACD,UAAId,OAAO,CAACY,WAAR,IAAuB,IAAvB,IAA+BZ,OAAO,CAACO,cAAR,CAAuB,aAAvB,CAAnC,EACIL,MAAM,CAACU,WAAP,GAAqBZ,OAAO,CAACY,WAA7B;AACJ,UAAIZ,OAAO,CAACc,eAAR,IAA2B,IAA3B,IAAmCd,OAAO,CAACO,cAAR,CAAuB,iBAAvB,CAAvC,EACIL,MAAM,CAACY,eAAP,GAAyBd,OAAO,CAACc,eAAjC;AACJ,aAAOZ,MAAP;AACH,KAbD;AAeA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQ8B,IAAAA,aAAa,CAAClC,SAAd,CAAwBU,MAAxB,GAAiC,SAASA,MAAT,GAAkB;AAC/C,aAAO,KAAKC,WAAL,CAAiBL,QAAjB,CAA0B,IAA1B,EAAgClB,SAAS,CAACE,IAAV,CAAesB,aAA/C,CAAP;AACH,KAFD;;AAIA,WAAOsB,aAAP;AACH,GAhGyB,EAA1B;;AAkGAzC,EAAAA,SAAS,CAAC0C,cAAV,GAA4B,YAAW;AAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAASA,cAAT,CAAwBxC,UAAxB,EAAoC;AAChC,UAAIA,UAAJ,EACI,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE,EACI,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EACI,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AACf;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQqC,IAAAA,cAAc,CAACnC,SAAf,CAAyBoC,OAAzB,GAAmC,KAAnC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQD,IAAAA,cAAc,CAACnC,SAAf,CAAyBE,OAAzB,GAAmC,EAAnC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQiC,IAAAA,cAAc,CAACnC,SAAf,CAAyBqC,IAAzB,GAAgC,EAAhC;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQF,IAAAA,cAAc,CAAChC,UAAf,GAA4B,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACpD,UAAIA,MAAM,YAAYb,KAAK,CAACE,SAAN,CAAgB0C,cAAtC,EACI,OAAO/B,MAAP;AACJ,UAAIF,OAAO,GAAG,IAAIX,KAAK,CAACE,SAAN,CAAgB0C,cAApB,EAAd;AACA,UAAI/B,MAAM,CAACgC,OAAP,IAAkB,IAAtB,EACIlC,OAAO,CAACkC,OAAR,GAAkBE,OAAO,CAAClC,MAAM,CAACgC,OAAR,CAAzB;AACJ,UAAIhC,MAAM,CAACF,OAAP,IAAkB,IAAtB,EACIA,OAAO,CAACA,OAAR,GAAkBG,MAAM,CAACD,MAAM,CAACF,OAAR,CAAxB;AACJ,UAAIE,MAAM,CAACiC,IAAP,IAAe,IAAnB,EACInC,OAAO,CAACmC,IAAR,GAAehC,MAAM,CAACD,MAAM,CAACiC,IAAR,CAArB;AACJ,aAAOnC,OAAP;AACH,KAXD;AAaA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQiC,IAAAA,cAAc,CAAC7B,QAAf,GAA0B,SAASA,QAAT,CAAkBJ,OAAlB,EAA2BK,OAA3B,EAAoC;AAC1D,UAAI,CAACA,OAAL,EACIA,OAAO,GAAG,EAAV;AACJ,UAAIH,MAAM,GAAG,EAAb;;AACA,UAAIG,OAAO,CAACC,QAAZ,EAAsB;AAClBJ,QAAAA,MAAM,CAACgC,OAAP,GAAiB,KAAjB;AACAhC,QAAAA,MAAM,CAACF,OAAP,GAAiB,EAAjB;AACAE,QAAAA,MAAM,CAACiC,IAAP,GAAc,EAAd;AACH;;AACD,UAAInC,OAAO,CAACkC,OAAR,IAAmB,IAAnB,IAA2BlC,OAAO,CAACO,cAAR,CAAuB,SAAvB,CAA/B,EACIL,MAAM,CAACgC,OAAP,GAAiBlC,OAAO,CAACkC,OAAzB;AACJ,UAAIlC,OAAO,CAACA,OAAR,IAAmB,IAAnB,IAA2BA,OAAO,CAACO,cAAR,CAAuB,SAAvB,CAA/B,EACIL,MAAM,CAACF,OAAP,GAAiBA,OAAO,CAACA,OAAzB;AACJ,UAAIA,OAAO,CAACmC,IAAR,IAAgB,IAAhB,IAAwBnC,OAAO,CAACO,cAAR,CAAuB,MAAvB,CAA5B,EACIL,MAAM,CAACiC,IAAP,GAAcnC,OAAO,CAACmC,IAAtB;AACJ,aAAOjC,MAAP;AACH,KAhBD;AAkBA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQ+B,IAAAA,cAAc,CAACnC,SAAf,CAAyBU,MAAzB,GAAkC,SAASA,MAAT,GAAkB;AAChD,aAAO,KAAKC,WAAL,CAAiBL,QAAjB,CAA0B,IAA1B,EAAgClB,SAAS,CAACE,IAAV,CAAesB,aAA/C,CAAP;AACH,KAFD;;AAIA,WAAOuB,cAAP;AACH,GA9G0B,EAA3B;AAgHA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI1C,EAAAA,SAAS,CAAC8C,aAAV,GAA2B,YAAW;AAClC,UAAMC,UAAU,GAAG,EAAnB;AAAA,UAAuBC,MAAM,GAAG5C,MAAM,CAAC6C,MAAP,CAAcF,UAAd,CAAhC;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,CAAD,CAAV,GAAgB,QAAjB,CAAN,GAAmC,CAAnC;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,CAAD,CAAV,GAAgB,SAAjB,CAAN,GAAoC,CAApC;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,CAAD,CAAV,GAAgB,MAAjB,CAAN,GAAiC,CAAjC;AACAC,IAAAA,MAAM,CAACD,UAAU,CAAC,CAAD,CAAV,GAAgB,QAAjB,CAAN,GAAmC,CAAnC;AACA,WAAOC,MAAP;AACH,GAPyB,EAA1B;;AASAhD,EAAAA,SAAS,CAACkD,oBAAV,GAAkC,YAAW;AAEzC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAASA,oBAAT,CAA8BhD,UAA9B,EAA0C;AACtC,UAAIA,UAAJ,EACI,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE,EACI,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EACI,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AACf;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ6C,IAAAA,oBAAoB,CAAC3C,SAArB,CAA+Bc,WAA/B,GAA6C,EAA7C;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ6B,IAAAA,oBAAoB,CAAC3C,SAArB,CAA+Be,YAA/B,GAA8C,EAA9C;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ4B,IAAAA,oBAAoB,CAAC3C,SAArB,CAA+B4C,YAA/B,GAA8C,EAA9C;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQD,IAAAA,oBAAoB,CAAC3C,SAArB,CAA+B6C,QAA/B,GAA0C,EAA1C;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQF,IAAAA,oBAAoB,CAAC3C,SAArB,CAA+B8C,aAA/B,GAA+C,EAA/C;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQH,IAAAA,oBAAoB,CAAC3C,SAArB,CAA+B+C,WAA/B,GAA6C,EAA7C;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQJ,IAAAA,oBAAoB,CAAC3C,SAArB,CAA+BgD,aAA/B,GAA+C,CAA/C;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQL,IAAAA,oBAAoB,CAAC3C,SAArB,CAA+BgB,eAA/B,GAAiD,EAAjD;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ2B,IAAAA,oBAAoB,CAACxC,UAArB,GAAkC,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AAC1D,UAAIA,MAAM,YAAYb,KAAK,CAACE,SAAN,CAAgBkD,oBAAtC,EACI,OAAOvC,MAAP;AACJ,UAAIF,OAAO,GAAG,IAAIX,KAAK,CAACE,SAAN,CAAgBkD,oBAApB,EAAd;AACA,UAAIvC,MAAM,CAACU,WAAP,IAAsB,IAA1B,EACIZ,OAAO,CAACY,WAAR,GAAsBT,MAAM,CAACD,MAAM,CAACU,WAAR,CAA5B;AACJ,UAAIV,MAAM,CAACW,YAAP,IAAuB,IAA3B,EACIb,OAAO,CAACa,YAAR,GAAuBV,MAAM,CAACD,MAAM,CAACW,YAAR,CAA7B;AACJ,UAAIX,MAAM,CAACwC,YAAP,IAAuB,IAA3B,EACI1C,OAAO,CAAC0C,YAAR,GAAuBvC,MAAM,CAACD,MAAM,CAACwC,YAAR,CAA7B;AACJ,UAAIxC,MAAM,CAACyC,QAAP,IAAmB,IAAvB,EACI3C,OAAO,CAAC2C,QAAR,GAAmBxC,MAAM,CAACD,MAAM,CAACyC,QAAR,CAAzB;AACJ,UAAIzC,MAAM,CAAC0C,aAAP,IAAwB,IAA5B,EACI5C,OAAO,CAAC4C,aAAR,GAAwBzC,MAAM,CAACD,MAAM,CAAC0C,aAAR,CAA9B;AACJ,UAAI1C,MAAM,CAAC2C,WAAP,IAAsB,IAA1B,EACI7C,OAAO,CAAC6C,WAAR,GAAsB1C,MAAM,CAACD,MAAM,CAAC2C,WAAR,CAA5B;;AACJ,cAAQ3C,MAAM,CAAC4C,aAAf;AACA,aAAK,QAAL;AACA,aAAK,CAAL;AACI9C,UAAAA,OAAO,CAAC8C,aAAR,GAAwB,CAAxB;AACA;;AACJ,aAAK,SAAL;AACA,aAAK,CAAL;AACI9C,UAAAA,OAAO,CAAC8C,aAAR,GAAwB,CAAxB;AACA;;AACJ,aAAK,MAAL;AACA,aAAK,CAAL;AACI9C,UAAAA,OAAO,CAAC8C,aAAR,GAAwB,CAAxB;AACA;;AACJ,aAAK,QAAL;AACA,aAAK,CAAL;AACI9C,UAAAA,OAAO,CAAC8C,aAAR,GAAwB,CAAxB;AACA;AAhBJ;;AAkBA,UAAI5C,MAAM,CAACY,eAAP,IAA0B,IAA9B,EACId,OAAO,CAACc,eAAR,GAA0BX,MAAM,CAACD,MAAM,CAACY,eAAR,CAAhC;AACJ,aAAOd,OAAP;AACH,KArCD;AAuCA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQyC,IAAAA,oBAAoB,CAACrC,QAArB,GAAgC,SAASA,QAAT,CAAkBJ,OAAlB,EAA2BK,OAA3B,EAAoC;AAChE,UAAI,CAACA,OAAL,EACIA,OAAO,GAAG,EAAV;AACJ,UAAIH,MAAM,GAAG,EAAb;;AACA,UAAIG,OAAO,CAACC,QAAZ,EAAsB;AAClBJ,QAAAA,MAAM,CAACU,WAAP,GAAqB,EAArB;AACAV,QAAAA,MAAM,CAACW,YAAP,GAAsB,EAAtB;AACAX,QAAAA,MAAM,CAACwC,YAAP,GAAsB,EAAtB;AACAxC,QAAAA,MAAM,CAACyC,QAAP,GAAkB,EAAlB;AACAzC,QAAAA,MAAM,CAAC0C,aAAP,GAAuB,EAAvB;AACA1C,QAAAA,MAAM,CAAC2C,WAAP,GAAqB,EAArB;AACA3C,QAAAA,MAAM,CAAC4C,aAAP,GAAuBzC,OAAO,CAAC0C,KAAR,KAAkB5C,MAAlB,GAA2B,QAA3B,GAAsC,CAA7D;AACAD,QAAAA,MAAM,CAACY,eAAP,GAAyB,EAAzB;AACH;;AACD,UAAId,OAAO,CAACY,WAAR,IAAuB,IAAvB,IAA+BZ,OAAO,CAACO,cAAR,CAAuB,aAAvB,CAAnC,EACIL,MAAM,CAACU,WAAP,GAAqBZ,OAAO,CAACY,WAA7B;AACJ,UAAIZ,OAAO,CAACa,YAAR,IAAwB,IAAxB,IAAgCb,OAAO,CAACO,cAAR,CAAuB,cAAvB,CAApC,EACIL,MAAM,CAACW,YAAP,GAAsBb,OAAO,CAACa,YAA9B;AACJ,UAAIb,OAAO,CAAC0C,YAAR,IAAwB,IAAxB,IAAgC1C,OAAO,CAACO,cAAR,CAAuB,cAAvB,CAApC,EACIL,MAAM,CAACwC,YAAP,GAAsB1C,OAAO,CAAC0C,YAA9B;AACJ,UAAI1C,OAAO,CAAC2C,QAAR,IAAoB,IAApB,IAA4B3C,OAAO,CAACO,cAAR,CAAuB,UAAvB,CAAhC,EACIL,MAAM,CAACyC,QAAP,GAAkB3C,OAAO,CAAC2C,QAA1B;AACJ,UAAI3C,OAAO,CAAC4C,aAAR,IAAyB,IAAzB,IAAiC5C,OAAO,CAACO,cAAR,CAAuB,eAAvB,CAArC,EACIL,MAAM,CAAC0C,aAAP,GAAuB5C,OAAO,CAAC4C,aAA/B;AACJ,UAAI5C,OAAO,CAAC6C,WAAR,IAAuB,IAAvB,IAA+B7C,OAAO,CAACO,cAAR,CAAuB,aAAvB,CAAnC,EACIL,MAAM,CAAC2C,WAAP,GAAqB7C,OAAO,CAAC6C,WAA7B;AACJ,UAAI7C,OAAO,CAAC8C,aAAR,IAAyB,IAAzB,IAAiC9C,OAAO,CAACO,cAAR,CAAuB,eAAvB,CAArC,EACIL,MAAM,CAAC4C,aAAP,GAAuBzC,OAAO,CAAC0C,KAAR,KAAkB5C,MAAlB,GAA2Bd,KAAK,CAACE,SAAN,CAAgB8C,aAAhB,CAA8BrC,OAAO,CAAC8C,aAAtC,CAA3B,GAAkF9C,OAAO,CAAC8C,aAAjH;AACJ,UAAI9C,OAAO,CAACc,eAAR,IAA2B,IAA3B,IAAmCd,OAAO,CAACO,cAAR,CAAuB,iBAAvB,CAAvC,EACIL,MAAM,CAACY,eAAP,GAAyBd,OAAO,CAACc,eAAjC;AACJ,aAAOZ,MAAP;AACH,KA/BD;AAiCA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQuC,IAAAA,oBAAoB,CAAC3C,SAArB,CAA+BU,MAA/B,GAAwC,SAASA,MAAT,GAAkB;AACtD,aAAO,KAAKC,WAAL,CAAiBL,QAAjB,CAA0B,IAA1B,EAAgClB,SAAS,CAACE,IAAV,CAAesB,aAA/C,CAAP;AACH,KAFD;;AAIA,WAAO+B,oBAAP;AACH,GApMgC,EAAjC;;AAsMAlD,EAAAA,SAAS,CAACyD,OAAV,GAAqB,YAAW;AAE5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAASA,OAAT,CAAiBvD,UAAjB,EAA6B;AACzB,UAAIA,UAAJ,EACI,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE,EACI,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EACI,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AACf;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQoD,IAAAA,OAAO,CAAClD,SAAR,CAAkBmB,EAAlB,GAAuB9B,KAAK,CAAC+B,IAAN,GAAa/B,KAAK,CAAC+B,IAAN,CAAWC,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,KAAxB,CAAb,GAA8C,CAArE;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ6B,IAAAA,OAAO,CAAClD,SAAR,CAAkBc,WAAlB,GAAgC,EAAhC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQoC,IAAAA,OAAO,CAAClD,SAAR,CAAkBgB,eAAlB,GAAoC,EAApC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQkC,IAAAA,OAAO,CAAClD,SAAR,CAAkB4C,YAAlB,GAAiC,EAAjC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQM,IAAAA,OAAO,CAAClD,SAAR,CAAkBe,YAAlB,GAAiC,EAAjC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQmC,IAAAA,OAAO,CAAClD,SAAR,CAAkBmD,QAAlB,GAA6B,EAA7B;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQD,IAAAA,OAAO,CAAClD,SAAR,CAAkBoD,QAAlB,GAA6B,EAA7B;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQF,IAAAA,OAAO,CAAClD,SAAR,CAAkBgD,aAAlB,GAAkC,CAAlC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQE,IAAAA,OAAO,CAAClD,SAAR,CAAkB6C,QAAlB,GAA6B,EAA7B;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQK,IAAAA,OAAO,CAAClD,SAAR,CAAkB8C,aAAlB,GAAkC,EAAlC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQI,IAAAA,OAAO,CAAClD,SAAR,CAAkB+C,WAAlB,GAAgC,EAAhC;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQG,IAAAA,OAAO,CAAClD,SAAR,CAAkBqD,QAAlB,GAA6BhE,KAAK,CAAC+B,IAAN,GAAa/B,KAAK,CAAC+B,IAAN,CAAWC,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,KAAxB,CAAb,GAA8C,CAA3E;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ6B,IAAAA,OAAO,CAAClD,SAAR,CAAkBsD,WAAlB,GAAgCjE,KAAK,CAAC+B,IAAN,GAAa/B,KAAK,CAAC+B,IAAN,CAAWC,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,KAAxB,CAAb,GAA8C,CAA9E;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ6B,IAAAA,OAAO,CAAClD,SAAR,CAAkBuD,UAAlB,GAA+BlE,KAAK,CAAC+B,IAAN,GAAa/B,KAAK,CAAC+B,IAAN,CAAWC,QAAX,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,KAAxB,CAAb,GAA8C,CAA7E;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ6B,IAAAA,OAAO,CAAC/C,UAAR,GAAqB,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AAC7C,UAAIA,MAAM,YAAYb,KAAK,CAACE,SAAN,CAAgByD,OAAtC,EACI,OAAO9C,MAAP;AACJ,UAAIF,OAAO,GAAG,IAAIX,KAAK,CAACE,SAAN,CAAgByD,OAApB,EAAd;AACA,UAAI9C,MAAM,CAACe,EAAP,IAAa,IAAjB,EACI,IAAI9B,KAAK,CAAC+B,IAAV,EACI,CAAClB,OAAO,CAACiB,EAAR,GAAa9B,KAAK,CAAC+B,IAAN,CAAWE,SAAX,CAAqBlB,MAAM,CAACe,EAA5B,CAAd,EAA+CI,QAA/C,GAA0D,KAA1D,CADJ,KAEK,IAAI,OAAOnB,MAAM,CAACe,EAAd,KAAqB,QAAzB,EACDjB,OAAO,CAACiB,EAAR,GAAaK,QAAQ,CAACpB,MAAM,CAACe,EAAR,EAAY,EAAZ,CAArB,CADC,KAEA,IAAI,OAAOf,MAAM,CAACe,EAAd,KAAqB,QAAzB,EACDjB,OAAO,CAACiB,EAAR,GAAaf,MAAM,CAACe,EAApB,CADC,KAEA,IAAI,OAAOf,MAAM,CAACe,EAAd,KAAqB,QAAzB,EACDjB,OAAO,CAACiB,EAAR,GAAa,IAAI9B,KAAK,CAACoC,QAAV,CAAmBrB,MAAM,CAACe,EAAP,CAAUO,GAAV,KAAkB,CAArC,EAAwCtB,MAAM,CAACe,EAAP,CAAUQ,IAAV,KAAmB,CAA3D,EAA8DC,QAA9D,EAAb;AACR,UAAIxB,MAAM,CAACU,WAAP,IAAsB,IAA1B,EACIZ,OAAO,CAACY,WAAR,GAAsBT,MAAM,CAACD,MAAM,CAACU,WAAR,CAA5B;AACJ,UAAIV,MAAM,CAACY,eAAP,IAA0B,IAA9B,EACId,OAAO,CAACc,eAAR,GAA0BX,MAAM,CAACD,MAAM,CAACY,eAAR,CAAhC;AACJ,UAAIZ,MAAM,CAACwC,YAAP,IAAuB,IAA3B,EACI1C,OAAO,CAAC0C,YAAR,GAAuBvC,MAAM,CAACD,MAAM,CAACwC,YAAR,CAA7B;AACJ,UAAIxC,MAAM,CAACW,YAAP,IAAuB,IAA3B,EACIb,OAAO,CAACa,YAAR,GAAuBV,MAAM,CAACD,MAAM,CAACW,YAAR,CAA7B;AACJ,UAAIX,MAAM,CAAC+C,QAAP,IAAmB,IAAvB,EACIjD,OAAO,CAACiD,QAAR,GAAmB9C,MAAM,CAACD,MAAM,CAAC+C,QAAR,CAAzB;AACJ,UAAI/C,MAAM,CAACgD,QAAP,IAAmB,IAAvB,EACIlD,OAAO,CAACkD,QAAR,GAAmB/C,MAAM,CAACD,MAAM,CAACgD,QAAR,CAAzB;;AACJ,cAAQhD,MAAM,CAAC4C,aAAf;AACA,aAAK,QAAL;AACA,aAAK,CAAL;AACI9C,UAAAA,OAAO,CAAC8C,aAAR,GAAwB,CAAxB;AACA;;AACJ,aAAK,SAAL;AACA,aAAK,CAAL;AACI9C,UAAAA,OAAO,CAAC8C,aAAR,GAAwB,CAAxB;AACA;;AACJ,aAAK,MAAL;AACA,aAAK,CAAL;AACI9C,UAAAA,OAAO,CAAC8C,aAAR,GAAwB,CAAxB;AACA;;AACJ,aAAK,QAAL;AACA,aAAK,CAAL;AACI9C,UAAAA,OAAO,CAAC8C,aAAR,GAAwB,CAAxB;AACA;AAhBJ;;AAkBA,UAAI5C,MAAM,CAACyC,QAAP,IAAmB,IAAvB,EACI3C,OAAO,CAAC2C,QAAR,GAAmBxC,MAAM,CAACD,MAAM,CAACyC,QAAR,CAAzB;AACJ,UAAIzC,MAAM,CAAC0C,aAAP,IAAwB,IAA5B,EACI5C,OAAO,CAAC4C,aAAR,GAAwBzC,MAAM,CAACD,MAAM,CAAC0C,aAAR,CAA9B;AACJ,UAAI1C,MAAM,CAAC2C,WAAP,IAAsB,IAA1B,EACI7C,OAAO,CAAC6C,WAAR,GAAsB1C,MAAM,CAACD,MAAM,CAAC2C,WAAR,CAA5B;AACJ,UAAI3C,MAAM,CAACiD,QAAP,IAAmB,IAAvB,EACI,IAAIhE,KAAK,CAAC+B,IAAV,EACI,CAAClB,OAAO,CAACmD,QAAR,GAAmBhE,KAAK,CAAC+B,IAAN,CAAWE,SAAX,CAAqBlB,MAAM,CAACiD,QAA5B,CAApB,EAA2D9B,QAA3D,GAAsE,KAAtE,CADJ,KAEK,IAAI,OAAOnB,MAAM,CAACiD,QAAd,KAA2B,QAA/B,EACDnD,OAAO,CAACmD,QAAR,GAAmB7B,QAAQ,CAACpB,MAAM,CAACiD,QAAR,EAAkB,EAAlB,CAA3B,CADC,KAEA,IAAI,OAAOjD,MAAM,CAACiD,QAAd,KAA2B,QAA/B,EACDnD,OAAO,CAACmD,QAAR,GAAmBjD,MAAM,CAACiD,QAA1B,CADC,KAEA,IAAI,OAAOjD,MAAM,CAACiD,QAAd,KAA2B,QAA/B,EACDnD,OAAO,CAACmD,QAAR,GAAmB,IAAIhE,KAAK,CAACoC,QAAV,CAAmBrB,MAAM,CAACiD,QAAP,CAAgB3B,GAAhB,KAAwB,CAA3C,EAA8CtB,MAAM,CAACiD,QAAP,CAAgB1B,IAAhB,KAAyB,CAAvE,EAA0EC,QAA1E,EAAnB;AACR,UAAIxB,MAAM,CAACkD,WAAP,IAAsB,IAA1B,EACI,IAAIjE,KAAK,CAAC+B,IAAV,EACI,CAAClB,OAAO,CAACoD,WAAR,GAAsBjE,KAAK,CAAC+B,IAAN,CAAWE,SAAX,CAAqBlB,MAAM,CAACkD,WAA5B,CAAvB,EAAiE/B,QAAjE,GAA4E,KAA5E,CADJ,KAEK,IAAI,OAAOnB,MAAM,CAACkD,WAAd,KAA8B,QAAlC,EACDpD,OAAO,CAACoD,WAAR,GAAsB9B,QAAQ,CAACpB,MAAM,CAACkD,WAAR,EAAqB,EAArB,CAA9B,CADC,KAEA,IAAI,OAAOlD,MAAM,CAACkD,WAAd,KAA8B,QAAlC,EACDpD,OAAO,CAACoD,WAAR,GAAsBlD,MAAM,CAACkD,WAA7B,CADC,KAEA,IAAI,OAAOlD,MAAM,CAACkD,WAAd,KAA8B,QAAlC,EACDpD,OAAO,CAACoD,WAAR,GAAsB,IAAIjE,KAAK,CAACoC,QAAV,CAAmBrB,MAAM,CAACkD,WAAP,CAAmB5B,GAAnB,KAA2B,CAA9C,EAAiDtB,MAAM,CAACkD,WAAP,CAAmB3B,IAAnB,KAA4B,CAA7E,EAAgFC,QAAhF,EAAtB;AACR,UAAIxB,MAAM,CAACmD,UAAP,IAAqB,IAAzB,EACI,IAAIlE,KAAK,CAAC+B,IAAV,EACI,CAAClB,OAAO,CAACqD,UAAR,GAAqBlE,KAAK,CAAC+B,IAAN,CAAWE,SAAX,CAAqBlB,MAAM,CAACmD,UAA5B,CAAtB,EAA+DhC,QAA/D,GAA0E,KAA1E,CADJ,KAEK,IAAI,OAAOnB,MAAM,CAACmD,UAAd,KAA6B,QAAjC,EACDrD,OAAO,CAACqD,UAAR,GAAqB/B,QAAQ,CAACpB,MAAM,CAACmD,UAAR,EAAoB,EAApB,CAA7B,CADC,KAEA,IAAI,OAAOnD,MAAM,CAACmD,UAAd,KAA6B,QAAjC,EACDrD,OAAO,CAACqD,UAAR,GAAqBnD,MAAM,CAACmD,UAA5B,CADC,KAEA,IAAI,OAAOnD,MAAM,CAACmD,UAAd,KAA6B,QAAjC,EACDrD,OAAO,CAACqD,UAAR,GAAqB,IAAIlE,KAAK,CAACoC,QAAV,CAAmBrB,MAAM,CAACmD,UAAP,CAAkB7B,GAAlB,KAA0B,CAA7C,EAAgDtB,MAAM,CAACmD,UAAP,CAAkB5B,IAAlB,KAA2B,CAA3E,EAA8EC,QAA9E,EAArB;AACR,aAAO1B,OAAP;AACH,KA7ED;AA+EA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQgD,IAAAA,OAAO,CAAC5C,QAAR,GAAmB,SAASA,QAAT,CAAkBJ,OAAlB,EAA2BK,OAA3B,EAAoC;AACnD,UAAI,CAACA,OAAL,EACIA,OAAO,GAAG,EAAV;AACJ,UAAIH,MAAM,GAAG,EAAb;;AACA,UAAIG,OAAO,CAACC,QAAZ,EAAsB;AAClB,YAAInB,KAAK,CAAC+B,IAAV,EAAgB;AACZ,cAAIS,IAAI,GAAG,IAAIxC,KAAK,CAAC+B,IAAV,CAAe,CAAf,EAAkB,CAAlB,EAAqB,KAArB,CAAX;AACAhB,UAAAA,MAAM,CAACe,EAAP,GAAYZ,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BwB,IAAI,CAACE,QAAL,EAA3B,GAA6CxB,OAAO,CAACuB,KAAR,KAAkBE,MAAlB,GAA2BH,IAAI,CAACD,QAAL,EAA3B,GAA6CC,IAAtG;AACH,SAHD,MAIIzB,MAAM,CAACe,EAAP,GAAYZ,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2B,GAA3B,GAAiC,CAA7C;;AACJD,QAAAA,MAAM,CAACU,WAAP,GAAqB,EAArB;AACAV,QAAAA,MAAM,CAACY,eAAP,GAAyB,EAAzB;AACAZ,QAAAA,MAAM,CAACwC,YAAP,GAAsB,EAAtB;AACAxC,QAAAA,MAAM,CAACW,YAAP,GAAsB,EAAtB;AACAX,QAAAA,MAAM,CAAC+C,QAAP,GAAkB,EAAlB;AACA/C,QAAAA,MAAM,CAACgD,QAAP,GAAkB,EAAlB;AACAhD,QAAAA,MAAM,CAAC4C,aAAP,GAAuBzC,OAAO,CAAC0C,KAAR,KAAkB5C,MAAlB,GAA2B,QAA3B,GAAsC,CAA7D;AACAD,QAAAA,MAAM,CAACyC,QAAP,GAAkB,EAAlB;AACAzC,QAAAA,MAAM,CAAC0C,aAAP,GAAuB,EAAvB;AACA1C,QAAAA,MAAM,CAAC2C,WAAP,GAAqB,EAArB;;AACA,YAAI1D,KAAK,CAAC+B,IAAV,EAAgB;AACZ,cAAIS,IAAI,GAAG,IAAIxC,KAAK,CAAC+B,IAAV,CAAe,CAAf,EAAkB,CAAlB,EAAqB,KAArB,CAAX;AACAhB,UAAAA,MAAM,CAACiD,QAAP,GAAkB9C,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BwB,IAAI,CAACE,QAAL,EAA3B,GAA6CxB,OAAO,CAACuB,KAAR,KAAkBE,MAAlB,GAA2BH,IAAI,CAACD,QAAL,EAA3B,GAA6CC,IAA5G;AACH,SAHD,MAIIzB,MAAM,CAACiD,QAAP,GAAkB9C,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2B,GAA3B,GAAiC,CAAnD;;AACJ,YAAIhB,KAAK,CAAC+B,IAAV,EAAgB;AACZ,cAAIS,IAAI,GAAG,IAAIxC,KAAK,CAAC+B,IAAV,CAAe,CAAf,EAAkB,CAAlB,EAAqB,KAArB,CAAX;AACAhB,UAAAA,MAAM,CAACkD,WAAP,GAAqB/C,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BwB,IAAI,CAACE,QAAL,EAA3B,GAA6CxB,OAAO,CAACuB,KAAR,KAAkBE,MAAlB,GAA2BH,IAAI,CAACD,QAAL,EAA3B,GAA6CC,IAA/G;AACH,SAHD,MAIIzB,MAAM,CAACkD,WAAP,GAAqB/C,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2B,GAA3B,GAAiC,CAAtD;;AACJ,YAAIhB,KAAK,CAAC+B,IAAV,EAAgB;AACZ,cAAIS,IAAI,GAAG,IAAIxC,KAAK,CAAC+B,IAAV,CAAe,CAAf,EAAkB,CAAlB,EAAqB,KAArB,CAAX;AACAhB,UAAAA,MAAM,CAACmD,UAAP,GAAoBhD,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BwB,IAAI,CAACE,QAAL,EAA3B,GAA6CxB,OAAO,CAACuB,KAAR,KAAkBE,MAAlB,GAA2BH,IAAI,CAACD,QAAL,EAA3B,GAA6CC,IAA9G;AACH,SAHD,MAIIzB,MAAM,CAACmD,UAAP,GAAoBhD,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2B,GAA3B,GAAiC,CAArD;AACP;;AACD,UAAIH,OAAO,CAACiB,EAAR,IAAc,IAAd,IAAsBjB,OAAO,CAACO,cAAR,CAAuB,IAAvB,CAA1B,EACI,IAAI,OAAOP,OAAO,CAACiB,EAAf,KAAsB,QAA1B,EACIf,MAAM,CAACe,EAAP,GAAYZ,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BA,MAAM,CAACH,OAAO,CAACiB,EAAT,CAAjC,GAAgDjB,OAAO,CAACiB,EAApE,CADJ,KAGIf,MAAM,CAACe,EAAP,GAAYZ,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BhB,KAAK,CAAC+B,IAAN,CAAWpB,SAAX,CAAqB+B,QAArB,CAA8BE,IAA9B,CAAmC/B,OAAO,CAACiB,EAA3C,CAA3B,GAA4EZ,OAAO,CAACuB,KAAR,KAAkBE,MAAlB,GAA2B,IAAI3C,KAAK,CAACoC,QAAV,CAAmBvB,OAAO,CAACiB,EAAR,CAAWO,GAAX,KAAmB,CAAtC,EAAyCxB,OAAO,CAACiB,EAAR,CAAWQ,IAAX,KAAoB,CAA7D,EAAgEC,QAAhE,EAA3B,GAAwG1B,OAAO,CAACiB,EAAxM;AACR,UAAIjB,OAAO,CAACY,WAAR,IAAuB,IAAvB,IAA+BZ,OAAO,CAACO,cAAR,CAAuB,aAAvB,CAAnC,EACIL,MAAM,CAACU,WAAP,GAAqBZ,OAAO,CAACY,WAA7B;AACJ,UAAIZ,OAAO,CAACc,eAAR,IAA2B,IAA3B,IAAmCd,OAAO,CAACO,cAAR,CAAuB,iBAAvB,CAAvC,EACIL,MAAM,CAACY,eAAP,GAAyBd,OAAO,CAACc,eAAjC;AACJ,UAAId,OAAO,CAAC0C,YAAR,IAAwB,IAAxB,IAAgC1C,OAAO,CAACO,cAAR,CAAuB,cAAvB,CAApC,EACIL,MAAM,CAACwC,YAAP,GAAsB1C,OAAO,CAAC0C,YAA9B;AACJ,UAAI1C,OAAO,CAACa,YAAR,IAAwB,IAAxB,IAAgCb,OAAO,CAACO,cAAR,CAAuB,cAAvB,CAApC,EACIL,MAAM,CAACW,YAAP,GAAsBb,OAAO,CAACa,YAA9B;AACJ,UAAIb,OAAO,CAACiD,QAAR,IAAoB,IAApB,IAA4BjD,OAAO,CAACO,cAAR,CAAuB,UAAvB,CAAhC,EACIL,MAAM,CAAC+C,QAAP,GAAkBjD,OAAO,CAACiD,QAA1B;AACJ,UAAIjD,OAAO,CAACkD,QAAR,IAAoB,IAApB,IAA4BlD,OAAO,CAACO,cAAR,CAAuB,UAAvB,CAAhC,EACIL,MAAM,CAACgD,QAAP,GAAkBlD,OAAO,CAACkD,QAA1B;AACJ,UAAIlD,OAAO,CAAC8C,aAAR,IAAyB,IAAzB,IAAiC9C,OAAO,CAACO,cAAR,CAAuB,eAAvB,CAArC,EACIL,MAAM,CAAC4C,aAAP,GAAuBzC,OAAO,CAAC0C,KAAR,KAAkB5C,MAAlB,GAA2Bd,KAAK,CAACE,SAAN,CAAgB8C,aAAhB,CAA8BrC,OAAO,CAAC8C,aAAtC,CAA3B,GAAkF9C,OAAO,CAAC8C,aAAjH;AACJ,UAAI9C,OAAO,CAAC2C,QAAR,IAAoB,IAApB,IAA4B3C,OAAO,CAACO,cAAR,CAAuB,UAAvB,CAAhC,EACIL,MAAM,CAACyC,QAAP,GAAkB3C,OAAO,CAAC2C,QAA1B;AACJ,UAAI3C,OAAO,CAAC4C,aAAR,IAAyB,IAAzB,IAAiC5C,OAAO,CAACO,cAAR,CAAuB,eAAvB,CAArC,EACIL,MAAM,CAAC0C,aAAP,GAAuB5C,OAAO,CAAC4C,aAA/B;AACJ,UAAI5C,OAAO,CAAC6C,WAAR,IAAuB,IAAvB,IAA+B7C,OAAO,CAACO,cAAR,CAAuB,aAAvB,CAAnC,EACIL,MAAM,CAAC2C,WAAP,GAAqB7C,OAAO,CAAC6C,WAA7B;AACJ,UAAI7C,OAAO,CAACmD,QAAR,IAAoB,IAApB,IAA4BnD,OAAO,CAACO,cAAR,CAAuB,UAAvB,CAAhC,EACI,IAAI,OAAOP,OAAO,CAACmD,QAAf,KAA4B,QAAhC,EACIjD,MAAM,CAACiD,QAAP,GAAkB9C,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BA,MAAM,CAACH,OAAO,CAACmD,QAAT,CAAjC,GAAsDnD,OAAO,CAACmD,QAAhF,CADJ,KAGIjD,MAAM,CAACiD,QAAP,GAAkB9C,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BhB,KAAK,CAAC+B,IAAN,CAAWpB,SAAX,CAAqB+B,QAArB,CAA8BE,IAA9B,CAAmC/B,OAAO,CAACmD,QAA3C,CAA3B,GAAkF9C,OAAO,CAACuB,KAAR,KAAkBE,MAAlB,GAA2B,IAAI3C,KAAK,CAACoC,QAAV,CAAmBvB,OAAO,CAACmD,QAAR,CAAiB3B,GAAjB,KAAyB,CAA5C,EAA+CxB,OAAO,CAACmD,QAAR,CAAiB1B,IAAjB,KAA0B,CAAzE,EAA4EC,QAA5E,EAA3B,GAAoH1B,OAAO,CAACmD,QAAhO;AACR,UAAInD,OAAO,CAACoD,WAAR,IAAuB,IAAvB,IAA+BpD,OAAO,CAACO,cAAR,CAAuB,aAAvB,CAAnC,EACI,IAAI,OAAOP,OAAO,CAACoD,WAAf,KAA+B,QAAnC,EACIlD,MAAM,CAACkD,WAAP,GAAqB/C,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BA,MAAM,CAACH,OAAO,CAACoD,WAAT,CAAjC,GAAyDpD,OAAO,CAACoD,WAAtF,CADJ,KAGIlD,MAAM,CAACkD,WAAP,GAAqB/C,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BhB,KAAK,CAAC+B,IAAN,CAAWpB,SAAX,CAAqB+B,QAArB,CAA8BE,IAA9B,CAAmC/B,OAAO,CAACoD,WAA3C,CAA3B,GAAqF/C,OAAO,CAACuB,KAAR,KAAkBE,MAAlB,GAA2B,IAAI3C,KAAK,CAACoC,QAAV,CAAmBvB,OAAO,CAACoD,WAAR,CAAoB5B,GAApB,KAA4B,CAA/C,EAAkDxB,OAAO,CAACoD,WAAR,CAAoB3B,IAApB,KAA6B,CAA/E,EAAkFC,QAAlF,EAA3B,GAA0H1B,OAAO,CAACoD,WAA5O;AACR,UAAIpD,OAAO,CAACqD,UAAR,IAAsB,IAAtB,IAA8BrD,OAAO,CAACO,cAAR,CAAuB,YAAvB,CAAlC,EACI,IAAI,OAAOP,OAAO,CAACqD,UAAf,KAA8B,QAAlC,EACInD,MAAM,CAACmD,UAAP,GAAoBhD,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BA,MAAM,CAACH,OAAO,CAACqD,UAAT,CAAjC,GAAwDrD,OAAO,CAACqD,UAApF,CADJ,KAGInD,MAAM,CAACmD,UAAP,GAAoBhD,OAAO,CAACuB,KAAR,KAAkBzB,MAAlB,GAA2BhB,KAAK,CAAC+B,IAAN,CAAWpB,SAAX,CAAqB+B,QAArB,CAA8BE,IAA9B,CAAmC/B,OAAO,CAACqD,UAA3C,CAA3B,GAAoFhD,OAAO,CAACuB,KAAR,KAAkBE,MAAlB,GAA2B,IAAI3C,KAAK,CAACoC,QAAV,CAAmBvB,OAAO,CAACqD,UAAR,CAAmB7B,GAAnB,KAA2B,CAA9C,EAAiDxB,OAAO,CAACqD,UAAR,CAAmB5B,IAAnB,KAA4B,CAA7E,EAAgFC,QAAhF,EAA3B,GAAwH1B,OAAO,CAACqD,UAAxO;AACR,aAAOnD,MAAP;AACH,KA7ED;AA+EA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQ8C,IAAAA,OAAO,CAAClD,SAAR,CAAkBU,MAAlB,GAA2B,SAASA,MAAT,GAAkB;AACzC,aAAO,KAAKC,WAAL,CAAiBL,QAAjB,CAA0B,IAA1B,EAAgClB,SAAS,CAACE,IAAV,CAAesB,aAA/C,CAAP;AACH,KAFD;;AAIA,WAAOsC,OAAP;AACH,GAhVmB,EAApB;;AAkVAzD,EAAAA,SAAS,CAAC+D,iBAAV,GAA+B,YAAW;AAEtC;AACR;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAASA,iBAAT,CAA2B7D,UAA3B,EAAuC;AACnC,UAAIA,UAAJ,EACI,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE,EACI,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EACI,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AACf;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ0D,IAAAA,iBAAiB,CAACxD,SAAlB,CAA4Be,YAA5B,GAA2C,EAA3C;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQyC,IAAAA,iBAAiB,CAACrD,UAAlB,GAA+B,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACvD,UAAIA,MAAM,YAAYb,KAAK,CAACE,SAAN,CAAgB+D,iBAAtC,EACI,OAAOpD,MAAP;AACJ,UAAIF,OAAO,GAAG,IAAIX,KAAK,CAACE,SAAN,CAAgB+D,iBAApB,EAAd;AACA,UAAIpD,MAAM,CAACW,YAAP,IAAuB,IAA3B,EACIb,OAAO,CAACa,YAAR,GAAuBV,MAAM,CAACD,MAAM,CAACW,YAAR,CAA7B;AACJ,aAAOb,OAAP;AACH,KAPD;AASA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQsD,IAAAA,iBAAiB,CAAClD,QAAlB,GAA6B,SAASA,QAAT,CAAkBJ,OAAlB,EAA2BK,OAA3B,EAAoC;AAC7D,UAAI,CAACA,OAAL,EACIA,OAAO,GAAG,EAAV;AACJ,UAAIH,MAAM,GAAG,EAAb;AACA,UAAIG,OAAO,CAACC,QAAZ,EACIJ,MAAM,CAACW,YAAP,GAAsB,EAAtB;AACJ,UAAIb,OAAO,CAACa,YAAR,IAAwB,IAAxB,IAAgCb,OAAO,CAACO,cAAR,CAAuB,cAAvB,CAApC,EACIL,MAAM,CAACW,YAAP,GAAsBb,OAAO,CAACa,YAA9B;AACJ,aAAOX,MAAP;AACH,KATD;AAWA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQoD,IAAAA,iBAAiB,CAACxD,SAAlB,CAA4BU,MAA5B,GAAqC,SAASA,MAAT,GAAkB;AACnD,aAAO,KAAKC,WAAL,CAAiBL,QAAjB,CAA0B,IAA1B,EAAgClB,SAAS,CAACE,IAAV,CAAesB,aAA/C,CAAP;AACH,KAFD;;AAIA,WAAO4C,iBAAP;AACH,GAjF6B,EAA9B;;AAmFA/D,EAAAA,SAAS,CAACgE,iBAAV,GAA+B,YAAW;AAEtC;AACR;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAASA,iBAAT,CAA2B9D,UAA3B,EAAuC;AACnC,UAAIA,UAAJ,EACI,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,UAAZ,CAAX,EAAoCG,CAAC,GAAG,CAA7C,EAAgDA,CAAC,GAAGF,IAAI,CAACG,MAAzD,EAAiE,EAAED,CAAnE,EACI,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAAV,IAAuB,IAA3B,EACI,KAAKF,IAAI,CAACE,CAAD,CAAT,IAAgBH,UAAU,CAACC,IAAI,CAACE,CAAD,CAAL,CAA1B;AACf;AAED;AACR;AACA;AACA;AACA;AACA;;;AACQ2D,IAAAA,iBAAiB,CAACzD,SAAlB,CAA4BoC,OAA5B,GAAsC,KAAtC;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQqB,IAAAA,iBAAiB,CAACtD,UAAlB,GAA+B,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AACvD,UAAIA,MAAM,YAAYb,KAAK,CAACE,SAAN,CAAgBgE,iBAAtC,EACI,OAAOrD,MAAP;AACJ,UAAIF,OAAO,GAAG,IAAIX,KAAK,CAACE,SAAN,CAAgBgE,iBAApB,EAAd;AACA,UAAIrD,MAAM,CAACgC,OAAP,IAAkB,IAAtB,EACIlC,OAAO,CAACkC,OAAR,GAAkBE,OAAO,CAAClC,MAAM,CAACgC,OAAR,CAAzB;AACJ,aAAOlC,OAAP;AACH,KAPD;AASA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQuD,IAAAA,iBAAiB,CAACnD,QAAlB,GAA6B,SAASA,QAAT,CAAkBJ,OAAlB,EAA2BK,OAA3B,EAAoC;AAC7D,UAAI,CAACA,OAAL,EACIA,OAAO,GAAG,EAAV;AACJ,UAAIH,MAAM,GAAG,EAAb;AACA,UAAIG,OAAO,CAACC,QAAZ,EACIJ,MAAM,CAACgC,OAAP,GAAiB,KAAjB;AACJ,UAAIlC,OAAO,CAACkC,OAAR,IAAmB,IAAnB,IAA2BlC,OAAO,CAACO,cAAR,CAAuB,SAAvB,CAA/B,EACIL,MAAM,CAACgC,OAAP,GAAiBlC,OAAO,CAACkC,OAAzB;AACJ,aAAOhC,MAAP;AACH,KATD;AAWA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQqD,IAAAA,iBAAiB,CAACzD,SAAlB,CAA4BU,MAA5B,GAAqC,SAASA,MAAT,GAAkB;AACnD,aAAO,KAAKC,WAAL,CAAiBL,QAAjB,CAA0B,IAA1B,EAAgClB,SAAS,CAACE,IAAV,CAAesB,aAA/C,CAAP;AACH,KAFD;;AAIA,WAAO6C,iBAAP;AACH,GAjF6B,EAA9B;;AAmFAhE,EAAAA,SAAS,CAACiE,cAAV,GAA4B,YAAW;AAEnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAASA,cAAT,CAAwBC,OAAxB,EAAiCC,gBAAjC,EAAmDC,iBAAnD,EAAsE;AAClEzE,MAAAA,SAAS,CAAC0E,GAAV,CAAcC,OAAd,CAAsB9B,IAAtB,CAA2B,IAA3B,EAAiC0B,OAAjC,EAA0CC,gBAA1C,EAA4DC,iBAA5D;AACH;;AAED,KAACH,cAAc,CAAC1D,SAAf,GAA2BH,MAAM,CAAC6C,MAAP,CAActD,SAAS,CAAC0E,GAAV,CAAcC,OAAd,CAAsB/D,SAApC,CAA5B,EAA4EW,WAA5E,GAA0F+C,cAA1F;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ7D,IAAAA,MAAM,CAACmE,cAAP,CAAsBN,cAAc,CAAC1D,SAAf,CAAyBiE,MAAzB,GAAkC,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,QAAzB,EAAmC;AACvF,aAAO,KAAKC,OAAL,CAAaH,MAAb,EAAqB1E,KAAK,CAACE,SAAN,CAAgBoB,aAArC,EAAoDtB,KAAK,CAACE,SAAN,CAAgByB,SAApE,EAA+EgD,OAA/E,EAAwFC,QAAxF,CAAP;AACH,KAFD,EAEG,MAFH,EAEW;AAAEE,MAAAA,KAAK,EAAE;AAAT,KAFX;AAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQxE,IAAAA,MAAM,CAACmE,cAAP,CAAsBN,cAAc,CAAC1D,SAAf,CAAyBsE,MAAzB,GAAkC,SAASA,MAAT,CAAgBJ,OAAhB,EAAyBC,QAAzB,EAAmC;AACvF,aAAO,KAAKC,OAAL,CAAaE,MAAb,EAAqB/E,KAAK,CAACE,SAAN,CAAgByC,aAArC,EAAoD3C,KAAK,CAACE,SAAN,CAAgB0C,cAApE,EAAoF+B,OAApF,EAA6FC,QAA7F,CAAP;AACH,KAFD,EAEG,MAFH,EAEW;AAAEE,MAAAA,KAAK,EAAE;AAAT,KAFX;AAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQxE,IAAAA,MAAM,CAACmE,cAAP,CAAsBN,cAAc,CAAC1D,SAAf,CAAyBuE,OAAzB,GAAmC,SAASA,OAAT,CAAiBL,OAAjB,EAA0BC,QAA1B,EAAoC;AACzF,aAAO,KAAKC,OAAL,CAAaG,OAAb,EAAsBhF,KAAK,CAACE,SAAN,CAAgByB,SAAtC,EAAiD3B,KAAK,CAACE,SAAN,CAAgBgE,iBAAjE,EAAoFS,OAApF,EAA6FC,QAA7F,CAAP;AACH,KAFD,EAEG,MAFH,EAEW;AAAEE,MAAAA,KAAK,EAAE;AAAT,KAFX;AAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQxE,IAAAA,MAAM,CAACmE,cAAP,CAAsBN,cAAc,CAAC1D,SAAf,CAAyBwE,UAAzB,GAAsC,SAASA,UAAT,CAAoBN,OAApB,EAA6BC,QAA7B,EAAuC;AAC/F,aAAO,KAAKC,OAAL,CAAaI,UAAb,EAAyBjF,KAAK,CAACE,SAAN,CAAgB+D,iBAAzC,EAA4DjE,KAAK,CAACE,SAAN,CAAgBgE,iBAA5E,EAA+FS,OAA/F,EAAwGC,QAAxG,CAAP;AACH,KAFD,EAEG,MAFH,EAEW;AAAEE,MAAAA,KAAK,EAAE;AAAT,KAFX;AAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQxE,IAAAA,MAAM,CAACmE,cAAP,CAAsBN,cAAc,CAAC1D,SAAf,CAAyByE,aAAzB,GAAyC,SAASA,aAAT,CAAuBP,OAAvB,EAAgCC,QAAhC,EAA0C;AACrG,aAAO,KAAKC,OAAL,CAAaK,aAAb,EAA4BlF,KAAK,CAACE,SAAN,CAAgBkD,oBAA5C,EAAkEpD,KAAK,CAACE,SAAN,CAAgByB,SAAlF,EAA6FgD,OAA7F,EAAsGC,QAAtG,CAAP;AACH,KAFD,EAEG,MAFH,EAEW;AAAEE,MAAAA,KAAK,EAAE;AAAT,KAFX;AAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQxE,IAAAA,MAAM,CAACmE,cAAP,CAAsBN,cAAc,CAAC1D,SAAf,CAAyB0E,UAAzB,GAAsC,SAASA,UAAT,CAAoBR,OAApB,EAA6BC,QAA7B,EAAuC;AAC/F,aAAO,KAAKC,OAAL,CAAaM,UAAb,EAAyBnF,KAAK,CAACE,SAAN,CAAgByB,SAAzC,EAAoD3B,KAAK,CAACE,SAAN,CAAgByD,OAApE,EAA6EgB,OAA7E,EAAsFC,QAAtF,CAAP;AACH,KAFD,EAEG,MAFH,EAEW;AAAEE,MAAAA,KAAK,EAAE;AAAT,KAFX;AAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ,WAAOX,cAAP;AACH,GAzN0B,EAA3B;;AA2NA,SAAOjE,SAAP;AACH,CAx8C0C,GAApC","sourcesContent":["import * as $protobuf from \"protobufjs\";\n\n// Common aliases\nconst $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const shakebook = $root.shakebook = (() => {\n\n    /**\n     * Namespace shakebook.\n     * @exports shakebook\n     * @namespace\n     */\n    const shakebook = {};\n\n    shakebook.ErrorResponse = (function() {\n\n        /**\n         * Properties of an ErrorResponse.\n         * @memberof shakebook\n         * @interface IErrorResponse\n         * @property {number|null} [code] ErrorResponse code\n         * @property {string|null} [message] ErrorResponse message\n         */\n\n        /**\n         * Constructs a new ErrorResponse.\n         * @memberof shakebook\n         * @classdesc Represents an ErrorResponse.\n         * @implements IErrorResponse\n         * @constructor\n         * @param {shakebook.IErrorResponse=} [properties] Properties to set\n         */\n        function ErrorResponse(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ErrorResponse code.\n         * @member {number} code\n         * @memberof shakebook.ErrorResponse\n         * @instance\n         */\n        ErrorResponse.prototype.code = 0;\n\n        /**\n         * ErrorResponse message.\n         * @member {string} message\n         * @memberof shakebook.ErrorResponse\n         * @instance\n         */\n        ErrorResponse.prototype.message = \"\";\n\n        /**\n         * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.ErrorResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.ErrorResponse} ErrorResponse\n         */\n        ErrorResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.ErrorResponse)\n                return object;\n            let message = new $root.shakebook.ErrorResponse();\n            if (object.code != null)\n                message.code = object.code | 0;\n            if (object.message != null)\n                message.message = String(object.message);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.ErrorResponse\n         * @static\n         * @param {shakebook.ErrorResponse} message ErrorResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ErrorResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.code = 0;\n                object.message = \"\";\n            }\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                object.code = message.code;\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            return object;\n        };\n\n        /**\n         * Converts this ErrorResponse to JSON.\n         * @function toJSON\n         * @memberof shakebook.ErrorResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ErrorResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ErrorResponse;\n    })();\n\n    shakebook.SignUpRequest = (function() {\n\n        /**\n         * Properties of a SignUpRequest.\n         * @memberof shakebook\n         * @interface ISignUpRequest\n         * @property {string|null} [accountName] SignUpRequest accountName\n         * @property {string|null} [accountEmail] SignUpRequest accountEmail\n         * @property {string|null} [accountPassword] SignUpRequest accountPassword\n         * @property {string|null} [emailValidCode] SignUpRequest emailValidCode\n         */\n\n        /**\n         * Constructs a new SignUpRequest.\n         * @memberof shakebook\n         * @classdesc Represents a SignUpRequest.\n         * @implements ISignUpRequest\n         * @constructor\n         * @param {shakebook.ISignUpRequest=} [properties] Properties to set\n         */\n        function SignUpRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SignUpRequest accountName.\n         * @member {string} accountName\n         * @memberof shakebook.SignUpRequest\n         * @instance\n         */\n        SignUpRequest.prototype.accountName = \"\";\n\n        /**\n         * SignUpRequest accountEmail.\n         * @member {string} accountEmail\n         * @memberof shakebook.SignUpRequest\n         * @instance\n         */\n        SignUpRequest.prototype.accountEmail = \"\";\n\n        /**\n         * SignUpRequest accountPassword.\n         * @member {string} accountPassword\n         * @memberof shakebook.SignUpRequest\n         * @instance\n         */\n        SignUpRequest.prototype.accountPassword = \"\";\n\n        /**\n         * SignUpRequest emailValidCode.\n         * @member {string} emailValidCode\n         * @memberof shakebook.SignUpRequest\n         * @instance\n         */\n        SignUpRequest.prototype.emailValidCode = \"\";\n\n        /**\n         * Creates a SignUpRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.SignUpRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.SignUpRequest} SignUpRequest\n         */\n        SignUpRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.SignUpRequest)\n                return object;\n            let message = new $root.shakebook.SignUpRequest();\n            if (object.accountName != null)\n                message.accountName = String(object.accountName);\n            if (object.accountEmail != null)\n                message.accountEmail = String(object.accountEmail);\n            if (object.accountPassword != null)\n                message.accountPassword = String(object.accountPassword);\n            if (object.emailValidCode != null)\n                message.emailValidCode = String(object.emailValidCode);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SignUpRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.SignUpRequest\n         * @static\n         * @param {shakebook.SignUpRequest} message SignUpRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SignUpRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.accountName = \"\";\n                object.accountEmail = \"\";\n                object.accountPassword = \"\";\n                object.emailValidCode = \"\";\n            }\n            if (message.accountName != null && message.hasOwnProperty(\"accountName\"))\n                object.accountName = message.accountName;\n            if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\"))\n                object.accountEmail = message.accountEmail;\n            if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\"))\n                object.accountPassword = message.accountPassword;\n            if (message.emailValidCode != null && message.hasOwnProperty(\"emailValidCode\"))\n                object.emailValidCode = message.emailValidCode;\n            return object;\n        };\n\n        /**\n         * Converts this SignUpRequest to JSON.\n         * @function toJSON\n         * @memberof shakebook.SignUpRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SignUpRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SignUpRequest;\n    })();\n\n    shakebook.AccountId = (function() {\n\n        /**\n         * Properties of an AccountId.\n         * @memberof shakebook\n         * @interface IAccountId\n         * @property {number|null} [id] AccountId id\n         */\n\n        /**\n         * Constructs a new AccountId.\n         * @memberof shakebook\n         * @classdesc Represents an AccountId.\n         * @implements IAccountId\n         * @constructor\n         * @param {shakebook.IAccountId=} [properties] Properties to set\n         */\n        function AccountId(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AccountId id.\n         * @member {number} id\n         * @memberof shakebook.AccountId\n         * @instance\n         */\n        AccountId.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates an AccountId message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.AccountId\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.AccountId} AccountId\n         */\n        AccountId.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.AccountId)\n                return object;\n            let message = new $root.shakebook.AccountId();\n            if (object.id != null)\n                if ($util.Long)\n                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;\n                else if (typeof object.id === \"string\")\n                    message.id = parseInt(object.id, 10);\n                else if (typeof object.id === \"number\")\n                    message.id = object.id;\n                else if (typeof object.id === \"object\")\n                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AccountId message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.AccountId\n         * @static\n         * @param {shakebook.AccountId} message AccountId\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AccountId.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.id = options.longs === String ? \"0\" : 0;\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (typeof message.id === \"number\")\n                    object.id = options.longs === String ? String(message.id) : message.id;\n                else\n                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;\n            return object;\n        };\n\n        /**\n         * Converts this AccountId to JSON.\n         * @function toJSON\n         * @memberof shakebook.AccountId\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AccountId.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AccountId;\n    })();\n\n    shakebook.SignInRequest = (function() {\n\n        /**\n         * Properties of a SignInRequest.\n         * @memberof shakebook\n         * @interface ISignInRequest\n         * @property {string|null} [accountName] SignInRequest accountName\n         * @property {string|null} [accountPassword] SignInRequest accountPassword\n         */\n\n        /**\n         * Constructs a new SignInRequest.\n         * @memberof shakebook\n         * @classdesc Represents a SignInRequest.\n         * @implements ISignInRequest\n         * @constructor\n         * @param {shakebook.ISignInRequest=} [properties] Properties to set\n         */\n        function SignInRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SignInRequest accountName.\n         * @member {string} accountName\n         * @memberof shakebook.SignInRequest\n         * @instance\n         */\n        SignInRequest.prototype.accountName = \"\";\n\n        /**\n         * SignInRequest accountPassword.\n         * @member {string} accountPassword\n         * @memberof shakebook.SignInRequest\n         * @instance\n         */\n        SignInRequest.prototype.accountPassword = \"\";\n\n        /**\n         * Creates a SignInRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.SignInRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.SignInRequest} SignInRequest\n         */\n        SignInRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.SignInRequest)\n                return object;\n            let message = new $root.shakebook.SignInRequest();\n            if (object.accountName != null)\n                message.accountName = String(object.accountName);\n            if (object.accountPassword != null)\n                message.accountPassword = String(object.accountPassword);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SignInRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.SignInRequest\n         * @static\n         * @param {shakebook.SignInRequest} message SignInRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SignInRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.accountName = \"\";\n                object.accountPassword = \"\";\n            }\n            if (message.accountName != null && message.hasOwnProperty(\"accountName\"))\n                object.accountName = message.accountName;\n            if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\"))\n                object.accountPassword = message.accountPassword;\n            return object;\n        };\n\n        /**\n         * Converts this SignInRequest to JSON.\n         * @function toJSON\n         * @memberof shakebook.SignInRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SignInRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SignInRequest;\n    })();\n\n    shakebook.SignInResponse = (function() {\n\n        /**\n         * Properties of a SignInResponse.\n         * @memberof shakebook\n         * @interface ISignInResponse\n         * @property {boolean|null} [success] SignInResponse success\n         * @property {string|null} [message] SignInResponse message\n         * @property {string|null} [data] SignInResponse data\n         */\n\n        /**\n         * Constructs a new SignInResponse.\n         * @memberof shakebook\n         * @classdesc Represents a SignInResponse.\n         * @implements ISignInResponse\n         * @constructor\n         * @param {shakebook.ISignInResponse=} [properties] Properties to set\n         */\n        function SignInResponse(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SignInResponse success.\n         * @member {boolean} success\n         * @memberof shakebook.SignInResponse\n         * @instance\n         */\n        SignInResponse.prototype.success = false;\n\n        /**\n         * SignInResponse message.\n         * @member {string} message\n         * @memberof shakebook.SignInResponse\n         * @instance\n         */\n        SignInResponse.prototype.message = \"\";\n\n        /**\n         * SignInResponse data.\n         * @member {string} data\n         * @memberof shakebook.SignInResponse\n         * @instance\n         */\n        SignInResponse.prototype.data = \"\";\n\n        /**\n         * Creates a SignInResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.SignInResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.SignInResponse} SignInResponse\n         */\n        SignInResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.SignInResponse)\n                return object;\n            let message = new $root.shakebook.SignInResponse();\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            if (object.message != null)\n                message.message = String(object.message);\n            if (object.data != null)\n                message.data = String(object.data);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SignInResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.SignInResponse\n         * @static\n         * @param {shakebook.SignInResponse} message SignInResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SignInResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.success = false;\n                object.message = \"\";\n                object.data = \"\";\n            }\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                object.data = message.data;\n            return object;\n        };\n\n        /**\n         * Converts this SignInResponse to JSON.\n         * @function toJSON\n         * @memberof shakebook.SignInResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SignInResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SignInResponse;\n    })();\n\n    /**\n     * AccountStatus enum.\n     * @name shakebook.AccountStatus\n     * @enum {number}\n     * @property {number} NORMAL=0 NORMAL value\n     * @property {number} DISABLE=1 DISABLE value\n     * @property {number} LOCK=2 LOCK value\n     * @property {number} DELETE=3 DELETE value\n     */\n    shakebook.AccountStatus = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NORMAL\"] = 0;\n        values[valuesById[1] = \"DISABLE\"] = 1;\n        values[valuesById[2] = \"LOCK\"] = 2;\n        values[valuesById[3] = \"DELETE\"] = 3;\n        return values;\n    })();\n\n    shakebook.UpdateAccountRequest = (function() {\n\n        /**\n         * Properties of an UpdateAccountRequest.\n         * @memberof shakebook\n         * @interface IUpdateAccountRequest\n         * @property {string|null} [accountName] UpdateAccountRequest accountName\n         * @property {string|null} [accountEmail] UpdateAccountRequest accountEmail\n         * @property {string|null} [accountPhone] UpdateAccountRequest accountPhone\n         * @property {string|null} [imageUrl] UpdateAccountRequest imageUrl\n         * @property {string|null} [backgroundUrl] UpdateAccountRequest backgroundUrl\n         * @property {string|null} [accountDesc] UpdateAccountRequest accountDesc\n         * @property {shakebook.AccountStatus|null} [accountStatus] UpdateAccountRequest accountStatus\n         * @property {string|null} [accountPassword] UpdateAccountRequest accountPassword\n         */\n\n        /**\n         * Constructs a new UpdateAccountRequest.\n         * @memberof shakebook\n         * @classdesc Represents an UpdateAccountRequest.\n         * @implements IUpdateAccountRequest\n         * @constructor\n         * @param {shakebook.IUpdateAccountRequest=} [properties] Properties to set\n         */\n        function UpdateAccountRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * UpdateAccountRequest accountName.\n         * @member {string} accountName\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountName = \"\";\n\n        /**\n         * UpdateAccountRequest accountEmail.\n         * @member {string} accountEmail\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountEmail = \"\";\n\n        /**\n         * UpdateAccountRequest accountPhone.\n         * @member {string} accountPhone\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountPhone = \"\";\n\n        /**\n         * UpdateAccountRequest imageUrl.\n         * @member {string} imageUrl\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.imageUrl = \"\";\n\n        /**\n         * UpdateAccountRequest backgroundUrl.\n         * @member {string} backgroundUrl\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.backgroundUrl = \"\";\n\n        /**\n         * UpdateAccountRequest accountDesc.\n         * @member {string} accountDesc\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountDesc = \"\";\n\n        /**\n         * UpdateAccountRequest accountStatus.\n         * @member {shakebook.AccountStatus} accountStatus\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountStatus = 0;\n\n        /**\n         * UpdateAccountRequest accountPassword.\n         * @member {string} accountPassword\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         */\n        UpdateAccountRequest.prototype.accountPassword = \"\";\n\n        /**\n         * Creates an UpdateAccountRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.UpdateAccountRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.UpdateAccountRequest} UpdateAccountRequest\n         */\n        UpdateAccountRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.UpdateAccountRequest)\n                return object;\n            let message = new $root.shakebook.UpdateAccountRequest();\n            if (object.accountName != null)\n                message.accountName = String(object.accountName);\n            if (object.accountEmail != null)\n                message.accountEmail = String(object.accountEmail);\n            if (object.accountPhone != null)\n                message.accountPhone = String(object.accountPhone);\n            if (object.imageUrl != null)\n                message.imageUrl = String(object.imageUrl);\n            if (object.backgroundUrl != null)\n                message.backgroundUrl = String(object.backgroundUrl);\n            if (object.accountDesc != null)\n                message.accountDesc = String(object.accountDesc);\n            switch (object.accountStatus) {\n            case \"NORMAL\":\n            case 0:\n                message.accountStatus = 0;\n                break;\n            case \"DISABLE\":\n            case 1:\n                message.accountStatus = 1;\n                break;\n            case \"LOCK\":\n            case 2:\n                message.accountStatus = 2;\n                break;\n            case \"DELETE\":\n            case 3:\n                message.accountStatus = 3;\n                break;\n            }\n            if (object.accountPassword != null)\n                message.accountPassword = String(object.accountPassword);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an UpdateAccountRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.UpdateAccountRequest\n         * @static\n         * @param {shakebook.UpdateAccountRequest} message UpdateAccountRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        UpdateAccountRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.accountName = \"\";\n                object.accountEmail = \"\";\n                object.accountPhone = \"\";\n                object.imageUrl = \"\";\n                object.backgroundUrl = \"\";\n                object.accountDesc = \"\";\n                object.accountStatus = options.enums === String ? \"NORMAL\" : 0;\n                object.accountPassword = \"\";\n            }\n            if (message.accountName != null && message.hasOwnProperty(\"accountName\"))\n                object.accountName = message.accountName;\n            if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\"))\n                object.accountEmail = message.accountEmail;\n            if (message.accountPhone != null && message.hasOwnProperty(\"accountPhone\"))\n                object.accountPhone = message.accountPhone;\n            if (message.imageUrl != null && message.hasOwnProperty(\"imageUrl\"))\n                object.imageUrl = message.imageUrl;\n            if (message.backgroundUrl != null && message.hasOwnProperty(\"backgroundUrl\"))\n                object.backgroundUrl = message.backgroundUrl;\n            if (message.accountDesc != null && message.hasOwnProperty(\"accountDesc\"))\n                object.accountDesc = message.accountDesc;\n            if (message.accountStatus != null && message.hasOwnProperty(\"accountStatus\"))\n                object.accountStatus = options.enums === String ? $root.shakebook.AccountStatus[message.accountStatus] : message.accountStatus;\n            if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\"))\n                object.accountPassword = message.accountPassword;\n            return object;\n        };\n\n        /**\n         * Converts this UpdateAccountRequest to JSON.\n         * @function toJSON\n         * @memberof shakebook.UpdateAccountRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        UpdateAccountRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return UpdateAccountRequest;\n    })();\n\n    shakebook.Account = (function() {\n\n        /**\n         * Properties of an Account.\n         * @memberof shakebook\n         * @interface IAccount\n         * @property {number|null} [id] Account id\n         * @property {string|null} [accountName] Account accountName\n         * @property {string|null} [accountPassword] Account accountPassword\n         * @property {string|null} [accountPhone] Account accountPhone\n         * @property {string|null} [accountEmail] Account accountEmail\n         * @property {string|null} [signupAt] Account signupAt\n         * @property {string|null} [lastTime] Account lastTime\n         * @property {shakebook.AccountStatus|null} [accountStatus] Account accountStatus\n         * @property {string|null} [imageUrl] Account imageUrl\n         * @property {string|null} [backgroundUrl] Account backgroundUrl\n         * @property {string|null} [accountDesc] Account accountDesc\n         * @property {number|null} [thumbsUp] Account thumbsUp\n         * @property {number|null} [focusNumber] Account focusNumber\n         * @property {number|null} [fansNumber] Account fansNumber\n         */\n\n        /**\n         * Constructs a new Account.\n         * @memberof shakebook\n         * @classdesc Represents an Account.\n         * @implements IAccount\n         * @constructor\n         * @param {shakebook.IAccount=} [properties] Properties to set\n         */\n        function Account(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Account id.\n         * @member {number} id\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Account accountName.\n         * @member {string} accountName\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.accountName = \"\";\n\n        /**\n         * Account accountPassword.\n         * @member {string} accountPassword\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.accountPassword = \"\";\n\n        /**\n         * Account accountPhone.\n         * @member {string} accountPhone\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.accountPhone = \"\";\n\n        /**\n         * Account accountEmail.\n         * @member {string} accountEmail\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.accountEmail = \"\";\n\n        /**\n         * Account signupAt.\n         * @member {string} signupAt\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.signupAt = \"\";\n\n        /**\n         * Account lastTime.\n         * @member {string} lastTime\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.lastTime = \"\";\n\n        /**\n         * Account accountStatus.\n         * @member {shakebook.AccountStatus} accountStatus\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.accountStatus = 0;\n\n        /**\n         * Account imageUrl.\n         * @member {string} imageUrl\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.imageUrl = \"\";\n\n        /**\n         * Account backgroundUrl.\n         * @member {string} backgroundUrl\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.backgroundUrl = \"\";\n\n        /**\n         * Account accountDesc.\n         * @member {string} accountDesc\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.accountDesc = \"\";\n\n        /**\n         * Account thumbsUp.\n         * @member {number} thumbsUp\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.thumbsUp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Account focusNumber.\n         * @member {number} focusNumber\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.focusNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Account fansNumber.\n         * @member {number} fansNumber\n         * @memberof shakebook.Account\n         * @instance\n         */\n        Account.prototype.fansNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates an Account message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.Account\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.Account} Account\n         */\n        Account.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.Account)\n                return object;\n            let message = new $root.shakebook.Account();\n            if (object.id != null)\n                if ($util.Long)\n                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;\n                else if (typeof object.id === \"string\")\n                    message.id = parseInt(object.id, 10);\n                else if (typeof object.id === \"number\")\n                    message.id = object.id;\n                else if (typeof object.id === \"object\")\n                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();\n            if (object.accountName != null)\n                message.accountName = String(object.accountName);\n            if (object.accountPassword != null)\n                message.accountPassword = String(object.accountPassword);\n            if (object.accountPhone != null)\n                message.accountPhone = String(object.accountPhone);\n            if (object.accountEmail != null)\n                message.accountEmail = String(object.accountEmail);\n            if (object.signupAt != null)\n                message.signupAt = String(object.signupAt);\n            if (object.lastTime != null)\n                message.lastTime = String(object.lastTime);\n            switch (object.accountStatus) {\n            case \"NORMAL\":\n            case 0:\n                message.accountStatus = 0;\n                break;\n            case \"DISABLE\":\n            case 1:\n                message.accountStatus = 1;\n                break;\n            case \"LOCK\":\n            case 2:\n                message.accountStatus = 2;\n                break;\n            case \"DELETE\":\n            case 3:\n                message.accountStatus = 3;\n                break;\n            }\n            if (object.imageUrl != null)\n                message.imageUrl = String(object.imageUrl);\n            if (object.backgroundUrl != null)\n                message.backgroundUrl = String(object.backgroundUrl);\n            if (object.accountDesc != null)\n                message.accountDesc = String(object.accountDesc);\n            if (object.thumbsUp != null)\n                if ($util.Long)\n                    (message.thumbsUp = $util.Long.fromValue(object.thumbsUp)).unsigned = false;\n                else if (typeof object.thumbsUp === \"string\")\n                    message.thumbsUp = parseInt(object.thumbsUp, 10);\n                else if (typeof object.thumbsUp === \"number\")\n                    message.thumbsUp = object.thumbsUp;\n                else if (typeof object.thumbsUp === \"object\")\n                    message.thumbsUp = new $util.LongBits(object.thumbsUp.low >>> 0, object.thumbsUp.high >>> 0).toNumber();\n            if (object.focusNumber != null)\n                if ($util.Long)\n                    (message.focusNumber = $util.Long.fromValue(object.focusNumber)).unsigned = false;\n                else if (typeof object.focusNumber === \"string\")\n                    message.focusNumber = parseInt(object.focusNumber, 10);\n                else if (typeof object.focusNumber === \"number\")\n                    message.focusNumber = object.focusNumber;\n                else if (typeof object.focusNumber === \"object\")\n                    message.focusNumber = new $util.LongBits(object.focusNumber.low >>> 0, object.focusNumber.high >>> 0).toNumber();\n            if (object.fansNumber != null)\n                if ($util.Long)\n                    (message.fansNumber = $util.Long.fromValue(object.fansNumber)).unsigned = false;\n                else if (typeof object.fansNumber === \"string\")\n                    message.fansNumber = parseInt(object.fansNumber, 10);\n                else if (typeof object.fansNumber === \"number\")\n                    message.fansNumber = object.fansNumber;\n                else if (typeof object.fansNumber === \"object\")\n                    message.fansNumber = new $util.LongBits(object.fansNumber.low >>> 0, object.fansNumber.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Account message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.Account\n         * @static\n         * @param {shakebook.Account} message Account\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Account.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.id = options.longs === String ? \"0\" : 0;\n                object.accountName = \"\";\n                object.accountPassword = \"\";\n                object.accountPhone = \"\";\n                object.accountEmail = \"\";\n                object.signupAt = \"\";\n                object.lastTime = \"\";\n                object.accountStatus = options.enums === String ? \"NORMAL\" : 0;\n                object.imageUrl = \"\";\n                object.backgroundUrl = \"\";\n                object.accountDesc = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.thumbsUp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.thumbsUp = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.focusNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.focusNumber = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.fansNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.fansNumber = options.longs === String ? \"0\" : 0;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (typeof message.id === \"number\")\n                    object.id = options.longs === String ? String(message.id) : message.id;\n                else\n                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;\n            if (message.accountName != null && message.hasOwnProperty(\"accountName\"))\n                object.accountName = message.accountName;\n            if (message.accountPassword != null && message.hasOwnProperty(\"accountPassword\"))\n                object.accountPassword = message.accountPassword;\n            if (message.accountPhone != null && message.hasOwnProperty(\"accountPhone\"))\n                object.accountPhone = message.accountPhone;\n            if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\"))\n                object.accountEmail = message.accountEmail;\n            if (message.signupAt != null && message.hasOwnProperty(\"signupAt\"))\n                object.signupAt = message.signupAt;\n            if (message.lastTime != null && message.hasOwnProperty(\"lastTime\"))\n                object.lastTime = message.lastTime;\n            if (message.accountStatus != null && message.hasOwnProperty(\"accountStatus\"))\n                object.accountStatus = options.enums === String ? $root.shakebook.AccountStatus[message.accountStatus] : message.accountStatus;\n            if (message.imageUrl != null && message.hasOwnProperty(\"imageUrl\"))\n                object.imageUrl = message.imageUrl;\n            if (message.backgroundUrl != null && message.hasOwnProperty(\"backgroundUrl\"))\n                object.backgroundUrl = message.backgroundUrl;\n            if (message.accountDesc != null && message.hasOwnProperty(\"accountDesc\"))\n                object.accountDesc = message.accountDesc;\n            if (message.thumbsUp != null && message.hasOwnProperty(\"thumbsUp\"))\n                if (typeof message.thumbsUp === \"number\")\n                    object.thumbsUp = options.longs === String ? String(message.thumbsUp) : message.thumbsUp;\n                else\n                    object.thumbsUp = options.longs === String ? $util.Long.prototype.toString.call(message.thumbsUp) : options.longs === Number ? new $util.LongBits(message.thumbsUp.low >>> 0, message.thumbsUp.high >>> 0).toNumber() : message.thumbsUp;\n            if (message.focusNumber != null && message.hasOwnProperty(\"focusNumber\"))\n                if (typeof message.focusNumber === \"number\")\n                    object.focusNumber = options.longs === String ? String(message.focusNumber) : message.focusNumber;\n                else\n                    object.focusNumber = options.longs === String ? $util.Long.prototype.toString.call(message.focusNumber) : options.longs === Number ? new $util.LongBits(message.focusNumber.low >>> 0, message.focusNumber.high >>> 0).toNumber() : message.focusNumber;\n            if (message.fansNumber != null && message.hasOwnProperty(\"fansNumber\"))\n                if (typeof message.fansNumber === \"number\")\n                    object.fansNumber = options.longs === String ? String(message.fansNumber) : message.fansNumber;\n                else\n                    object.fansNumber = options.longs === String ? $util.Long.prototype.toString.call(message.fansNumber) : options.longs === Number ? new $util.LongBits(message.fansNumber.low >>> 0, message.fansNumber.high >>> 0).toNumber() : message.fansNumber;\n            return object;\n        };\n\n        /**\n         * Converts this Account to JSON.\n         * @function toJSON\n         * @memberof shakebook.Account\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Account.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Account;\n    })();\n\n    shakebook.ValidEmailRequest = (function() {\n\n        /**\n         * Properties of a ValidEmailRequest.\n         * @memberof shakebook\n         * @interface IValidEmailRequest\n         * @property {string|null} [accountEmail] ValidEmailRequest accountEmail\n         */\n\n        /**\n         * Constructs a new ValidEmailRequest.\n         * @memberof shakebook\n         * @classdesc Represents a ValidEmailRequest.\n         * @implements IValidEmailRequest\n         * @constructor\n         * @param {shakebook.IValidEmailRequest=} [properties] Properties to set\n         */\n        function ValidEmailRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValidEmailRequest accountEmail.\n         * @member {string} accountEmail\n         * @memberof shakebook.ValidEmailRequest\n         * @instance\n         */\n        ValidEmailRequest.prototype.accountEmail = \"\";\n\n        /**\n         * Creates a ValidEmailRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.ValidEmailRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.ValidEmailRequest} ValidEmailRequest\n         */\n        ValidEmailRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.ValidEmailRequest)\n                return object;\n            let message = new $root.shakebook.ValidEmailRequest();\n            if (object.accountEmail != null)\n                message.accountEmail = String(object.accountEmail);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValidEmailRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.ValidEmailRequest\n         * @static\n         * @param {shakebook.ValidEmailRequest} message ValidEmailRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValidEmailRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.accountEmail = \"\";\n            if (message.accountEmail != null && message.hasOwnProperty(\"accountEmail\"))\n                object.accountEmail = message.accountEmail;\n            return object;\n        };\n\n        /**\n         * Converts this ValidEmailRequest to JSON.\n         * @function toJSON\n         * @memberof shakebook.ValidEmailRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValidEmailRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValidEmailRequest;\n    })();\n\n    shakebook.OperationResponse = (function() {\n\n        /**\n         * Properties of an OperationResponse.\n         * @memberof shakebook\n         * @interface IOperationResponse\n         * @property {boolean|null} [success] OperationResponse success\n         */\n\n        /**\n         * Constructs a new OperationResponse.\n         * @memberof shakebook\n         * @classdesc Represents an OperationResponse.\n         * @implements IOperationResponse\n         * @constructor\n         * @param {shakebook.IOperationResponse=} [properties] Properties to set\n         */\n        function OperationResponse(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperationResponse success.\n         * @member {boolean} success\n         * @memberof shakebook.OperationResponse\n         * @instance\n         */\n        OperationResponse.prototype.success = false;\n\n        /**\n         * Creates an OperationResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof shakebook.OperationResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {shakebook.OperationResponse} OperationResponse\n         */\n        OperationResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.shakebook.OperationResponse)\n                return object;\n            let message = new $root.shakebook.OperationResponse();\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperationResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof shakebook.OperationResponse\n         * @static\n         * @param {shakebook.OperationResponse} message OperationResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperationResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.success = false;\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            return object;\n        };\n\n        /**\n         * Converts this OperationResponse to JSON.\n         * @function toJSON\n         * @memberof shakebook.OperationResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperationResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperationResponse;\n    })();\n\n    shakebook.AccountService = (function() {\n\n        /**\n         * Constructs a new AccountService service.\n         * @memberof shakebook\n         * @classdesc Represents an AccountService\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function AccountService(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (AccountService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = AccountService;\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#signUp}.\n         * @memberof shakebook.AccountService\n         * @typedef SignUpCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.AccountId} [response] AccountId\n         */\n\n        /**\n         * Calls SignUp.\n         * @function signUp\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.ISignUpRequest} request SignUpRequest message or plain object\n         * @param {shakebook.AccountService.SignUpCallback} callback Node-style callback called with the error, if any, and AccountId\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.signUp = function signUp(request, callback) {\n            return this.rpcCall(signUp, $root.shakebook.SignUpRequest, $root.shakebook.AccountId, request, callback);\n        }, \"name\", { value: \"SignUp\" });\n\n        /**\n         * Calls SignUp.\n         * @function signUp\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.ISignUpRequest} request SignUpRequest message or plain object\n         * @returns {Promise<shakebook.AccountId>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#signIn}.\n         * @memberof shakebook.AccountService\n         * @typedef SignInCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.SignInResponse} [response] SignInResponse\n         */\n\n        /**\n         * Calls SignIn.\n         * @function signIn\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.ISignInRequest} request SignInRequest message or plain object\n         * @param {shakebook.AccountService.SignInCallback} callback Node-style callback called with the error, if any, and SignInResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.signIn = function signIn(request, callback) {\n            return this.rpcCall(signIn, $root.shakebook.SignInRequest, $root.shakebook.SignInResponse, request, callback);\n        }, \"name\", { value: \"SignIn\" });\n\n        /**\n         * Calls SignIn.\n         * @function signIn\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.ISignInRequest} request SignInRequest message or plain object\n         * @returns {Promise<shakebook.SignInResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#signOut}.\n         * @memberof shakebook.AccountService\n         * @typedef SignOutCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.OperationResponse} [response] OperationResponse\n         */\n\n        /**\n         * Calls SignOut.\n         * @function signOut\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IAccountId} request AccountId message or plain object\n         * @param {shakebook.AccountService.SignOutCallback} callback Node-style callback called with the error, if any, and OperationResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.signOut = function signOut(request, callback) {\n            return this.rpcCall(signOut, $root.shakebook.AccountId, $root.shakebook.OperationResponse, request, callback);\n        }, \"name\", { value: \"SignOut\" });\n\n        /**\n         * Calls SignOut.\n         * @function signOut\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IAccountId} request AccountId message or plain object\n         * @returns {Promise<shakebook.OperationResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#validEmail}.\n         * @memberof shakebook.AccountService\n         * @typedef ValidEmailCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.OperationResponse} [response] OperationResponse\n         */\n\n        /**\n         * Calls ValidEmail.\n         * @function validEmail\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IValidEmailRequest} request ValidEmailRequest message or plain object\n         * @param {shakebook.AccountService.ValidEmailCallback} callback Node-style callback called with the error, if any, and OperationResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.validEmail = function validEmail(request, callback) {\n            return this.rpcCall(validEmail, $root.shakebook.ValidEmailRequest, $root.shakebook.OperationResponse, request, callback);\n        }, \"name\", { value: \"ValidEmail\" });\n\n        /**\n         * Calls ValidEmail.\n         * @function validEmail\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IValidEmailRequest} request ValidEmailRequest message or plain object\n         * @returns {Promise<shakebook.OperationResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#updateAccount}.\n         * @memberof shakebook.AccountService\n         * @typedef UpdateAccountCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.AccountId} [response] AccountId\n         */\n\n        /**\n         * Calls UpdateAccount.\n         * @function updateAccount\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IUpdateAccountRequest} request UpdateAccountRequest message or plain object\n         * @param {shakebook.AccountService.UpdateAccountCallback} callback Node-style callback called with the error, if any, and AccountId\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.updateAccount = function updateAccount(request, callback) {\n            return this.rpcCall(updateAccount, $root.shakebook.UpdateAccountRequest, $root.shakebook.AccountId, request, callback);\n        }, \"name\", { value: \"UpdateAccount\" });\n\n        /**\n         * Calls UpdateAccount.\n         * @function updateAccount\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IUpdateAccountRequest} request UpdateAccountRequest message or plain object\n         * @returns {Promise<shakebook.AccountId>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link shakebook.AccountService#getAccount}.\n         * @memberof shakebook.AccountService\n         * @typedef GetAccountCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {shakebook.Account} [response] Account\n         */\n\n        /**\n         * Calls GetAccount.\n         * @function getAccount\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IAccountId} request AccountId message or plain object\n         * @param {shakebook.AccountService.GetAccountCallback} callback Node-style callback called with the error, if any, and Account\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(AccountService.prototype.getAccount = function getAccount(request, callback) {\n            return this.rpcCall(getAccount, $root.shakebook.AccountId, $root.shakebook.Account, request, callback);\n        }, \"name\", { value: \"GetAccount\" });\n\n        /**\n         * Calls GetAccount.\n         * @function getAccount\n         * @memberof shakebook.AccountService\n         * @instance\n         * @param {shakebook.IAccountId} request AccountId message or plain object\n         * @returns {Promise<shakebook.Account>} Promise\n         * @variation 2\n         */\n\n        return AccountService;\n    })();\n\n    return shakebook;\n})();"]},"metadata":{},"sourceType":"module"}