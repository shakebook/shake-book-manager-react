import { Base } from './base';
import { Model } from './types';
import { GridLayout } from './grid';
import { RandomLayout } from './random';
import { GForceLayout } from './gForce';
import { ForceLayout } from './force';
import { CircularLayout } from './circular';
import { DagreLayout } from './dagre';
import { RadialLayout } from './radial';
import { ConcentricLayout } from './concentric';
import { MDSLayout } from './mds';
import { FruchtermanLayout } from './fruchterman';
import { FruchtermanGPULayout } from './gpu/fruchterman';
import { GForceGPULayout } from './gpu/gForce';
import { ComboForceLayout } from './comboForce';
export declare class Layout {
    readonly layoutInstance: Base;
    constructor(options: ILayout.LayoutOptions);
    layout(data: Model): Model;
    updateCfg(cfg: ILayout.LayoutOptions): void;
    init(data: Model): void;
    execute(): void;
    getDefaultCfg(): {};
    destroy(): void;
}
export declare const Layouts: {
    [key: string]: any;
};
export declare namespace ILayout {
    type LayoutTypes = 'grid' | 'random' | 'force' | 'circular' | 'dagre' | 'radial' | 'concentric' | 'mds' | 'fruchterman' | 'fruchterman-gpu' | 'gForce' | 'gForce-gpu' | 'comboForce';
    type LayoutOptions = GridLayout.GridLayoutOptions | RandomLayout.RandomLayoutOptions | ForceLayout.ForceLayoutOptions | CircularLayout.CircularLayoutOptions | DagreLayout.DagreLayoutOptions | RadialLayout.RadialLayoutOptions | ConcentricLayout.ConcentricLayoutOptions | MDSLayout.MDSLayoutOptions | FruchtermanLayout.FruchtermanLayoutOptions | FruchtermanGPULayout.FruchtermanGPULayoutOptions | GForceLayout.GForceLayoutOptions | GForceGPULayout.GForceGPULayoutOptions | ComboForceLayout.ComboForceLayoutOptions;
}
