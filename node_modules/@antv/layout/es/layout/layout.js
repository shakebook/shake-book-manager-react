import { GridLayout } from './grid';
import { RandomLayout } from './random';
import { GForceLayout } from './gForce';
import { ForceLayout } from './force';
import { CircularLayout } from './circular';
import { DagreLayout } from './dagre';
import { RadialLayout } from './radial';
import { registerLayout, getLayoutByName } from '../registy';
import { ConcentricLayout } from './concentric';
import { MDSLayout } from './mds';
import { FruchtermanLayout } from './fruchterman';
import { FruchtermanGPULayout } from './gpu/fruchterman';
import { GForceGPULayout } from './gpu/gForce';
import { ComboForceLayout } from './comboForce';
export class Layout {
    constructor(options) {
        const layoutClass = getLayoutByName(options.type);
        this.layoutInstance = new layoutClass(options);
    }
    layout(data) {
        return this.layoutInstance.layout(data);
    }
    updateCfg(cfg) {
        this.layoutInstance.updateCfg(cfg);
    }
    init(data) {
        this.layoutInstance.init(data);
    }
    execute() {
        this.layoutInstance.execute();
    }
    getDefaultCfg() {
        return this.layoutInstance.getDefaultCfg();
    }
    destroy() {
        return this.layoutInstance.destroy();
    }
}
// FIXME
// FOR G6
export const Layouts = new Proxy({}, {
    get: (target, propKey) => {
        return getLayoutByName(propKey);
    },
    set: (target, propKey, value) => {
        registerLayout(propKey, value);
        return true;
    }
});
export var ILayout;
(function (ILayout) {
    registerLayout('grid', GridLayout);
    registerLayout('random', RandomLayout);
    registerLayout('force', ForceLayout);
    registerLayout('circular', CircularLayout);
    registerLayout('dagre', DagreLayout);
    registerLayout('radial', RadialLayout);
    registerLayout('concentric', ConcentricLayout);
    registerLayout('mds', MDSLayout);
    registerLayout('fruchterman', FruchtermanLayout);
    registerLayout('fruchterman-gpu', FruchtermanGPULayout);
    registerLayout('gForce', GForceLayout);
    registerLayout('gForce-gpu', GForceGPULayout);
    registerLayout('comboForce', ComboForceLayout);
})(ILayout || (ILayout = {}));
//# sourceMappingURL=layout.js.map