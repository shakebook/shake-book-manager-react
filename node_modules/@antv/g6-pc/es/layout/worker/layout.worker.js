import WebWorker from './work';

function workerCode() {
  // @ts-ignore
  importScripts('https://unpkg.com/@antv/layout@latest/dist/layout.min.js');
  var LAYOUT_MESSAGE = {
    // run layout
    RUN: 'LAYOUT_RUN',
    // layout ended with success
    END: 'LAYOUT_END',
    // layout error
    ERROR: 'LAYOUT_ERROR',
    // layout tick, used in force directed layout
    TICK: 'LAYOUT_TICK',
    GPURUN: 'GPU_LAYOUT_RUN',
    GPUEND: 'GPU_LAYOUT_END'
  };

  function isLayoutMessage(event) {
    var type = event.data.type;
    return type === LAYOUT_MESSAGE.RUN || type === LAYOUT_MESSAGE.GPURUN;
  }

  function handleLayoutMessage(event) {
    var type = event.data.type;

    switch (type) {
      case LAYOUT_MESSAGE.RUN:
        {
          var _a = event.data,
              nodes = _a.nodes,
              edges = _a.edges,
              _b = _a.layoutCfg,
              layoutCfg = _b === void 0 ? {} : _b;
          var layoutType = layoutCfg.type; // @ts-ignore

          var LayoutClass = layout.getLayoutByName(layoutType);

          if (!LayoutClass) {
            this.postMessage({
              type: LAYOUT_MESSAGE.ERROR,
              message: "layout " + layoutType + " not found"
            });
            break;
          }

          var layoutMethod = new LayoutClass(layoutCfg);
          layoutMethod.init({
            nodes: nodes,
            edges: edges
          });
          layoutMethod.execute();
          this.postMessage({
            type: LAYOUT_MESSAGE.END,
            nodes: nodes
          });
          layoutMethod.destroy();
          break;
        }

      case LAYOUT_MESSAGE.GPURUN:
        {
          var _c = event.data,
              nodes = _c.nodes,
              edges = _c.edges,
              _d = _c.layoutCfg,
              layoutCfg = _d === void 0 ? {} : _d,
              canvas = _c.canvas;
          var layoutType = layoutCfg.type; // @ts-ignore

          var LayoutClass = layout.getLayoutByName(layoutType);

          if (!LayoutClass) {
            this.postMessage({
              type: LAYOUT_MESSAGE.ERROR,
              message: "layout " + layoutType + " not found"
            });
            break;
          }

          if (layoutType.split('-')[1] !== 'gpu') {
            this.postMessage({
              type: LAYOUT_MESSAGE.ERROR,
              message: "layout " + layoutType + " does not support GPU"
            });
            break;
          }

          var layoutMethod = new LayoutClass(layoutCfg);
          layoutMethod.init({
            nodes: nodes,
            edges: edges
          });
          layoutMethod.executeWithWorker(canvas, this);
          break;
        }

      default:
        break;
    }
  }

  onmessage = function onmessage(event) {
    if (isLayoutMessage(event)) {
      handleLayoutMessage(event);
    }
  };
}

var LayoutWorker = new WebWorker(workerCode);
export { LayoutWorker };